<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="645.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="1696"><g><title>__memmove_avx_unaligned_erms (2 samples, 0.12%)</title><rect x="0.0000%" y="565" width="0.1179%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="575.50"></text></g><g><title>alloc::string::String::with_capacity (3 samples, 0.18%)</title><rect x="0.5896%" y="549" width="0.1769%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="3"/><text x="0.8396%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.18%)</title><rect x="0.5896%" y="533" width="0.1769%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="3"/><text x="0.8396%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.18%)</title><rect x="0.5896%" y="517" width="0.1769%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="3"/><text x="0.8396%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.18%)</title><rect x="0.5896%" y="501" width="0.1769%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="3"/><text x="0.8396%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.18%)</title><rect x="0.5896%" y="485" width="0.1769%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="3"/><text x="0.8396%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.18%)</title><rect x="0.5896%" y="469" width="0.1769%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="3"/><text x="0.8396%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.18%)</title><rect x="0.5896%" y="453" width="0.1769%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="3"/><text x="0.8396%" y="463.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.18%)</title><rect x="0.5896%" y="437" width="0.1769%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="3"/><text x="0.8396%" y="447.50"></text></g><g><title>alloc::fmt::format (14 samples, 0.83%)</title><rect x="0.1179%" y="565" width="0.8255%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="14"/><text x="0.3679%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.18%)</title><rect x="0.7665%" y="549" width="0.1769%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="3"/><text x="1.0165%" y="559.50"></text></g><g><title>[[heap]] (17 samples, 1.00%)</title><rect x="0.0000%" y="581" width="1.0024%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="17"/><text x="0.2500%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="0.9434%" y="565" width="0.0590%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="1"/><text x="1.1934%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="1.0024%" y="565" width="0.0590%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="1"/><text x="1.2524%" y="575.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_i8 (1 samples, 0.06%)</title><rect x="1.0613%" y="565" width="0.0590%" height="15" fill="rgb(217,207,13)" fg:x="18" fg:w="1"/><text x="1.3113%" y="575.50"></text></g><g><title>__GI___libc_free (2 samples, 0.12%)</title><rect x="1.1203%" y="565" width="0.1179%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="2"/><text x="1.3703%" y="575.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.06%)</title><rect x="1.2382%" y="565" width="0.0590%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="1"/><text x="1.4882%" y="575.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.35%)</title><rect x="1.2972%" y="565" width="0.3538%" height="15" fill="rgb(210,31,41)" fg:x="22" fg:w="6"/><text x="1.5472%" y="575.50"></text></g><g><title>__rdl_realloc (3 samples, 0.18%)</title><rect x="1.6509%" y="565" width="0.1769%" height="15" fill="rgb(221,200,47)" fg:x="28" fg:w="3"/><text x="1.9009%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.18%)</title><rect x="1.6509%" y="549" width="0.1769%" height="15" fill="rgb(226,26,5)" fg:x="28" fg:w="3"/><text x="1.9009%" y="559.50"></text></g><g><title>_int_free (1 samples, 0.06%)</title><rect x="1.8278%" y="565" width="0.0590%" height="15" fill="rgb(249,33,26)" fg:x="31" fg:w="1"/><text x="2.0778%" y="575.50"></text></g><g><title>_int_malloc (14 samples, 0.83%)</title><rect x="1.8868%" y="565" width="0.8255%" height="15" fill="rgb(235,183,28)" fg:x="32" fg:w="14"/><text x="2.1368%" y="575.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.06%)</title><rect x="2.7123%" y="565" width="0.0590%" height="15" fill="rgb(221,5,38)" fg:x="46" fg:w="1"/><text x="2.9623%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="2.7712%" y="565" width="0.0590%" height="15" fill="rgb(247,18,42)" fg:x="47" fg:w="1"/><text x="3.0212%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.18%)</title><rect x="2.8302%" y="565" width="0.1769%" height="15" fill="rgb(241,131,45)" fg:x="48" fg:w="3"/><text x="3.0802%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.18%)</title><rect x="2.8302%" y="549" width="0.1769%" height="15" fill="rgb(249,31,29)" fg:x="48" fg:w="3"/><text x="3.0802%" y="559.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.18%)</title><rect x="2.8302%" y="533" width="0.1769%" height="15" fill="rgb(225,111,53)" fg:x="48" fg:w="3"/><text x="3.0802%" y="543.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.18%)</title><rect x="2.8302%" y="517" width="0.1769%" height="15" fill="rgb(238,160,17)" fg:x="48" fg:w="3"/><text x="3.0802%" y="527.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.06%)</title><rect x="3.0071%" y="565" width="0.0590%" height="15" fill="rgb(214,148,48)" fg:x="51" fg:w="1"/><text x="3.2571%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (4 samples, 0.24%)</title><rect x="3.0660%" y="565" width="0.2358%" height="15" fill="rgb(232,36,49)" fg:x="52" fg:w="4"/><text x="3.3160%" y="575.50"></text></g><g><title>[[stack]] (40 samples, 2.36%)</title><rect x="1.0024%" y="581" width="2.3585%" height="15" fill="rgb(209,103,24)" fg:x="17" fg:w="40"/><text x="1.2524%" y="591.50">[..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.06%)</title><rect x="3.3019%" y="565" width="0.0590%" height="15" fill="rgb(229,88,8)" fg:x="56" fg:w="1"/><text x="3.5519%" y="575.50"></text></g><g><title>[anon] (8 samples, 0.47%)</title><rect x="3.3608%" y="581" width="0.4717%" height="15" fill="rgb(213,181,19)" fg:x="57" fg:w="8"/><text x="3.6108%" y="591.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (8 samples, 0.47%)</title><rect x="3.3608%" y="565" width="0.4717%" height="15" fill="rgb(254,191,54)" fg:x="57" fg:w="8"/><text x="3.6108%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (24 samples, 1.42%)</title><rect x="3.8325%" y="565" width="1.4151%" height="15" fill="rgb(241,83,37)" fg:x="65" fg:w="24"/><text x="4.0825%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (10 samples, 0.59%)</title><rect x="4.6580%" y="549" width="0.5896%" height="15" fill="rgb(233,36,39)" fg:x="79" fg:w="10"/><text x="4.9080%" y="559.50"></text></g><g><title>alloc::string::String::push_str (10 samples, 0.59%)</title><rect x="4.6580%" y="533" width="0.5896%" height="15" fill="rgb(226,3,54)" fg:x="79" fg:w="10"/><text x="4.9080%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (10 samples, 0.59%)</title><rect x="4.6580%" y="517" width="0.5896%" height="15" fill="rgb(245,192,40)" fg:x="79" fg:w="10"/><text x="4.9080%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (10 samples, 0.59%)</title><rect x="4.6580%" y="501" width="0.5896%" height="15" fill="rgb(238,167,29)" fg:x="79" fg:w="10"/><text x="4.9080%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (10 samples, 0.59%)</title><rect x="4.6580%" y="485" width="0.5896%" height="15" fill="rgb(232,182,51)" fg:x="79" fg:w="10"/><text x="4.9080%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.59%)</title><rect x="4.6580%" y="469" width="0.5896%" height="15" fill="rgb(231,60,39)" fg:x="79" fg:w="10"/><text x="4.9080%" y="479.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="5.2476%" y="565" width="0.0590%" height="15" fill="rgb(208,69,12)" fg:x="89" fg:w="1"/><text x="5.4976%" y="575.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.06%)</title><rect x="5.3066%" y="565" width="0.0590%" height="15" fill="rgb(235,93,37)" fg:x="90" fg:w="1"/><text x="5.5566%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.06%)</title><rect x="5.3656%" y="565" width="0.0590%" height="15" fill="rgb(213,116,39)" fg:x="91" fg:w="1"/><text x="5.6156%" y="575.50"></text></g><g><title>_int_free (4 samples, 0.24%)</title><rect x="5.4245%" y="565" width="0.2358%" height="15" fill="rgb(222,207,29)" fg:x="92" fg:w="4"/><text x="5.6745%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.12%)</title><rect x="5.6604%" y="565" width="0.1179%" height="15" fill="rgb(206,96,30)" fg:x="96" fg:w="2"/><text x="5.9104%" y="575.50"></text></g><g><title>alloc_perturb (5 samples, 0.29%)</title><rect x="5.7783%" y="565" width="0.2948%" height="15" fill="rgb(218,138,4)" fg:x="98" fg:w="5"/><text x="6.0283%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral (6 samples, 0.35%)</title><rect x="6.0731%" y="565" width="0.3538%" height="15" fill="rgb(250,191,14)" fg:x="103" fg:w="6"/><text x="6.3231%" y="575.50"></text></g><g><title>[groovebin] (45 samples, 2.65%)</title><rect x="3.8325%" y="581" width="2.6533%" height="15" fill="rgb(239,60,40)" fg:x="65" fg:w="45"/><text x="4.0825%" y="591.50">[g..</text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.06%)</title><rect x="6.4269%" y="565" width="0.0590%" height="15" fill="rgb(206,27,48)" fg:x="109" fg:w="1"/><text x="6.6769%" y="575.50"></text></g><g><title>[libc-2.33.so] (1 samples, 0.06%)</title><rect x="6.4858%" y="581" width="0.0590%" height="15" fill="rgb(225,35,8)" fg:x="110" fg:w="1"/><text x="6.7358%" y="591.50"></text></g><g><title>_int_realloc (1 samples, 0.06%)</title><rect x="6.4858%" y="565" width="0.0590%" height="15" fill="rgb(250,213,24)" fg:x="110" fg:w="1"/><text x="6.7358%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (15 samples, 0.88%)</title><rect x="6.5448%" y="565" width="0.8844%" height="15" fill="rgb(247,123,22)" fg:x="111" fg:w="15"/><text x="6.7948%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.06%)</title><rect x="7.3703%" y="549" width="0.0590%" height="15" fill="rgb(231,138,38)" fg:x="125" fg:w="1"/><text x="7.6203%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.06%)</title><rect x="7.3703%" y="533" width="0.0590%" height="15" fill="rgb(231,145,46)" fg:x="125" fg:w="1"/><text x="7.6203%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="7.3703%" y="517" width="0.0590%" height="15" fill="rgb(251,118,11)" fg:x="125" fg:w="1"/><text x="7.6203%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="7.3703%" y="501" width="0.0590%" height="15" fill="rgb(217,147,25)" fg:x="125" fg:w="1"/><text x="7.6203%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="7.3703%" y="485" width="0.0590%" height="15" fill="rgb(247,81,37)" fg:x="125" fg:w="1"/><text x="7.6203%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="7.3703%" y="469" width="0.0590%" height="15" fill="rgb(209,12,38)" fg:x="125" fg:w="1"/><text x="7.6203%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="7.3703%" y="453" width="0.0590%" height="15" fill="rgb(227,1,9)" fg:x="125" fg:w="1"/><text x="7.6203%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.06%)</title><rect x="7.3703%" y="437" width="0.0590%" height="15" fill="rgb(248,47,43)" fg:x="125" fg:w="1"/><text x="7.6203%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="7.3703%" y="421" width="0.0590%" height="15" fill="rgb(221,10,30)" fg:x="125" fg:w="1"/><text x="7.6203%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.06%)</title><rect x="7.3703%" y="405" width="0.0590%" height="15" fill="rgb(210,229,1)" fg:x="125" fg:w="1"/><text x="7.6203%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.06%)</title><rect x="7.3703%" y="389" width="0.0590%" height="15" fill="rgb(222,148,37)" fg:x="125" fg:w="1"/><text x="7.6203%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.06%)</title><rect x="7.3703%" y="373" width="0.0590%" height="15" fill="rgb(234,67,33)" fg:x="125" fg:w="1"/><text x="7.6203%" y="383.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.06%)</title><rect x="7.3703%" y="357" width="0.0590%" height="15" fill="rgb(247,98,35)" fg:x="125" fg:w="1"/><text x="7.6203%" y="367.50"></text></g><g><title>__brk (1 samples, 0.06%)</title><rect x="7.3703%" y="341" width="0.0590%" height="15" fill="rgb(247,138,52)" fg:x="125" fg:w="1"/><text x="7.6203%" y="351.50"></text></g><g><title>error_entry (1 samples, 0.06%)</title><rect x="7.3703%" y="325" width="0.0590%" height="15" fill="rgb(213,79,30)" fg:x="125" fg:w="1"/><text x="7.6203%" y="335.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="7.4292%" y="565" width="0.0590%" height="15" fill="rgb(246,177,23)" fg:x="126" fg:w="1"/><text x="7.6792%" y="575.50"></text></g><g><title>__GI___libc_free (4 samples, 0.24%)</title><rect x="7.4882%" y="565" width="0.2358%" height="15" fill="rgb(230,62,27)" fg:x="127" fg:w="4"/><text x="7.7382%" y="575.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.06%)</title><rect x="7.7241%" y="565" width="0.0590%" height="15" fill="rgb(216,154,8)" fg:x="131" fg:w="1"/><text x="7.9741%" y="575.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.12%)</title><rect x="7.7830%" y="565" width="0.1179%" height="15" fill="rgb(244,35,45)" fg:x="132" fg:w="2"/><text x="8.0330%" y="575.50"></text></g><g><title>__libc_start_main (13 samples, 0.77%)</title><rect x="7.9009%" y="565" width="0.7665%" height="15" fill="rgb(251,115,12)" fg:x="134" fg:w="13"/><text x="8.1509%" y="575.50"></text></g><g><title>[libpthread-2.33.so] (13 samples, 0.77%)</title><rect x="7.9009%" y="549" width="0.7665%" height="15" fill="rgb(240,54,50)" fg:x="134" fg:w="13"/><text x="8.1509%" y="559.50"></text></g><g><title>groovebin::file::File::add_index (13 samples, 0.77%)</title><rect x="7.9009%" y="533" width="0.7665%" height="15" fill="rgb(233,84,52)" fg:x="134" fg:w="13"/><text x="8.1509%" y="543.50"></text></g><g><title>__rdl_realloc (4 samples, 0.24%)</title><rect x="8.6675%" y="565" width="0.2358%" height="15" fill="rgb(207,117,47)" fg:x="147" fg:w="4"/><text x="8.9175%" y="575.50"></text></g><g><title>_int_free (10 samples, 0.59%)</title><rect x="8.9033%" y="565" width="0.5896%" height="15" fill="rgb(249,43,39)" fg:x="151" fg:w="10"/><text x="9.1533%" y="575.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.12%)</title><rect x="9.6698%" y="549" width="0.1179%" height="15" fill="rgb(209,38,44)" fg:x="164" fg:w="2"/><text x="9.9198%" y="559.50"></text></g><g><title>_int_malloc (8 samples, 0.47%)</title><rect x="9.4929%" y="565" width="0.4717%" height="15" fill="rgb(236,212,23)" fg:x="161" fg:w="8"/><text x="9.7429%" y="575.50"></text></g><g><title>error_entry (3 samples, 0.18%)</title><rect x="9.7877%" y="549" width="0.1769%" height="15" fill="rgb(242,79,21)" fg:x="166" fg:w="3"/><text x="10.0377%" y="559.50"></text></g><g><title>sync_regs (1 samples, 0.06%)</title><rect x="9.9057%" y="533" width="0.0590%" height="15" fill="rgb(211,96,35)" fg:x="168" fg:w="1"/><text x="10.1557%" y="543.50"></text></g><g><title>_int_realloc (5 samples, 0.29%)</title><rect x="9.9646%" y="565" width="0.2948%" height="15" fill="rgb(253,215,40)" fg:x="169" fg:w="5"/><text x="10.2146%" y="575.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.18%)</title><rect x="10.2594%" y="565" width="0.1769%" height="15" fill="rgb(211,81,21)" fg:x="174" fg:w="3"/><text x="10.5094%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.18%)</title><rect x="10.4363%" y="565" width="0.1769%" height="15" fill="rgb(208,190,38)" fg:x="177" fg:w="3"/><text x="10.6863%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.18%)</title><rect x="10.4363%" y="549" width="0.1769%" height="15" fill="rgb(235,213,38)" fg:x="177" fg:w="3"/><text x="10.6863%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="10.6132%" y="565" width="0.1179%" height="15" fill="rgb(237,122,38)" fg:x="180" fg:w="2"/><text x="10.8632%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral (12 samples, 0.71%)</title><rect x="10.7311%" y="565" width="0.7075%" height="15" fill="rgb(244,218,35)" fg:x="182" fg:w="12"/><text x="10.9811%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.12%)</title><rect x="11.4387%" y="565" width="0.1179%" height="15" fill="rgb(240,68,47)" fg:x="194" fg:w="2"/><text x="11.6887%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (2 samples, 0.12%)</title><rect x="11.5566%" y="565" width="0.1179%" height="15" fill="rgb(210,16,53)" fg:x="196" fg:w="2"/><text x="11.8066%" y="575.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.12%)</title><rect x="11.5566%" y="549" width="0.1179%" height="15" fill="rgb(235,124,12)" fg:x="196" fg:w="2"/><text x="11.8066%" y="559.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (3 samples, 0.18%)</title><rect x="11.6745%" y="565" width="0.1769%" height="15" fill="rgb(224,169,11)" fg:x="198" fg:w="3"/><text x="11.9245%" y="575.50"></text></g><g><title>core::fmt::write (24 samples, 1.42%)</title><rect x="11.8514%" y="565" width="1.4151%" height="15" fill="rgb(250,166,2)" fg:x="201" fg:w="24"/><text x="12.1014%" y="575.50"></text></g><g><title>[unknown] (116 samples, 6.84%)</title><rect x="6.5448%" y="581" width="6.8396%" height="15" fill="rgb(242,216,29)" fg:x="111" fg:w="116"/><text x="6.7948%" y="591.50">[unknown]</text></g><g><title>core::ptr::drop_in_place&lt;groovebin::file::File&gt; (2 samples, 0.12%)</title><rect x="13.2665%" y="565" width="0.1179%" height="15" fill="rgb(230,116,27)" fg:x="225" fg:w="2"/><text x="13.5165%" y="575.50"></text></g><g><title>__GI___libc_free (117 samples, 6.90%)</title><rect x="14.6816%" y="373" width="6.8986%" height="15" fill="rgb(228,99,48)" fg:x="249" fg:w="117"/><text x="14.9316%" y="383.50">__GI___li..</text></g><g><title>_int_free (37 samples, 2.18%)</title><rect x="19.3986%" y="357" width="2.1816%" height="15" fill="rgb(253,11,6)" fg:x="329" fg:w="37"/><text x="19.6486%" y="367.50">_..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 7.19%)</title><rect x="14.4458%" y="389" width="7.1934%" height="15" fill="rgb(247,143,39)" fg:x="245" fg:w="122"/><text x="14.6958%" y="399.50">&lt;hashbrown..</text></g><g><title>__rust_dealloc (1 samples, 0.06%)</title><rect x="21.5802%" y="373" width="0.0590%" height="15" fill="rgb(236,97,10)" fg:x="366" fg:w="1"/><text x="21.8302%" y="383.50"></text></g><g><title>[groovebin] (1 samples, 0.06%)</title><rect x="23.7618%" y="373" width="0.0590%" height="15" fill="rgb(233,208,19)" fg:x="403" fg:w="1"/><text x="24.0118%" y="383.50"></text></g><g><title>_int_free (1 samples, 0.06%)</title><rect x="23.7618%" y="357" width="0.0590%" height="15" fill="rgb(216,164,2)" fg:x="403" fg:w="1"/><text x="24.0118%" y="367.50"></text></g><g><title>tlb_finish_mmu (2 samples, 0.12%)</title><rect x="23.8208%" y="261" width="0.1179%" height="15" fill="rgb(220,129,5)" fg:x="404" fg:w="2"/><text x="24.0708%" y="271.50"></text></g><g><title>release_pages (2 samples, 0.12%)</title><rect x="23.8208%" y="245" width="0.1179%" height="15" fill="rgb(242,17,10)" fg:x="404" fg:w="2"/><text x="24.0708%" y="255.50"></text></g><g><title>free_unref_page_list (1 samples, 0.06%)</title><rect x="23.8797%" y="229" width="0.0590%" height="15" fill="rgb(242,107,0)" fg:x="405" fg:w="1"/><text x="24.1297%" y="239.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.06%)</title><rect x="23.8797%" y="213" width="0.0590%" height="15" fill="rgb(251,28,31)" fg:x="405" fg:w="1"/><text x="24.1297%" y="223.50"></text></g><g><title>__free_one_page (1 samples, 0.06%)</title><rect x="23.8797%" y="197" width="0.0590%" height="15" fill="rgb(233,223,10)" fg:x="405" fg:w="1"/><text x="24.1297%" y="207.50"></text></g><g><title>page_remove_rmap (2 samples, 0.12%)</title><rect x="23.9976%" y="229" width="0.1179%" height="15" fill="rgb(215,21,27)" fg:x="407" fg:w="2"/><text x="24.2476%" y="239.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.06%)</title><rect x="24.0566%" y="213" width="0.0590%" height="15" fill="rgb(232,23,21)" fg:x="408" fg:w="1"/><text x="24.3066%" y="223.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.06%)</title><rect x="24.0566%" y="197" width="0.0590%" height="15" fill="rgb(244,5,23)" fg:x="408" fg:w="1"/><text x="24.3066%" y="207.50"></text></g><g><title>__mod_memcg_state.part.0 (1 samples, 0.06%)</title><rect x="24.0566%" y="181" width="0.0590%" height="15" fill="rgb(226,81,46)" fg:x="408" fg:w="1"/><text x="24.3066%" y="191.50"></text></g><g><title>__GI_munmap (6 samples, 0.35%)</title><rect x="23.8208%" y="373" width="0.3538%" height="15" fill="rgb(247,70,30)" fg:x="404" fg:w="6"/><text x="24.0708%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.35%)</title><rect x="23.8208%" y="357" width="0.3538%" height="15" fill="rgb(212,68,19)" fg:x="404" fg:w="6"/><text x="24.0708%" y="367.50"></text></g><g><title>do_syscall_64 (6 samples, 0.35%)</title><rect x="23.8208%" y="341" width="0.3538%" height="15" fill="rgb(240,187,13)" fg:x="404" fg:w="6"/><text x="24.0708%" y="351.50"></text></g><g><title>__x64_sys_munmap (6 samples, 0.35%)</title><rect x="23.8208%" y="325" width="0.3538%" height="15" fill="rgb(223,113,26)" fg:x="404" fg:w="6"/><text x="24.0708%" y="335.50"></text></g><g><title>__vm_munmap (6 samples, 0.35%)</title><rect x="23.8208%" y="309" width="0.3538%" height="15" fill="rgb(206,192,2)" fg:x="404" fg:w="6"/><text x="24.0708%" y="319.50"></text></g><g><title>__do_munmap (6 samples, 0.35%)</title><rect x="23.8208%" y="293" width="0.3538%" height="15" fill="rgb(241,108,4)" fg:x="404" fg:w="6"/><text x="24.0708%" y="303.50"></text></g><g><title>unmap_region (6 samples, 0.35%)</title><rect x="23.8208%" y="277" width="0.3538%" height="15" fill="rgb(247,173,49)" fg:x="404" fg:w="6"/><text x="24.0708%" y="287.50"></text></g><g><title>unmap_vmas (4 samples, 0.24%)</title><rect x="23.9387%" y="261" width="0.2358%" height="15" fill="rgb(224,114,35)" fg:x="406" fg:w="4"/><text x="24.1887%" y="271.50"></text></g><g><title>unmap_page_range (4 samples, 0.24%)</title><rect x="23.9387%" y="245" width="0.2358%" height="15" fill="rgb(245,159,27)" fg:x="406" fg:w="4"/><text x="24.1887%" y="255.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.06%)</title><rect x="24.1156%" y="229" width="0.0590%" height="15" fill="rgb(245,172,44)" fg:x="409" fg:w="1"/><text x="24.3656%" y="239.50"></text></g><g><title>release_pages (1 samples, 0.06%)</title><rect x="24.1156%" y="213" width="0.0590%" height="15" fill="rgb(236,23,11)" fg:x="409" fg:w="1"/><text x="24.3656%" y="223.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.06%)</title><rect x="24.1156%" y="197" width="0.0590%" height="15" fill="rgb(205,117,38)" fg:x="409" fg:w="1"/><text x="24.3656%" y="207.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.06%)</title><rect x="24.1156%" y="181" width="0.0590%" height="15" fill="rgb(237,72,25)" fg:x="409" fg:w="1"/><text x="24.3656%" y="191.50"></text></g><g><title>__GI___libc_free (115 samples, 6.78%)</title><rect x="21.6392%" y="389" width="6.7807%" height="15" fill="rgb(244,70,9)" fg:x="367" fg:w="115"/><text x="21.8892%" y="399.50">__GI___li..</text></g><g><title>_int_free (72 samples, 4.25%)</title><rect x="24.1745%" y="373" width="4.2453%" height="15" fill="rgb(217,125,39)" fg:x="410" fg:w="72"/><text x="24.4245%" y="383.50">_int_..</text></g><g><title>__rdl_dealloc (4 samples, 0.24%)</title><rect x="28.4198%" y="389" width="0.2358%" height="15" fill="rgb(235,36,10)" fg:x="482" fg:w="4"/><text x="28.6698%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.24%)</title><rect x="28.4198%" y="373" width="0.2358%" height="15" fill="rgb(251,123,47)" fg:x="482" fg:w="4"/><text x="28.6698%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;groovebin::file::File&gt; (260 samples, 15.33%)</title><rect x="13.3844%" y="405" width="15.3302%" height="15" fill="rgb(221,13,13)" fg:x="227" fg:w="260"/><text x="13.6344%" y="415.50">core::ptr::drop_in_plac..</text></g><g><title>__rust_dealloc (1 samples, 0.06%)</title><rect x="28.6557%" y="389" width="0.0590%" height="15" fill="rgb(238,131,9)" fg:x="486" fg:w="1"/><text x="28.9057%" y="399.50"></text></g><g><title>down_read_trylock (2 samples, 0.12%)</title><rect x="31.8986%" y="277" width="0.1179%" height="15" fill="rgb(211,50,8)" fg:x="541" fg:w="2"/><text x="32.1486%" y="287.50"></text></g><g><title>kernel_init_free_pages (11 samples, 0.65%)</title><rect x="32.3113%" y="197" width="0.6486%" height="15" fill="rgb(245,182,24)" fg:x="548" fg:w="11"/><text x="32.5613%" y="207.50"></text></g><g><title>clear_page_erms (11 samples, 0.65%)</title><rect x="32.3113%" y="181" width="0.6486%" height="15" fill="rgb(242,14,37)" fg:x="548" fg:w="11"/><text x="32.5613%" y="191.50"></text></g><g><title>alloc_pages_vma (17 samples, 1.00%)</title><rect x="32.0165%" y="245" width="1.0024%" height="15" fill="rgb(246,228,12)" fg:x="543" fg:w="17"/><text x="32.2665%" y="255.50"></text></g><g><title>__alloc_pages (15 samples, 0.88%)</title><rect x="32.1344%" y="229" width="0.8844%" height="15" fill="rgb(213,55,15)" fg:x="545" fg:w="15"/><text x="32.3844%" y="239.50"></text></g><g><title>get_page_from_freelist (12 samples, 0.71%)</title><rect x="32.3113%" y="213" width="0.7075%" height="15" fill="rgb(209,9,3)" fg:x="548" fg:w="12"/><text x="32.5613%" y="223.50"></text></g><g><title>rmqueue_bulk.constprop.0 (1 samples, 0.06%)</title><rect x="32.9599%" y="197" width="0.0590%" height="15" fill="rgb(230,59,30)" fg:x="559" fg:w="1"/><text x="33.2099%" y="207.50"></text></g><g><title>cgroup_throttle_swaprate (1 samples, 0.06%)</title><rect x="33.0189%" y="245" width="0.0590%" height="15" fill="rgb(209,121,21)" fg:x="560" fg:w="1"/><text x="33.2689%" y="255.50"></text></g><g><title>lru_cache_add (7 samples, 0.41%)</title><rect x="33.0778%" y="245" width="0.4127%" height="15" fill="rgb(220,109,13)" fg:x="561" fg:w="7"/><text x="33.3278%" y="255.50"></text></g><g><title>__pagevec_lru_add (6 samples, 0.35%)</title><rect x="33.1368%" y="229" width="0.3538%" height="15" fill="rgb(232,18,1)" fg:x="562" fg:w="6"/><text x="33.3868%" y="239.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (1 samples, 0.06%)</title><rect x="33.6085%" y="213" width="0.0590%" height="15" fill="rgb(215,41,42)" fg:x="570" fg:w="1"/><text x="33.8585%" y="223.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.06%)</title><rect x="33.6085%" y="197" width="0.0590%" height="15" fill="rgb(224,123,36)" fg:x="570" fg:w="1"/><text x="33.8585%" y="207.50"></text></g><g><title>__mem_cgroup_charge (7 samples, 0.41%)</title><rect x="33.5495%" y="229" width="0.4127%" height="15" fill="rgb(240,125,3)" fg:x="569" fg:w="7"/><text x="33.7995%" y="239.50"></text></g><g><title>try_charge (5 samples, 0.29%)</title><rect x="33.6675%" y="213" width="0.2948%" height="15" fill="rgb(205,98,50)" fg:x="571" fg:w="5"/><text x="33.9175%" y="223.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.06%)</title><rect x="33.9033%" y="197" width="0.0590%" height="15" fill="rgb(205,185,37)" fg:x="575" fg:w="1"/><text x="34.1533%" y="207.50"></text></g><g><title>mem_cgroup_charge (9 samples, 0.53%)</title><rect x="33.4906%" y="245" width="0.5307%" height="15" fill="rgb(238,207,15)" fg:x="568" fg:w="9"/><text x="33.7406%" y="255.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.06%)</title><rect x="33.9623%" y="229" width="0.0590%" height="15" fill="rgb(213,199,42)" fg:x="576" fg:w="1"/><text x="34.2123%" y="239.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.06%)</title><rect x="33.9623%" y="213" width="0.0590%" height="15" fill="rgb(235,201,11)" fg:x="576" fg:w="1"/><text x="34.2123%" y="223.50"></text></g><g><title>page_add_new_anon_rmap (2 samples, 0.12%)</title><rect x="34.0212%" y="245" width="0.1179%" height="15" fill="rgb(207,46,11)" fg:x="577" fg:w="2"/><text x="34.2712%" y="255.50"></text></g><g><title>__mod_lruvec_page_state (2 samples, 0.12%)</title><rect x="34.0212%" y="229" width="0.1179%" height="15" fill="rgb(241,35,35)" fg:x="577" fg:w="2"/><text x="34.2712%" y="239.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.06%)</title><rect x="34.0802%" y="213" width="0.0590%" height="15" fill="rgb(243,32,47)" fg:x="578" fg:w="1"/><text x="34.3302%" y="223.50"></text></g><g><title>pfn_pte (1 samples, 0.06%)</title><rect x="34.1392%" y="245" width="0.0590%" height="15" fill="rgb(247,202,23)" fg:x="579" fg:w="1"/><text x="34.3892%" y="255.50"></text></g><g><title>handle_mm_fault (38 samples, 2.24%)</title><rect x="32.0165%" y="277" width="2.2406%" height="15" fill="rgb(219,102,11)" fg:x="543" fg:w="38"/><text x="32.2665%" y="287.50">h..</text></g><g><title>__handle_mm_fault (38 samples, 2.24%)</title><rect x="32.0165%" y="261" width="2.2406%" height="15" fill="rgb(243,110,44)" fg:x="543" fg:w="38"/><text x="32.2665%" y="271.50">_..</text></g><g><title>pud_val (1 samples, 0.06%)</title><rect x="34.1981%" y="245" width="0.0590%" height="15" fill="rgb(222,74,54)" fg:x="580" fg:w="1"/><text x="34.4481%" y="255.50"></text></g><g><title>exc_page_fault (41 samples, 2.42%)</title><rect x="31.8986%" y="309" width="2.4175%" height="15" fill="rgb(216,99,12)" fg:x="541" fg:w="41"/><text x="32.1486%" y="319.50">ex..</text></g><g><title>do_user_addr_fault (41 samples, 2.42%)</title><rect x="31.8986%" y="293" width="2.4175%" height="15" fill="rgb(226,22,26)" fg:x="541" fg:w="41"/><text x="32.1486%" y="303.50">do..</text></g><g><title>up_read (1 samples, 0.06%)</title><rect x="34.2571%" y="277" width="0.0590%" height="15" fill="rgb(217,163,10)" fg:x="581" fg:w="1"/><text x="34.5071%" y="287.50"></text></g><g><title>asm_exc_page_fault (52 samples, 3.07%)</title><rect x="31.8396%" y="325" width="3.0660%" height="15" fill="rgb(213,25,53)" fg:x="540" fg:w="52"/><text x="32.0896%" y="335.50">asm..</text></g><g><title>irqentry_exit_to_user_mode (10 samples, 0.59%)</title><rect x="34.3160%" y="309" width="0.5896%" height="15" fill="rgb(252,105,26)" fg:x="582" fg:w="10"/><text x="34.5660%" y="319.50"></text></g><g><title>error_entry (5 samples, 0.29%)</title><rect x="34.9057%" y="325" width="0.2948%" height="15" fill="rgb(220,39,43)" fg:x="592" fg:w="5"/><text x="35.1557%" y="335.50"></text></g><g><title>sync_regs (3 samples, 0.18%)</title><rect x="35.0236%" y="309" width="0.1769%" height="15" fill="rgb(229,68,48)" fg:x="594" fg:w="3"/><text x="35.2736%" y="319.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.06%)</title><rect x="35.2005%" y="325" width="0.0590%" height="15" fill="rgb(252,8,32)" fg:x="597" fg:w="1"/><text x="35.4505%" y="335.50"></text></g><g><title>exc_page_fault (1 samples, 0.06%)</title><rect x="35.2594%" y="293" width="0.0590%" height="15" fill="rgb(223,20,43)" fg:x="598" fg:w="1"/><text x="35.5094%" y="303.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.06%)</title><rect x="35.2594%" y="277" width="0.0590%" height="15" fill="rgb(229,81,49)" fg:x="598" fg:w="1"/><text x="35.5094%" y="287.50"></text></g><g><title>handle_mm_fault (1 samples, 0.06%)</title><rect x="35.2594%" y="261" width="0.0590%" height="15" fill="rgb(236,28,36)" fg:x="598" fg:w="1"/><text x="35.5094%" y="271.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.06%)</title><rect x="35.2594%" y="245" width="0.0590%" height="15" fill="rgb(249,185,26)" fg:x="598" fg:w="1"/><text x="35.5094%" y="255.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.06%)</title><rect x="35.2594%" y="229" width="0.0590%" height="15" fill="rgb(249,174,33)" fg:x="598" fg:w="1"/><text x="35.5094%" y="239.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.06%)</title><rect x="35.2594%" y="213" width="0.0590%" height="15" fill="rgb(233,201,37)" fg:x="598" fg:w="1"/><text x="35.5094%" y="223.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.06%)</title><rect x="35.2594%" y="197" width="0.0590%" height="15" fill="rgb(221,78,26)" fg:x="598" fg:w="1"/><text x="35.5094%" y="207.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.06%)</title><rect x="35.2594%" y="181" width="0.0590%" height="15" fill="rgb(250,127,30)" fg:x="598" fg:w="1"/><text x="35.5094%" y="191.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.12%)</title><rect x="35.2594%" y="309" width="0.1179%" height="15" fill="rgb(230,49,44)" fg:x="598" fg:w="2"/><text x="35.5094%" y="319.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.06%)</title><rect x="35.3184%" y="293" width="0.0590%" height="15" fill="rgb(229,67,23)" fg:x="599" fg:w="1"/><text x="35.5684%" y="303.50"></text></g><g><title>__GI___libc_malloc (80 samples, 4.72%)</title><rect x="30.7193%" y="357" width="4.7170%" height="15" fill="rgb(249,83,47)" fg:x="521" fg:w="80"/><text x="30.9693%" y="367.50">__GI_..</text></g><g><title>_int_malloc (77 samples, 4.54%)</title><rect x="30.8962%" y="341" width="4.5401%" height="15" fill="rgb(215,43,3)" fg:x="524" fg:w="77"/><text x="31.1462%" y="351.50">_int_..</text></g><g><title>sysmalloc (3 samples, 0.18%)</title><rect x="35.2594%" y="325" width="0.1769%" height="15" fill="rgb(238,154,13)" fg:x="598" fg:w="3"/><text x="35.5094%" y="335.50"></text></g><g><title>error_entry (1 samples, 0.06%)</title><rect x="35.3774%" y="309" width="0.0590%" height="15" fill="rgb(219,56,2)" fg:x="600" fg:w="1"/><text x="35.6274%" y="319.50"></text></g><g><title>sync_regs (1 samples, 0.06%)</title><rect x="35.3774%" y="293" width="0.0590%" height="15" fill="rgb(233,0,4)" fg:x="600" fg:w="1"/><text x="35.6274%" y="303.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.12%)</title><rect x="35.6722%" y="341" width="0.1179%" height="15" fill="rgb(235,30,7)" fg:x="605" fg:w="2"/><text x="35.9222%" y="351.50"></text></g><g><title>__inc_numa_state (1 samples, 0.06%)</title><rect x="43.2783%" y="53" width="0.0590%" height="15" fill="rgb(250,79,13)" fg:x="734" fg:w="1"/><text x="43.5283%" y="63.50"></text></g><g><title>__list_del_entry_valid (2 samples, 0.12%)</title><rect x="43.3373%" y="53" width="0.1179%" height="15" fill="rgb(211,146,34)" fg:x="735" fg:w="2"/><text x="43.5873%" y="63.50"></text></g><g><title>kernel_init_free_pages (15 samples, 0.88%)</title><rect x="43.4552%" y="53" width="0.8844%" height="15" fill="rgb(228,22,38)" fg:x="737" fg:w="15"/><text x="43.7052%" y="63.50"></text></g><g><title>clear_page_erms (15 samples, 0.88%)</title><rect x="43.4552%" y="37" width="0.8844%" height="15" fill="rgb(235,168,5)" fg:x="737" fg:w="15"/><text x="43.7052%" y="47.50"></text></g><g><title>get_page_from_freelist (25 samples, 1.47%)</title><rect x="43.2193%" y="69" width="1.4741%" height="15" fill="rgb(221,155,16)" fg:x="733" fg:w="25"/><text x="43.4693%" y="79.50"></text></g><g><title>rmqueue_bulk.constprop.0 (6 samples, 0.35%)</title><rect x="44.3396%" y="53" width="0.3538%" height="15" fill="rgb(215,215,53)" fg:x="752" fg:w="6"/><text x="44.5896%" y="63.50"></text></g><g><title>__list_del_entry_valid (2 samples, 0.12%)</title><rect x="44.5755%" y="37" width="0.1179%" height="15" fill="rgb(223,4,10)" fg:x="756" fg:w="2"/><text x="44.8255%" y="47.50"></text></g><g><title>__alloc_pages (26 samples, 1.53%)</title><rect x="43.2193%" y="85" width="1.5330%" height="15" fill="rgb(234,103,6)" fg:x="733" fg:w="26"/><text x="43.4693%" y="95.50"></text></g><g><title>prepare_alloc_pages.constprop.0 (1 samples, 0.06%)</title><rect x="44.6934%" y="69" width="0.0590%" height="15" fill="rgb(227,97,0)" fg:x="758" fg:w="1"/><text x="44.9434%" y="79.50"></text></g><g><title>alloc_pages_vma (28 samples, 1.65%)</title><rect x="43.1604%" y="101" width="1.6509%" height="15" fill="rgb(234,150,53)" fg:x="732" fg:w="28"/><text x="43.4104%" y="111.50"></text></g><g><title>policy_node (1 samples, 0.06%)</title><rect x="44.7524%" y="85" width="0.0590%" height="15" fill="rgb(228,201,54)" fg:x="759" fg:w="1"/><text x="45.0024%" y="95.50"></text></g><g><title>cgroup_throttle_swaprate (1 samples, 0.06%)</title><rect x="44.8113%" y="101" width="0.0590%" height="15" fill="rgb(222,22,37)" fg:x="760" fg:w="1"/><text x="45.0613%" y="111.50"></text></g><g><title>lru_cache_add (2 samples, 0.12%)</title><rect x="44.8703%" y="101" width="0.1179%" height="15" fill="rgb(237,53,32)" fg:x="761" fg:w="2"/><text x="45.1203%" y="111.50"></text></g><g><title>__pagevec_lru_add (2 samples, 0.12%)</title><rect x="44.8703%" y="85" width="0.1179%" height="15" fill="rgb(233,25,53)" fg:x="761" fg:w="2"/><text x="45.1203%" y="95.50"></text></g><g><title>release_pages (1 samples, 0.06%)</title><rect x="44.9292%" y="69" width="0.0590%" height="15" fill="rgb(210,40,34)" fg:x="762" fg:w="1"/><text x="45.1792%" y="79.50"></text></g><g><title>mem_cgroup_charge (6 samples, 0.35%)</title><rect x="44.9882%" y="101" width="0.3538%" height="15" fill="rgb(241,220,44)" fg:x="763" fg:w="6"/><text x="45.2382%" y="111.50"></text></g><g><title>__mem_cgroup_charge (6 samples, 0.35%)</title><rect x="44.9882%" y="85" width="0.3538%" height="15" fill="rgb(235,28,35)" fg:x="763" fg:w="6"/><text x="45.2382%" y="95.50"></text></g><g><title>mem_cgroup_charge_statistics.constprop.0 (6 samples, 0.35%)</title><rect x="44.9882%" y="69" width="0.3538%" height="15" fill="rgb(210,56,17)" fg:x="763" fg:w="6"/><text x="45.2382%" y="79.50"></text></g><g><title>cgroup_rstat_updated (4 samples, 0.24%)</title><rect x="45.1061%" y="53" width="0.2358%" height="15" fill="rgb(224,130,29)" fg:x="765" fg:w="4"/><text x="45.3561%" y="63.50"></text></g><g><title>page_add_new_anon_rmap (4 samples, 0.24%)</title><rect x="45.3420%" y="101" width="0.2358%" height="15" fill="rgb(235,212,8)" fg:x="769" fg:w="4"/><text x="45.5920%" y="111.50"></text></g><g><title>__mod_lruvec_page_state (4 samples, 0.24%)</title><rect x="45.3420%" y="85" width="0.2358%" height="15" fill="rgb(223,33,50)" fg:x="769" fg:w="4"/><text x="45.5920%" y="95.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.12%)</title><rect x="45.4599%" y="69" width="0.1179%" height="15" fill="rgb(219,149,13)" fg:x="771" fg:w="2"/><text x="45.7099%" y="79.50"></text></g><g><title>handle_mm_fault (45 samples, 2.65%)</title><rect x="42.9835%" y="133" width="2.6533%" height="15" fill="rgb(250,156,29)" fg:x="729" fg:w="45"/><text x="43.2335%" y="143.50">ha..</text></g><g><title>__handle_mm_fault (44 samples, 2.59%)</title><rect x="43.0425%" y="117" width="2.5943%" height="15" fill="rgb(216,193,19)" fg:x="730" fg:w="44"/><text x="43.2925%" y="127.50">__..</text></g><g><title>pmd_val (1 samples, 0.06%)</title><rect x="45.5778%" y="101" width="0.0590%" height="15" fill="rgb(216,135,14)" fg:x="773" fg:w="1"/><text x="45.8278%" y="111.50"></text></g><g><title>exc_page_fault (49 samples, 2.89%)</title><rect x="42.8066%" y="165" width="2.8892%" height="15" fill="rgb(241,47,5)" fg:x="726" fg:w="49"/><text x="43.0566%" y="175.50">ex..</text></g><g><title>do_user_addr_fault (48 samples, 2.83%)</title><rect x="42.8656%" y="149" width="2.8302%" height="15" fill="rgb(233,42,35)" fg:x="727" fg:w="48"/><text x="43.1156%" y="159.50">do..</text></g><g><title>up_read (1 samples, 0.06%)</title><rect x="45.6368%" y="133" width="0.0590%" height="15" fill="rgb(231,13,6)" fg:x="774" fg:w="1"/><text x="45.8868%" y="143.50"></text></g><g><title>asm_exc_page_fault (61 samples, 3.60%)</title><rect x="42.8066%" y="181" width="3.5967%" height="15" fill="rgb(207,181,40)" fg:x="726" fg:w="61"/><text x="43.0566%" y="191.50">asm_..</text></g><g><title>irqentry_exit_to_user_mode (12 samples, 0.71%)</title><rect x="45.6958%" y="165" width="0.7075%" height="15" fill="rgb(254,173,49)" fg:x="775" fg:w="12"/><text x="45.9458%" y="175.50"></text></g><g><title>error_entry (8 samples, 0.47%)</title><rect x="46.4033%" y="181" width="0.4717%" height="15" fill="rgb(221,1,38)" fg:x="787" fg:w="8"/><text x="46.6533%" y="191.50"></text></g><g><title>sync_regs (4 samples, 0.24%)</title><rect x="46.6392%" y="165" width="0.2358%" height="15" fill="rgb(206,124,46)" fg:x="791" fg:w="4"/><text x="46.8892%" y="175.50"></text></g><g><title>error_return (1 samples, 0.06%)</title><rect x="46.8750%" y="181" width="0.0590%" height="15" fill="rgb(249,21,11)" fg:x="795" fg:w="1"/><text x="47.1250%" y="191.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.35%)</title><rect x="46.9340%" y="181" width="0.3538%" height="15" fill="rgb(222,201,40)" fg:x="796" fg:w="6"/><text x="47.1840%" y="191.50"></text></g><g><title>__GI___libc_malloc (187 samples, 11.03%)</title><rect x="36.3208%" y="213" width="11.0259%" height="15" fill="rgb(235,61,29)" fg:x="616" fg:w="187"/><text x="36.5708%" y="223.50">__GI___libc_mall..</text></g><g><title>_int_malloc (156 samples, 9.20%)</title><rect x="38.1486%" y="197" width="9.1981%" height="15" fill="rgb(219,207,3)" fg:x="647" fg:w="156"/><text x="38.3986%" y="207.50">_int_malloc</text></g><g><title>sysmalloc (1 samples, 0.06%)</title><rect x="47.2877%" y="181" width="0.0590%" height="15" fill="rgb(222,56,46)" fg:x="802" fg:w="1"/><text x="47.5377%" y="191.50"></text></g><g><title>__GI___default_morecore (1 samples, 0.06%)</title><rect x="47.2877%" y="165" width="0.0590%" height="15" fill="rgb(239,76,54)" fg:x="802" fg:w="1"/><text x="47.5377%" y="175.50"></text></g><g><title>__GI___sbrk (1 samples, 0.06%)</title><rect x="47.2877%" y="149" width="0.0590%" height="15" fill="rgb(231,124,27)" fg:x="802" fg:w="1"/><text x="47.5377%" y="159.50"></text></g><g><title>__brk (1 samples, 0.06%)</title><rect x="47.2877%" y="133" width="0.0590%" height="15" fill="rgb(249,195,6)" fg:x="802" fg:w="1"/><text x="47.5377%" y="143.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="47.2877%" y="117" width="0.0590%" height="15" fill="rgb(237,174,47)" fg:x="802" fg:w="1"/><text x="47.5377%" y="127.50"></text></g><g><title>do_syscall_64 (1 samples, 0.06%)</title><rect x="47.2877%" y="101" width="0.0590%" height="15" fill="rgb(206,201,31)" fg:x="802" fg:w="1"/><text x="47.5377%" y="111.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.06%)</title><rect x="47.2877%" y="85" width="0.0590%" height="15" fill="rgb(231,57,52)" fg:x="802" fg:w="1"/><text x="47.5377%" y="95.50"></text></g><g><title>__rdl_alloc (6 samples, 0.35%)</title><rect x="47.3467%" y="213" width="0.3538%" height="15" fill="rgb(248,177,22)" fg:x="803" fg:w="6"/><text x="47.5967%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.35%)</title><rect x="47.3467%" y="197" width="0.3538%" height="15" fill="rgb(215,211,37)" fg:x="803" fg:w="6"/><text x="47.5967%" y="207.50"></text></g><g><title>alloc::string::String::with_capacity (205 samples, 12.09%)</title><rect x="35.7901%" y="341" width="12.0873%" height="15" fill="rgb(241,128,51)" fg:x="607" fg:w="205"/><text x="36.0401%" y="351.50">alloc::string::Str..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (199 samples, 11.73%)</title><rect x="36.1439%" y="325" width="11.7335%" height="15" fill="rgb(227,165,31)" fg:x="613" fg:w="199"/><text x="36.3939%" y="335.50">alloc::vec::Vec&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (199 samples, 11.73%)</title><rect x="36.1439%" y="309" width="11.7335%" height="15" fill="rgb(228,167,24)" fg:x="613" fg:w="199"/><text x="36.3939%" y="319.50">alloc::vec::Vec&lt;T..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (199 samples, 11.73%)</title><rect x="36.1439%" y="293" width="11.7335%" height="15" fill="rgb(228,143,12)" fg:x="613" fg:w="199"/><text x="36.3939%" y="303.50">alloc::raw_vec::R..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (199 samples, 11.73%)</title><rect x="36.1439%" y="277" width="11.7335%" height="15" fill="rgb(249,149,8)" fg:x="613" fg:w="199"/><text x="36.3939%" y="287.50">alloc::raw_vec::R..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (198 samples, 11.67%)</title><rect x="36.2028%" y="261" width="11.6745%" height="15" fill="rgb(243,35,44)" fg:x="614" fg:w="198"/><text x="36.4528%" y="271.50">&lt;alloc::alloc::Gl..</text></g><g><title>alloc::alloc::Global::alloc_impl (198 samples, 11.67%)</title><rect x="36.2028%" y="245" width="11.6745%" height="15" fill="rgb(246,89,9)" fg:x="614" fg:w="198"/><text x="36.4528%" y="255.50">alloc::alloc::Glo..</text></g><g><title>alloc::alloc::alloc (198 samples, 11.67%)</title><rect x="36.2028%" y="229" width="11.6745%" height="15" fill="rgb(233,213,13)" fg:x="614" fg:w="198"/><text x="36.4528%" y="239.50">alloc::alloc::all..</text></g><g><title>__rust_alloc (3 samples, 0.18%)</title><rect x="47.7005%" y="213" width="0.1769%" height="15" fill="rgb(233,141,41)" fg:x="809" fg:w="3"/><text x="47.9505%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.83%)</title><rect x="48.0542%" y="261" width="0.8255%" height="15" fill="rgb(239,167,4)" fg:x="815" fg:w="14"/><text x="48.3042%" y="271.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.18%)</title><rect x="48.8797%" y="261" width="0.1769%" height="15" fill="rgb(209,217,16)" fg:x="829" fg:w="3"/><text x="49.1297%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (18 samples, 1.06%)</title><rect x="48.0542%" y="325" width="1.0613%" height="15" fill="rgb(219,88,35)" fg:x="815" fg:w="18"/><text x="48.3042%" y="335.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (18 samples, 1.06%)</title><rect x="48.0542%" y="309" width="1.0613%" height="15" fill="rgb(220,193,23)" fg:x="815" fg:w="18"/><text x="48.3042%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 1.06%)</title><rect x="48.0542%" y="293" width="1.0613%" height="15" fill="rgb(230,90,52)" fg:x="815" fg:w="18"/><text x="48.3042%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (18 samples, 1.06%)</title><rect x="48.0542%" y="277" width="1.0613%" height="15" fill="rgb(252,106,19)" fg:x="815" fg:w="18"/><text x="48.3042%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.06%)</title><rect x="49.0566%" y="261" width="0.0590%" height="15" fill="rgb(206,74,20)" fg:x="832" fg:w="1"/><text x="49.3066%" y="271.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.06%)</title><rect x="49.0566%" y="245" width="0.0590%" height="15" fill="rgb(230,138,44)" fg:x="832" fg:w="1"/><text x="49.3066%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (4 samples, 0.24%)</title><rect x="49.1156%" y="325" width="0.2358%" height="15" fill="rgb(235,182,43)" fg:x="833" fg:w="4"/><text x="49.3656%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (4 samples, 0.24%)</title><rect x="49.1156%" y="309" width="0.2358%" height="15" fill="rgb(242,16,51)" fg:x="833" fg:w="4"/><text x="49.3656%" y="319.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (27 samples, 1.59%)</title><rect x="47.8774%" y="341" width="1.5920%" height="15" fill="rgb(248,9,4)" fg:x="812" fg:w="27"/><text x="48.1274%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.12%)</title><rect x="49.3514%" y="325" width="0.1179%" height="15" fill="rgb(210,31,22)" fg:x="837" fg:w="2"/><text x="49.6014%" y="335.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.12%)</title><rect x="49.3514%" y="309" width="0.1179%" height="15" fill="rgb(239,54,39)" fg:x="837" fg:w="2"/><text x="49.6014%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.12%)</title><rect x="49.3514%" y="293" width="0.1179%" height="15" fill="rgb(230,99,41)" fg:x="837" fg:w="2"/><text x="49.6014%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.12%)</title><rect x="49.3514%" y="277" width="0.1179%" height="15" fill="rgb(253,106,12)" fg:x="837" fg:w="2"/><text x="49.6014%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.59%)</title><rect x="51.5330%" y="213" width="0.5896%" height="15" fill="rgb(213,46,41)" fg:x="874" fg:w="10"/><text x="51.7830%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.53%)</title><rect x="51.5920%" y="197" width="0.5307%" height="15" fill="rgb(215,133,35)" fg:x="875" fg:w="9"/><text x="51.8420%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (4 samples, 0.24%)</title><rect x="51.8868%" y="181" width="0.2358%" height="15" fill="rgb(213,28,5)" fg:x="880" fg:w="4"/><text x="52.1368%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.12%)</title><rect x="52.0047%" y="165" width="0.1179%" height="15" fill="rgb(215,77,49)" fg:x="882" fg:w="2"/><text x="52.2547%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (39 samples, 2.30%)</title><rect x="52.4175%" y="197" width="2.2995%" height="15" fill="rgb(248,100,22)" fg:x="889" fg:w="39"/><text x="52.6675%" y="207.50">_..</text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 2.71%)</title><rect x="52.1226%" y="213" width="2.7123%" height="15" fill="rgb(208,67,9)" fg:x="884" fg:w="46"/><text x="52.3726%" y="223.50">co..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (2 samples, 0.12%)</title><rect x="54.7170%" y="197" width="0.1179%" height="15" fill="rgb(219,133,21)" fg:x="928" fg:w="2"/><text x="54.9670%" y="207.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (67 samples, 3.95%)</title><rect x="51.1792%" y="309" width="3.9505%" height="15" fill="rgb(246,46,29)" fg:x="868" fg:w="67"/><text x="51.4292%" y="319.50">&lt;&amp;mu..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (63 samples, 3.71%)</title><rect x="51.4151%" y="293" width="3.7146%" height="15" fill="rgb(246,185,52)" fg:x="872" fg:w="63"/><text x="51.6651%" y="303.50">&lt;all..</text></g><g><title>alloc::string::String::push_str (63 samples, 3.71%)</title><rect x="51.4151%" y="277" width="3.7146%" height="15" fill="rgb(252,136,11)" fg:x="872" fg:w="63"/><text x="51.6651%" y="287.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (63 samples, 3.71%)</title><rect x="51.4151%" y="261" width="3.7146%" height="15" fill="rgb(219,138,53)" fg:x="872" fg:w="63"/><text x="51.6651%" y="271.50">allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (63 samples, 3.71%)</title><rect x="51.4151%" y="245" width="3.7146%" height="15" fill="rgb(211,51,23)" fg:x="872" fg:w="63"/><text x="51.6651%" y="255.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (63 samples, 3.71%)</title><rect x="51.4151%" y="229" width="3.7146%" height="15" fill="rgb(247,221,28)" fg:x="872" fg:w="63"/><text x="51.6651%" y="239.50">allo..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.29%)</title><rect x="54.8349%" y="213" width="0.2948%" height="15" fill="rgb(251,222,45)" fg:x="930" fg:w="5"/><text x="55.0849%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.29%)</title><rect x="54.8349%" y="197" width="0.2948%" height="15" fill="rgb(217,162,53)" fg:x="930" fg:w="5"/><text x="55.0849%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.41%)</title><rect x="55.1297%" y="309" width="0.4127%" height="15" fill="rgb(229,93,14)" fg:x="935" fg:w="7"/><text x="55.3797%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (7 samples, 0.41%)</title><rect x="55.1297%" y="293" width="0.4127%" height="15" fill="rgb(209,67,49)" fg:x="935" fg:w="7"/><text x="55.3797%" y="303.50"></text></g><g><title>core::fmt::Formatter::new (7 samples, 0.41%)</title><rect x="55.5425%" y="309" width="0.4127%" height="15" fill="rgb(213,87,29)" fg:x="942" fg:w="7"/><text x="55.7925%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.35%)</title><rect x="57.4882%" y="181" width="0.3538%" height="15" fill="rgb(205,151,52)" fg:x="975" fg:w="6"/><text x="57.7382%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.35%)</title><rect x="57.4882%" y="165" width="0.3538%" height="15" fill="rgb(253,215,39)" fg:x="975" fg:w="6"/><text x="57.7382%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (6 samples, 0.35%)</title><rect x="57.4882%" y="149" width="0.3538%" height="15" fill="rgb(221,220,41)" fg:x="975" fg:w="6"/><text x="57.7382%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (6 samples, 0.35%)</title><rect x="57.4882%" y="133" width="0.3538%" height="15" fill="rgb(218,133,21)" fg:x="975" fg:w="6"/><text x="57.7382%" y="143.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (19 samples, 1.12%)</title><rect x="57.3113%" y="277" width="1.1203%" height="15" fill="rgb(221,193,43)" fg:x="972" fg:w="19"/><text x="57.5613%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (16 samples, 0.94%)</title><rect x="57.4882%" y="261" width="0.9434%" height="15" fill="rgb(240,128,52)" fg:x="975" fg:w="16"/><text x="57.7382%" y="271.50"></text></g><g><title>alloc::string::String::push_str (16 samples, 0.94%)</title><rect x="57.4882%" y="245" width="0.9434%" height="15" fill="rgb(253,114,12)" fg:x="975" fg:w="16"/><text x="57.7382%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (16 samples, 0.94%)</title><rect x="57.4882%" y="229" width="0.9434%" height="15" fill="rgb(215,223,47)" fg:x="975" fg:w="16"/><text x="57.7382%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 0.94%)</title><rect x="57.4882%" y="213" width="0.9434%" height="15" fill="rgb(248,225,23)" fg:x="975" fg:w="16"/><text x="57.7382%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (16 samples, 0.94%)</title><rect x="57.4882%" y="197" width="0.9434%" height="15" fill="rgb(250,108,0)" fg:x="975" fg:w="16"/><text x="57.7382%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.59%)</title><rect x="57.8420%" y="181" width="0.5896%" height="15" fill="rgb(228,208,7)" fg:x="981" fg:w="10"/><text x="58.0920%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.47%)</title><rect x="57.9599%" y="165" width="0.4717%" height="15" fill="rgb(244,45,10)" fg:x="983" fg:w="8"/><text x="58.2099%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 samples, 0.65%)</title><rect x="59.4340%" y="261" width="0.6486%" height="15" fill="rgb(207,125,25)" fg:x="1008" fg:w="11"/><text x="59.6840%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad_integral (36 samples, 2.12%)</title><rect x="58.4316%" y="277" width="2.1226%" height="15" fill="rgb(210,195,18)" fg:x="991" fg:w="36"/><text x="58.6816%" y="287.50">c..</text></g><g><title>core::fmt::Formatter::sign_plus (8 samples, 0.47%)</title><rect x="60.0825%" y="261" width="0.4717%" height="15" fill="rgb(249,80,12)" fg:x="1019" fg:w="8"/><text x="60.3325%" y="271.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (81 samples, 4.78%)</title><rect x="55.9552%" y="309" width="4.7759%" height="15" fill="rgb(221,65,9)" fg:x="949" fg:w="81"/><text x="56.2052%" y="319.50">core::..</text></g><g><title>core::fmt::num::imp::fmt_u64 (69 samples, 4.07%)</title><rect x="56.6627%" y="293" width="4.0684%" height="15" fill="rgb(235,49,36)" fg:x="961" fg:w="69"/><text x="56.9127%" y="303.50">core..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.18%)</title><rect x="60.5542%" y="277" width="0.1769%" height="15" fill="rgb(225,32,20)" fg:x="1027" fg:w="3"/><text x="60.8042%" y="287.50"></text></g><g><title>&lt;u64 as core::fmt::num::DisplayInt&gt;::to_u64 (3 samples, 0.18%)</title><rect x="60.7311%" y="293" width="0.1769%" height="15" fill="rgb(215,141,46)" fg:x="1030" fg:w="3"/><text x="60.9811%" y="303.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (3 samples, 0.18%)</title><rect x="60.9080%" y="293" width="0.1769%" height="15" fill="rgb(250,160,47)" fg:x="1033" fg:w="3"/><text x="61.1580%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.29%)</title><rect x="64.9764%" y="197" width="0.2948%" height="15" fill="rgb(216,222,40)" fg:x="1102" fg:w="5"/><text x="65.2264%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.12%)</title><rect x="65.5660%" y="149" width="0.1179%" height="15" fill="rgb(234,217,39)" fg:x="1112" fg:w="2"/><text x="65.8160%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.12%)</title><rect x="65.5660%" y="133" width="0.1179%" height="15" fill="rgb(207,178,40)" fg:x="1112" fg:w="2"/><text x="65.8160%" y="143.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (35 samples, 2.06%)</title><rect x="65.6840%" y="117" width="2.0637%" height="15" fill="rgb(221,136,13)" fg:x="1114" fg:w="35"/><text x="65.9340%" y="127.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.12%)</title><rect x="67.7476%" y="117" width="0.1179%" height="15" fill="rgb(249,199,10)" fg:x="1149" fg:w="2"/><text x="67.9976%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (6 samples, 0.35%)</title><rect x="67.8656%" y="117" width="0.3538%" height="15" fill="rgb(249,222,13)" fg:x="1151" fg:w="6"/><text x="68.1156%" y="127.50"></text></g><g><title>__GI___libc_realloc (53 samples, 3.12%)</title><rect x="68.8090%" y="53" width="3.1250%" height="15" fill="rgb(244,185,38)" fg:x="1167" fg:w="53"/><text x="69.0590%" y="63.50">__G..</text></g><g><title>_int_realloc (25 samples, 1.47%)</title><rect x="70.4599%" y="37" width="1.4741%" height="15" fill="rgb(236,202,9)" fg:x="1195" fg:w="25"/><text x="70.7099%" y="47.50"></text></g><g><title>__rdl_realloc (9 samples, 0.53%)</title><rect x="71.9340%" y="53" width="0.5307%" height="15" fill="rgb(250,229,37)" fg:x="1220" fg:w="9"/><text x="72.1840%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.18%)</title><rect x="72.2877%" y="37" width="0.1769%" height="15" fill="rgb(206,174,23)" fg:x="1226" fg:w="3"/><text x="72.5377%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (76 samples, 4.48%)</title><rect x="68.2193%" y="117" width="4.4811%" height="15" fill="rgb(211,33,43)" fg:x="1157" fg:w="76"/><text x="68.4693%" y="127.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (69 samples, 4.07%)</title><rect x="68.6321%" y="101" width="4.0684%" height="15" fill="rgb(245,58,50)" fg:x="1164" fg:w="69"/><text x="68.8821%" y="111.50">&lt;all..</text></g><g><title>alloc::alloc::Global::grow_impl (69 samples, 4.07%)</title><rect x="68.6321%" y="85" width="4.0684%" height="15" fill="rgb(244,68,36)" fg:x="1164" fg:w="69"/><text x="68.8821%" y="95.50">allo..</text></g><g><title>alloc::alloc::realloc (69 samples, 4.07%)</title><rect x="68.6321%" y="69" width="4.0684%" height="15" fill="rgb(232,229,15)" fg:x="1164" fg:w="69"/><text x="68.8821%" y="79.50">allo..</text></g><g><title>__rust_realloc (4 samples, 0.24%)</title><rect x="72.4646%" y="53" width="0.2358%" height="15" fill="rgb(254,30,23)" fg:x="1229" fg:w="4"/><text x="72.7146%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (124 samples, 7.31%)</title><rect x="65.6840%" y="133" width="7.3113%" height="15" fill="rgb(235,160,14)" fg:x="1114" fg:w="124"/><text x="65.9340%" y="143.50">alloc::raw..</text></g><g><title>core::cmp::max (5 samples, 0.29%)</title><rect x="72.7005%" y="117" width="0.2948%" height="15" fill="rgb(212,155,44)" fg:x="1233" fg:w="5"/><text x="72.9505%" y="127.50"></text></g><g><title>core::cmp::Ord::max (5 samples, 0.29%)</title><rect x="72.7005%" y="101" width="0.2948%" height="15" fill="rgb(226,2,50)" fg:x="1233" fg:w="5"/><text x="72.9505%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.29%)</title><rect x="72.7005%" y="85" width="0.2948%" height="15" fill="rgb(234,177,6)" fg:x="1233" fg:w="5"/><text x="72.9505%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (134 samples, 7.90%)</title><rect x="65.5071%" y="181" width="7.9009%" height="15" fill="rgb(217,24,9)" fg:x="1111" fg:w="134"/><text x="65.7571%" y="191.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (134 samples, 7.90%)</title><rect x="65.5071%" y="165" width="7.9009%" height="15" fill="rgb(220,13,46)" fg:x="1111" fg:w="134"/><text x="65.7571%" y="175.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (131 samples, 7.72%)</title><rect x="65.6840%" y="149" width="7.7241%" height="15" fill="rgb(239,221,27)" fg:x="1114" fg:w="131"/><text x="65.9340%" y="159.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.41%)</title><rect x="72.9953%" y="133" width="0.4127%" height="15" fill="rgb(222,198,25)" fg:x="1238" fg:w="7"/><text x="73.2453%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 1.77%)</title><rect x="73.4080%" y="181" width="1.7689%" height="15" fill="rgb(211,99,13)" fg:x="1245" fg:w="30"/><text x="73.6580%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (30 samples, 1.77%)</title><rect x="73.4080%" y="165" width="1.7689%" height="15" fill="rgb(232,111,31)" fg:x="1245" fg:w="30"/><text x="73.6580%" y="175.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (175 samples, 10.32%)</title><rect x="64.9175%" y="277" width="10.3184%" height="15" fill="rgb(245,82,37)" fg:x="1101" fg:w="175"/><text x="65.1675%" y="287.50">&lt;&amp;mut W as core..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (174 samples, 10.26%)</title><rect x="64.9764%" y="261" width="10.2594%" height="15" fill="rgb(227,149,46)" fg:x="1102" fg:w="174"/><text x="65.2264%" y="271.50">&lt;alloc::string:..</text></g><g><title>alloc::string::String::push_str (174 samples, 10.26%)</title><rect x="64.9764%" y="245" width="10.2594%" height="15" fill="rgb(218,36,50)" fg:x="1102" fg:w="174"/><text x="65.2264%" y="255.50">alloc::string::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (174 samples, 10.26%)</title><rect x="64.9764%" y="229" width="10.2594%" height="15" fill="rgb(226,80,48)" fg:x="1102" fg:w="174"/><text x="65.2264%" y="239.50">alloc::vec::Vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (174 samples, 10.26%)</title><rect x="64.9764%" y="213" width="10.2594%" height="15" fill="rgb(238,224,15)" fg:x="1102" fg:w="174"/><text x="65.2264%" y="223.50">&lt;alloc::vec::Ve..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (169 samples, 9.96%)</title><rect x="65.2712%" y="197" width="9.9646%" height="15" fill="rgb(241,136,10)" fg:x="1107" fg:w="169"/><text x="65.5212%" y="207.50">alloc::vec::Ve..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.06%)</title><rect x="75.1769%" y="181" width="0.0590%" height="15" fill="rgb(208,32,45)" fg:x="1275" fg:w="1"/><text x="75.4269%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.06%)</title><rect x="75.1769%" y="165" width="0.0590%" height="15" fill="rgb(207,135,9)" fg:x="1275" fg:w="1"/><text x="75.4269%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.29%)</title><rect x="76.7099%" y="261" width="0.2948%" height="15" fill="rgb(206,86,44)" fg:x="1301" fg:w="5"/><text x="76.9599%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.12%)</title><rect x="77.0047%" y="261" width="0.1179%" height="15" fill="rgb(245,177,15)" fg:x="1306" fg:w="2"/><text x="77.2547%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad_integral (33 samples, 1.95%)</title><rect x="75.2358%" y="277" width="1.9458%" height="15" fill="rgb(206,64,50)" fg:x="1276" fg:w="33"/><text x="75.4858%" y="287.50">c..</text></g><g><title>core::fmt::Formatter::sign_plus (1 samples, 0.06%)</title><rect x="77.1226%" y="261" width="0.0590%" height="15" fill="rgb(234,36,40)" fg:x="1308" fg:w="1"/><text x="77.3726%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 1.42%)</title><rect x="77.1816%" y="277" width="1.4151%" height="15" fill="rgb(213,64,8)" fg:x="1309" fg:w="24"/><text x="77.4316%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (304 samples, 17.92%)</title><rect x="60.7311%" y="309" width="17.9245%" height="15" fill="rgb(210,75,36)" fg:x="1030" fg:w="304"/><text x="60.9811%" y="319.50">core::fmt::num::imp::&lt;impl c..</text></g><g><title>core::fmt::num::imp::fmt_u64 (298 samples, 17.57%)</title><rect x="61.0849%" y="293" width="17.5708%" height="15" fill="rgb(229,88,21)" fg:x="1036" fg:w="298"/><text x="61.3349%" y="303.50">core::fmt::num::imp::fmt_u64</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.06%)</title><rect x="78.5967%" y="277" width="0.0590%" height="15" fill="rgb(252,204,47)" fg:x="1333" fg:w="1"/><text x="78.8467%" y="287.50"></text></g><g><title>core::iter::adapters::zip::zip (3 samples, 0.18%)</title><rect x="78.6557%" y="309" width="0.1769%" height="15" fill="rgb(208,77,27)" fg:x="1334" fg:w="3"/><text x="78.9057%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (3 samples, 0.18%)</title><rect x="78.6557%" y="293" width="0.1769%" height="15" fill="rgb(221,76,26)" fg:x="1334" fg:w="3"/><text x="78.9057%" y="303.50"></text></g><g><title>core::cmp::min (3 samples, 0.18%)</title><rect x="78.6557%" y="277" width="0.1769%" height="15" fill="rgb(225,139,18)" fg:x="1334" fg:w="3"/><text x="78.9057%" y="287.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.18%)</title><rect x="78.6557%" y="261" width="0.1769%" height="15" fill="rgb(230,137,11)" fg:x="1334" fg:w="3"/><text x="78.9057%" y="271.50"></text></g><g><title>core::fmt::write (3 samples, 0.18%)</title><rect x="78.6557%" y="245" width="0.1769%" height="15" fill="rgb(212,28,1)" fg:x="1334" fg:w="3"/><text x="78.9057%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (848 samples, 50.00%)</title><rect x="28.9505%" y="373" width="50.0000%" height="15" fill="rgb(248,164,17)" fg:x="491" fg:w="848"/><text x="29.2005%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::fmt::format (738 samples, 43.51%)</title><rect x="35.4363%" y="357" width="43.5142%" height="15" fill="rgb(222,171,42)" fg:x="601" fg:w="738"/><text x="35.6863%" y="367.50">alloc::fmt::format</text></g><g><title>core::fmt::Write::write_fmt (500 samples, 29.48%)</title><rect x="49.4693%" y="341" width="29.4811%" height="15" fill="rgb(243,84,45)" fg:x="839" fg:w="500"/><text x="49.7193%" y="351.50">core::fmt::Write::write_fmt</text></g><g><title>core::fmt::write (493 samples, 29.07%)</title><rect x="49.8821%" y="325" width="29.0684%" height="15" fill="rgb(252,49,23)" fg:x="846" fg:w="493"/><text x="50.1321%" y="335.50">core::fmt::write</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.12%)</title><rect x="78.8325%" y="309" width="0.1179%" height="15" fill="rgb(215,19,7)" fg:x="1337" fg:w="2"/><text x="79.0825%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.12%)</title><rect x="78.8325%" y="293" width="0.1179%" height="15" fill="rgb(238,81,41)" fg:x="1337" fg:w="2"/><text x="79.0825%" y="303.50"></text></g><g><title>exc_page_fault (1 samples, 0.06%)</title><rect x="78.9505%" y="357" width="0.0590%" height="15" fill="rgb(210,199,37)" fg:x="1339" fg:w="1"/><text x="79.2005%" y="367.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.06%)</title><rect x="78.9505%" y="341" width="0.0590%" height="15" fill="rgb(244,192,49)" fg:x="1339" fg:w="1"/><text x="79.2005%" y="351.50"></text></g><g><title>handle_mm_fault (1 samples, 0.06%)</title><rect x="78.9505%" y="325" width="0.0590%" height="15" fill="rgb(226,211,11)" fg:x="1339" fg:w="1"/><text x="79.2005%" y="335.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.06%)</title><rect x="78.9505%" y="309" width="0.0590%" height="15" fill="rgb(236,162,54)" fg:x="1339" fg:w="1"/><text x="79.2005%" y="319.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.06%)</title><rect x="78.9505%" y="293" width="0.0590%" height="15" fill="rgb(220,229,9)" fg:x="1339" fg:w="1"/><text x="79.2005%" y="303.50"></text></g><g><title>__alloc_pages (1 samples, 0.06%)</title><rect x="78.9505%" y="277" width="0.0590%" height="15" fill="rgb(250,87,22)" fg:x="1339" fg:w="1"/><text x="79.2005%" y="287.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.06%)</title><rect x="78.9505%" y="261" width="0.0590%" height="15" fill="rgb(239,43,17)" fg:x="1339" fg:w="1"/><text x="79.2005%" y="271.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.12%)</title><rect x="78.9505%" y="373" width="0.1179%" height="15" fill="rgb(231,177,25)" fg:x="1339" fg:w="2"/><text x="79.2005%" y="383.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.06%)</title><rect x="79.0094%" y="357" width="0.0590%" height="15" fill="rgb(219,179,1)" fg:x="1340" fg:w="1"/><text x="79.2594%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (855 samples, 50.41%)</title><rect x="28.7146%" y="389" width="50.4127%" height="15" fill="rgb(238,219,53)" fg:x="487" fg:w="855"/><text x="28.9646%" y="399.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>error_entry (1 samples, 0.06%)</title><rect x="79.0684%" y="373" width="0.0590%" height="15" fill="rgb(232,167,36)" fg:x="1341" fg:w="1"/><text x="79.3184%" y="383.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::default::Default&gt;::default (1 samples, 0.06%)</title><rect x="83.0189%" y="373" width="0.0590%" height="15" fill="rgb(244,19,51)" fg:x="1408" fg:w="1"/><text x="83.2689%" y="383.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::finish (8 samples, 0.47%)</title><rect x="83.0778%" y="373" width="0.4717%" height="15" fill="rgb(224,6,22)" fg:x="1409" fg:w="8"/><text x="83.3278%" y="383.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (50 samples, 2.95%)</title><rect x="83.5495%" y="373" width="2.9481%" height="15" fill="rgb(224,145,5)" fg:x="1417" fg:w="50"/><text x="83.7995%" y="383.50">&lt;s..</text></g><g><title>__memmove_avx_unaligned_erms (27 samples, 1.59%)</title><rect x="84.9057%" y="357" width="1.5920%" height="15" fill="rgb(234,130,49)" fg:x="1440" fg:w="27"/><text x="85.1557%" y="367.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_i8 (23 samples, 1.36%)</title><rect x="86.4976%" y="373" width="1.3561%" height="15" fill="rgb(254,6,2)" fg:x="1467" fg:w="23"/><text x="86.7476%" y="383.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (19 samples, 1.12%)</title><rect x="86.7335%" y="357" width="1.1203%" height="15" fill="rgb(208,96,46)" fg:x="1471" fg:w="19"/><text x="86.9835%" y="367.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.06%)</title><rect x="88.7382%" y="229" width="0.0590%" height="15" fill="rgb(239,3,39)" fg:x="1505" fg:w="1"/><text x="88.9882%" y="239.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.12%)</title><rect x="88.7972%" y="229" width="0.1179%" height="15" fill="rgb(233,210,1)" fg:x="1506" fg:w="2"/><text x="89.0472%" y="239.50"></text></g><g><title>__alloc_pages (2 samples, 0.12%)</title><rect x="88.7972%" y="213" width="0.1179%" height="15" fill="rgb(244,137,37)" fg:x="1506" fg:w="2"/><text x="89.0472%" y="223.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.12%)</title><rect x="88.7972%" y="197" width="0.1179%" height="15" fill="rgb(240,136,2)" fg:x="1506" fg:w="2"/><text x="89.0472%" y="207.50"></text></g><g><title>kernel_init_free_pages (2 samples, 0.12%)</title><rect x="88.7972%" y="181" width="0.1179%" height="15" fill="rgb(239,18,37)" fg:x="1506" fg:w="2"/><text x="89.0472%" y="191.50"></text></g><g><title>clear_page_erms (2 samples, 0.12%)</title><rect x="88.7972%" y="165" width="0.1179%" height="15" fill="rgb(218,185,22)" fg:x="1506" fg:w="2"/><text x="89.0472%" y="175.50"></text></g><g><title>cgroup_throttle_swaprate (1 samples, 0.06%)</title><rect x="88.9151%" y="229" width="0.0590%" height="15" fill="rgb(225,218,4)" fg:x="1508" fg:w="1"/><text x="89.1651%" y="239.50"></text></g><g><title>mem_cgroup_charge (1 samples, 0.06%)</title><rect x="88.9741%" y="229" width="0.0590%" height="15" fill="rgb(230,182,32)" fg:x="1509" fg:w="1"/><text x="89.2241%" y="239.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.06%)</title><rect x="88.9741%" y="213" width="0.0590%" height="15" fill="rgb(242,56,43)" fg:x="1509" fg:w="1"/><text x="89.2241%" y="223.50"></text></g><g><title>try_charge (1 samples, 0.06%)</title><rect x="88.9741%" y="197" width="0.0590%" height="15" fill="rgb(233,99,24)" fg:x="1509" fg:w="1"/><text x="89.2241%" y="207.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.06%)</title><rect x="88.9741%" y="181" width="0.0590%" height="15" fill="rgb(234,209,42)" fg:x="1509" fg:w="1"/><text x="89.2241%" y="191.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.06%)</title><rect x="89.0330%" y="229" width="0.0590%" height="15" fill="rgb(227,7,12)" fg:x="1510" fg:w="1"/><text x="89.2830%" y="239.50"></text></g><g><title>__mod_lruvec_page_state (1 samples, 0.06%)</title><rect x="89.0330%" y="213" width="0.0590%" height="15" fill="rgb(245,203,43)" fg:x="1510" fg:w="1"/><text x="89.2830%" y="223.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.06%)</title><rect x="89.0330%" y="197" width="0.0590%" height="15" fill="rgb(238,205,33)" fg:x="1510" fg:w="1"/><text x="89.2830%" y="207.50"></text></g><g><title>exc_page_fault (7 samples, 0.41%)</title><rect x="88.7382%" y="293" width="0.4127%" height="15" fill="rgb(231,56,7)" fg:x="1505" fg:w="7"/><text x="88.9882%" y="303.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.41%)</title><rect x="88.7382%" y="277" width="0.4127%" height="15" fill="rgb(244,186,29)" fg:x="1505" fg:w="7"/><text x="88.9882%" y="287.50"></text></g><g><title>handle_mm_fault (7 samples, 0.41%)</title><rect x="88.7382%" y="261" width="0.4127%" height="15" fill="rgb(234,111,31)" fg:x="1505" fg:w="7"/><text x="88.9882%" y="271.50"></text></g><g><title>__handle_mm_fault (7 samples, 0.41%)</title><rect x="88.7382%" y="245" width="0.4127%" height="15" fill="rgb(241,149,10)" fg:x="1505" fg:w="7"/><text x="88.9882%" y="255.50"></text></g><g><title>pud_val (1 samples, 0.06%)</title><rect x="89.0920%" y="229" width="0.0590%" height="15" fill="rgb(249,206,44)" fg:x="1511" fg:w="1"/><text x="89.3420%" y="239.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.47%)</title><rect x="88.7382%" y="309" width="0.4717%" height="15" fill="rgb(251,153,30)" fg:x="1505" fg:w="8"/><text x="88.9882%" y="319.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.06%)</title><rect x="89.1509%" y="293" width="0.0590%" height="15" fill="rgb(239,152,38)" fg:x="1512" fg:w="1"/><text x="89.4009%" y="303.50"></text></g><g><title>error_entry (7 samples, 0.41%)</title><rect x="89.2099%" y="309" width="0.4127%" height="15" fill="rgb(249,139,47)" fg:x="1513" fg:w="7"/><text x="89.4599%" y="319.50"></text></g><g><title>sync_regs (5 samples, 0.29%)</title><rect x="89.3278%" y="293" width="0.2948%" height="15" fill="rgb(244,64,35)" fg:x="1515" fg:w="5"/><text x="89.5778%" y="303.50"></text></g><g><title>__GI___libc_malloc (24 samples, 1.42%)</title><rect x="88.2665%" y="341" width="1.4151%" height="15" fill="rgb(216,46,15)" fg:x="1497" fg:w="24"/><text x="88.5165%" y="351.50"></text></g><g><title>_int_malloc (20 samples, 1.18%)</title><rect x="88.5024%" y="325" width="1.1792%" height="15" fill="rgb(250,74,19)" fg:x="1501" fg:w="20"/><text x="88.7524%" y="335.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.06%)</title><rect x="89.6226%" y="309" width="0.0590%" height="15" fill="rgb(249,42,33)" fg:x="1520" fg:w="1"/><text x="89.8726%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (32 samples, 1.89%)</title><rect x="87.8538%" y="373" width="1.8868%" height="15" fill="rgb(242,149,17)" fg:x="1490" fg:w="32"/><text x="88.1038%" y="383.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (28 samples, 1.65%)</title><rect x="88.0896%" y="357" width="1.6509%" height="15" fill="rgb(244,29,21)" fg:x="1494" fg:w="28"/><text x="88.3396%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="89.6816%" y="341" width="0.0590%" height="15" fill="rgb(220,130,37)" fg:x="1521" fg:w="1"/><text x="89.9316%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="89.6816%" y="325" width="0.0590%" height="15" fill="rgb(211,67,2)" fg:x="1521" fg:w="1"/><text x="89.9316%" y="335.50"></text></g><g><title>__list_add_valid (1 samples, 0.06%)</title><rect x="91.2146%" y="245" width="0.0590%" height="15" fill="rgb(235,68,52)" fg:x="1547" fg:w="1"/><text x="91.4646%" y="255.50"></text></g><g><title>lru_cache_add (4 samples, 0.24%)</title><rect x="91.0967%" y="277" width="0.2358%" height="15" fill="rgb(246,142,3)" fg:x="1545" fg:w="4"/><text x="91.3467%" y="287.50"></text></g><g><title>__pagevec_lru_add (3 samples, 0.18%)</title><rect x="91.1557%" y="261" width="0.1769%" height="15" fill="rgb(241,25,7)" fg:x="1546" fg:w="3"/><text x="91.4057%" y="271.50"></text></g><g><title>lock_page_lruvec_irqsave (1 samples, 0.06%)</title><rect x="91.2736%" y="245" width="0.0590%" height="15" fill="rgb(242,119,39)" fg:x="1548" fg:w="1"/><text x="91.5236%" y="255.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.06%)</title><rect x="91.2736%" y="229" width="0.0590%" height="15" fill="rgb(241,98,45)" fg:x="1548" fg:w="1"/><text x="91.5236%" y="239.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.06%)</title><rect x="91.3325%" y="261" width="0.0590%" height="15" fill="rgb(254,28,30)" fg:x="1549" fg:w="1"/><text x="91.5825%" y="271.50"></text></g><g><title>try_charge (1 samples, 0.06%)</title><rect x="91.3325%" y="245" width="0.0590%" height="15" fill="rgb(241,142,54)" fg:x="1549" fg:w="1"/><text x="91.5825%" y="255.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.06%)</title><rect x="91.3325%" y="229" width="0.0590%" height="15" fill="rgb(222,85,15)" fg:x="1549" fg:w="1"/><text x="91.5825%" y="239.50"></text></g><g><title>mem_cgroup_charge (2 samples, 0.12%)</title><rect x="91.3325%" y="277" width="0.1179%" height="15" fill="rgb(210,85,47)" fg:x="1549" fg:w="2"/><text x="91.5825%" y="287.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.06%)</title><rect x="91.3915%" y="261" width="0.0590%" height="15" fill="rgb(224,206,25)" fg:x="1550" fg:w="1"/><text x="91.6415%" y="271.50"></text></g><g><title>handle_mm_fault (7 samples, 0.41%)</title><rect x="91.0967%" y="309" width="0.4127%" height="15" fill="rgb(243,201,19)" fg:x="1545" fg:w="7"/><text x="91.3467%" y="319.50"></text></g><g><title>__handle_mm_fault (7 samples, 0.41%)</title><rect x="91.0967%" y="293" width="0.4127%" height="15" fill="rgb(236,59,4)" fg:x="1545" fg:w="7"/><text x="91.3467%" y="303.50"></text></g><g><title>pmd_page_vaddr (1 samples, 0.06%)</title><rect x="91.4505%" y="277" width="0.0590%" height="15" fill="rgb(254,179,45)" fg:x="1551" fg:w="1"/><text x="91.7005%" y="287.50"></text></g><g><title>exc_page_fault (9 samples, 0.53%)</title><rect x="91.0967%" y="341" width="0.5307%" height="15" fill="rgb(226,14,10)" fg:x="1545" fg:w="9"/><text x="91.3467%" y="351.50"></text></g><g><title>do_user_addr_fault (9 samples, 0.53%)</title><rect x="91.0967%" y="325" width="0.5307%" height="15" fill="rgb(244,27,41)" fg:x="1545" fg:w="9"/><text x="91.3467%" y="335.50"></text></g><g><title>up_read (2 samples, 0.12%)</title><rect x="91.5094%" y="309" width="0.1179%" height="15" fill="rgb(235,35,32)" fg:x="1552" fg:w="2"/><text x="91.7594%" y="319.50"></text></g><g><title>asm_exc_page_fault (14 samples, 0.83%)</title><rect x="91.0967%" y="357" width="0.8255%" height="15" fill="rgb(218,68,31)" fg:x="1545" fg:w="14"/><text x="91.3467%" y="367.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.29%)</title><rect x="91.6274%" y="341" width="0.2948%" height="15" fill="rgb(207,120,37)" fg:x="1554" fg:w="5"/><text x="91.8774%" y="351.50"></text></g><g><title>error_entry (2 samples, 0.12%)</title><rect x="91.9222%" y="357" width="0.1179%" height="15" fill="rgb(227,98,0)" fg:x="1559" fg:w="2"/><text x="92.1722%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (44 samples, 2.59%)</title><rect x="89.7406%" y="373" width="2.5943%" height="15" fill="rgb(207,7,3)" fg:x="1522" fg:w="44"/><text x="89.9906%" y="383.50">ha..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.29%)</title><rect x="92.0401%" y="357" width="0.2948%" height="15" fill="rgb(206,98,19)" fg:x="1561" fg:w="5"/><text x="92.2901%" y="367.50"></text></g><g><title>__libc_start_main (1,393 samples, 82.13%)</title><rect x="13.3844%" y="565" width="82.1344%" height="15" fill="rgb(217,5,26)" fg:x="227" fg:w="1393"/><text x="13.6344%" y="575.50">__libc_start_main</text></g><g><title>main (1,393 samples, 82.13%)</title><rect x="13.3844%" y="549" width="82.1344%" height="15" fill="rgb(235,190,38)" fg:x="227" fg:w="1393"/><text x="13.6344%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (1,393 samples, 82.13%)</title><rect x="13.3844%" y="533" width="82.1344%" height="15" fill="rgb(247,86,24)" fg:x="227" fg:w="1393"/><text x="13.6344%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,393 samples, 82.13%)</title><rect x="13.3844%" y="517" width="82.1344%" height="15" fill="rgb(205,101,16)" fg:x="227" fg:w="1393"/><text x="13.6344%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,393 samples, 82.13%)</title><rect x="13.3844%" y="501" width="82.1344%" height="15" fill="rgb(246,168,33)" fg:x="227" fg:w="1393"/><text x="13.6344%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,393 samples, 82.13%)</title><rect x="13.3844%" y="485" width="82.1344%" height="15" fill="rgb(231,114,1)" fg:x="227" fg:w="1393"/><text x="13.6344%" y="495.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,393 samples, 82.13%)</title><rect x="13.3844%" y="469" width="82.1344%" height="15" fill="rgb(207,184,53)" fg:x="227" fg:w="1393"/><text x="13.6344%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,393 samples, 82.13%)</title><rect x="13.3844%" y="453" width="82.1344%" height="15" fill="rgb(224,95,51)" fg:x="227" fg:w="1393"/><text x="13.6344%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,393 samples, 82.13%)</title><rect x="13.3844%" y="437" width="82.1344%" height="15" fill="rgb(212,188,45)" fg:x="227" fg:w="1393"/><text x="13.6344%" y="447.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>groovebin::main (1,393 samples, 82.13%)</title><rect x="13.3844%" y="421" width="82.1344%" height="15" fill="rgb(223,154,38)" fg:x="227" fg:w="1393"/><text x="13.6344%" y="431.50">groovebin::main</text></g><g><title>groovebin::setup::setup (1,133 samples, 66.80%)</title><rect x="28.7146%" y="405" width="66.8042%" height="15" fill="rgb(251,22,52)" fg:x="487" fg:w="1133"/><text x="28.9646%" y="415.50">groovebin::setup::setup</text></g><g><title>groovebin::file::File::add_index (278 samples, 16.39%)</title><rect x="79.1274%" y="389" width="16.3915%" height="15" fill="rgb(229,209,22)" fg:x="1342" fg:w="278"/><text x="79.3774%" y="399.50">groovebin::file::File::ad..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (54 samples, 3.18%)</title><rect x="92.3349%" y="373" width="3.1840%" height="15" fill="rgb(234,138,34)" fg:x="1566" fg:w="54"/><text x="92.5849%" y="383.50">has..</text></g><g><title>_start (1,394 samples, 82.19%)</title><rect x="13.3844%" y="581" width="82.1934%" height="15" fill="rgb(212,95,11)" fg:x="227" fg:w="1394"/><text x="13.6344%" y="591.50">_start</text></g><g><title>_dl_start (1 samples, 0.06%)</title><rect x="95.5189%" y="565" width="0.0590%" height="15" fill="rgb(240,179,47)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="575.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.06%)</title><rect x="95.5189%" y="549" width="0.0590%" height="15" fill="rgb(240,163,11)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="559.50"></text></g><g><title>dl_main (1 samples, 0.06%)</title><rect x="95.5189%" y="533" width="0.0590%" height="15" fill="rgb(236,37,12)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="543.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.06%)</title><rect x="95.5189%" y="517" width="0.0590%" height="15" fill="rgb(232,164,16)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="527.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.06%)</title><rect x="95.5189%" y="501" width="0.0590%" height="15" fill="rgb(244,205,15)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="511.50"></text></g><g><title>exc_page_fault (1 samples, 0.06%)</title><rect x="95.5189%" y="485" width="0.0590%" height="15" fill="rgb(223,117,47)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="495.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.06%)</title><rect x="95.5189%" y="469" width="0.0590%" height="15" fill="rgb(244,107,35)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="479.50"></text></g><g><title>handle_mm_fault (1 samples, 0.06%)</title><rect x="95.5189%" y="453" width="0.0590%" height="15" fill="rgb(205,140,8)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="463.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.06%)</title><rect x="95.5189%" y="437" width="0.0590%" height="15" fill="rgb(228,84,46)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="447.50"></text></g><g><title>wp_page_copy (1 samples, 0.06%)</title><rect x="95.5189%" y="421" width="0.0590%" height="15" fill="rgb(254,188,9)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="431.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.06%)</title><rect x="95.5189%" y="405" width="0.0590%" height="15" fill="rgb(206,112,54)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="415.50"></text></g><g><title>__alloc_pages (1 samples, 0.06%)</title><rect x="95.5189%" y="389" width="0.0590%" height="15" fill="rgb(216,84,49)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="399.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.06%)</title><rect x="95.5189%" y="373" width="0.0590%" height="15" fill="rgb(214,194,35)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="383.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.06%)</title><rect x="95.5189%" y="357" width="0.0590%" height="15" fill="rgb(249,28,3)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="367.50"></text></g><g><title>clear_page_erms (1 samples, 0.06%)</title><rect x="95.5189%" y="341" width="0.0590%" height="15" fill="rgb(222,56,52)" fg:x="1620" fg:w="1"/><text x="95.7689%" y="351.50"></text></g><g><title>asm_exc_page_fault (33 samples, 1.95%)</title><rect x="95.5778%" y="581" width="1.9458%" height="15" fill="rgb(245,217,50)" fg:x="1621" fg:w="33"/><text x="95.8278%" y="591.50">a..</text></g><g><title>core::fmt::Formatter::pad_integral (6 samples, 0.35%)</title><rect x="97.5236%" y="581" width="0.3538%" height="15" fill="rgb(213,201,24)" fg:x="1654" fg:w="6"/><text x="97.7736%" y="591.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.06%)</title><rect x="97.8774%" y="469" width="0.0590%" height="15" fill="rgb(248,116,28)" fg:x="1660" fg:w="1"/><text x="98.1274%" y="479.50"></text></g><g><title>release_pages (1 samples, 0.06%)</title><rect x="97.8774%" y="453" width="0.0590%" height="15" fill="rgb(219,72,43)" fg:x="1660" fg:w="1"/><text x="98.1274%" y="463.50"></text></g><g><title>free_unref_page_list (1 samples, 0.06%)</title><rect x="97.8774%" y="437" width="0.0590%" height="15" fill="rgb(209,138,14)" fg:x="1660" fg:w="1"/><text x="98.1274%" y="447.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.06%)</title><rect x="97.8774%" y="421" width="0.0590%" height="15" fill="rgb(222,18,33)" fg:x="1660" fg:w="1"/><text x="98.1274%" y="431.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.06%)</title><rect x="97.8774%" y="405" width="0.0590%" height="15" fill="rgb(213,199,7)" fg:x="1660" fg:w="1"/><text x="98.1274%" y="415.50"></text></g><g><title>__rcu_read_unlock (2 samples, 0.12%)</title><rect x="98.1722%" y="437" width="0.1179%" height="15" fill="rgb(250,110,10)" fg:x="1665" fg:w="2"/><text x="98.4222%" y="447.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.06%)</title><rect x="98.3491%" y="405" width="0.0590%" height="15" fill="rgb(248,123,6)" fg:x="1668" fg:w="1"/><text x="98.5991%" y="415.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.06%)</title><rect x="98.3491%" y="389" width="0.0590%" height="15" fill="rgb(206,91,31)" fg:x="1668" fg:w="1"/><text x="98.5991%" y="399.50"></text></g><g><title>page_remove_rmap (4 samples, 0.24%)</title><rect x="98.2901%" y="437" width="0.2358%" height="15" fill="rgb(211,154,13)" fg:x="1667" fg:w="4"/><text x="98.5401%" y="447.50"></text></g><g><title>__mod_lruvec_page_state (4 samples, 0.24%)</title><rect x="98.2901%" y="421" width="0.2358%" height="15" fill="rgb(225,148,7)" fg:x="1667" fg:w="4"/><text x="98.5401%" y="431.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.12%)</title><rect x="98.4080%" y="405" width="0.1179%" height="15" fill="rgb(220,160,43)" fg:x="1669" fg:w="2"/><text x="98.6580%" y="415.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.06%)</title><rect x="98.5259%" y="421" width="0.0590%" height="15" fill="rgb(213,52,39)" fg:x="1671" fg:w="1"/><text x="98.7759%" y="431.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.06%)</title><rect x="98.6439%" y="405" width="0.0590%" height="15" fill="rgb(243,137,7)" fg:x="1673" fg:w="1"/><text x="98.8939%" y="415.50"></text></g><g><title>__mod_lruvec_state (3 samples, 0.18%)</title><rect x="98.7028%" y="405" width="0.1769%" height="15" fill="rgb(230,79,13)" fg:x="1674" fg:w="3"/><text x="98.9528%" y="415.50"></text></g><g><title>__mod_node_page_state (3 samples, 0.18%)</title><rect x="98.7028%" y="389" width="0.1769%" height="15" fill="rgb(247,105,23)" fg:x="1674" fg:w="3"/><text x="98.9528%" y="399.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.06%)</title><rect x="98.8797%" y="405" width="0.0590%" height="15" fill="rgb(223,179,41)" fg:x="1677" fg:w="1"/><text x="99.1297%" y="415.50"></text></g><g><title>free_pcppages_bulk (9 samples, 0.53%)</title><rect x="99.0566%" y="389" width="0.5307%" height="15" fill="rgb(218,9,34)" fg:x="1680" fg:w="9"/><text x="99.3066%" y="399.50"></text></g><g><title>__free_one_page (8 samples, 0.47%)</title><rect x="99.1156%" y="373" width="0.4717%" height="15" fill="rgb(222,106,8)" fg:x="1681" fg:w="8"/><text x="99.3656%" y="383.50"></text></g><g><title>[vmlinux] (30 samples, 1.77%)</title><rect x="97.8774%" y="549" width="1.7689%" height="15" fill="rgb(211,220,0)" fg:x="1660" fg:w="30"/><text x="98.1274%" y="559.50"></text></g><g><title>do_group_exit (30 samples, 1.77%)</title><rect x="97.8774%" y="533" width="1.7689%" height="15" fill="rgb(229,52,16)" fg:x="1660" fg:w="30"/><text x="98.1274%" y="543.50"></text></g><g><title>do_exit (30 samples, 1.77%)</title><rect x="97.8774%" y="517" width="1.7689%" height="15" fill="rgb(212,155,18)" fg:x="1660" fg:w="30"/><text x="98.1274%" y="527.50"></text></g><g><title>mmput (30 samples, 1.77%)</title><rect x="97.8774%" y="501" width="1.7689%" height="15" fill="rgb(242,21,14)" fg:x="1660" fg:w="30"/><text x="98.1274%" y="511.50"></text></g><g><title>exit_mmap (30 samples, 1.77%)</title><rect x="97.8774%" y="485" width="1.7689%" height="15" fill="rgb(222,19,48)" fg:x="1660" fg:w="30"/><text x="98.1274%" y="495.50"></text></g><g><title>unmap_vmas (29 samples, 1.71%)</title><rect x="97.9363%" y="469" width="1.7099%" height="15" fill="rgb(232,45,27)" fg:x="1661" fg:w="29"/><text x="98.1863%" y="479.50"></text></g><g><title>unmap_page_range (29 samples, 1.71%)</title><rect x="97.9363%" y="453" width="1.7099%" height="15" fill="rgb(249,103,42)" fg:x="1661" fg:w="29"/><text x="98.1863%" y="463.50"></text></g><g><title>tlb_flush_mmu (19 samples, 1.12%)</title><rect x="98.5259%" y="437" width="1.1203%" height="15" fill="rgb(246,81,33)" fg:x="1671" fg:w="19"/><text x="98.7759%" y="447.50"></text></g><g><title>release_pages (18 samples, 1.06%)</title><rect x="98.5849%" y="421" width="1.0613%" height="15" fill="rgb(252,33,42)" fg:x="1672" fg:w="18"/><text x="98.8349%" y="431.50"></text></g><g><title>free_unref_page_list (12 samples, 0.71%)</title><rect x="98.9387%" y="405" width="0.7075%" height="15" fill="rgb(209,212,41)" fg:x="1678" fg:w="12"/><text x="99.1887%" y="415.50"></text></g><g><title>free_unref_page_commit (1 samples, 0.06%)</title><rect x="99.5873%" y="389" width="0.0590%" height="15" fill="rgb(207,154,6)" fg:x="1689" fg:w="1"/><text x="99.8373%" y="399.50"></text></g><g><title>__list_add_valid (1 samples, 0.06%)</title><rect x="99.5873%" y="373" width="0.0590%" height="15" fill="rgb(223,64,47)" fg:x="1689" fg:w="1"/><text x="99.8373%" y="383.50"></text></g><g><title>groovebin (1,691 samples, 99.71%)</title><rect x="0.0000%" y="597" width="99.7052%" height="15" fill="rgb(211,161,38)" fg:x="0" fg:w="1691"/><text x="0.2500%" y="607.50">groovebin</text></g><g><title>entry_SYSCALL_64_after_hwframe (31 samples, 1.83%)</title><rect x="97.8774%" y="581" width="1.8278%" height="15" fill="rgb(219,138,40)" fg:x="1660" fg:w="31"/><text x="98.1274%" y="591.50">e..</text></g><g><title>do_syscall_64 (31 samples, 1.83%)</title><rect x="97.8774%" y="565" width="1.8278%" height="15" fill="rgb(241,228,46)" fg:x="1660" fg:w="31"/><text x="98.1274%" y="575.50">d..</text></g><g><title>__x64_sys_execve (1 samples, 0.06%)</title><rect x="99.6462%" y="549" width="0.0590%" height="15" fill="rgb(223,209,38)" fg:x="1690" fg:w="1"/><text x="99.8962%" y="559.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.06%)</title><rect x="99.6462%" y="533" width="0.0590%" height="15" fill="rgb(236,164,45)" fg:x="1690" fg:w="1"/><text x="99.8962%" y="543.50"></text></g><g><title>bprm_execve (1 samples, 0.06%)</title><rect x="99.6462%" y="517" width="0.0590%" height="15" fill="rgb(231,15,5)" fg:x="1690" fg:w="1"/><text x="99.8962%" y="527.50"></text></g><g><title>load_elf_binary (1 samples, 0.06%)</title><rect x="99.6462%" y="501" width="0.0590%" height="15" fill="rgb(252,35,15)" fg:x="1690" fg:w="1"/><text x="99.8962%" y="511.50"></text></g><g><title>setup_arg_pages (1 samples, 0.06%)</title><rect x="99.6462%" y="485" width="0.0590%" height="15" fill="rgb(248,181,18)" fg:x="1690" fg:w="1"/><text x="99.8962%" y="495.50"></text></g><g><title>shift_arg_pages (1 samples, 0.06%)</title><rect x="99.6462%" y="469" width="0.0590%" height="15" fill="rgb(233,39,42)" fg:x="1690" fg:w="1"/><text x="99.8962%" y="479.50"></text></g><g><title>move_page_tables (1 samples, 0.06%)</title><rect x="99.6462%" y="453" width="0.0590%" height="15" fill="rgb(238,110,33)" fg:x="1690" fg:w="1"/><text x="99.8962%" y="463.50"></text></g><g><title>get_old_pud (1 samples, 0.06%)</title><rect x="99.6462%" y="437" width="0.0590%" height="15" fill="rgb(233,195,10)" fg:x="1690" fg:w="1"/><text x="99.8962%" y="447.50"></text></g><g><title>p4d_offset (1 samples, 0.06%)</title><rect x="99.6462%" y="421" width="0.0590%" height="15" fill="rgb(254,105,3)" fg:x="1690" fg:w="1"/><text x="99.8962%" y="431.50"></text></g><g><title>all (1,696 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(221,225,9)" fg:x="0" fg:w="1696"/><text x="0.2500%" y="623.50"></text></g><g><title>perf-exec (5 samples, 0.29%)</title><rect x="99.7052%" y="597" width="0.2948%" height="15" fill="rgb(224,227,45)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="607.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.29%)</title><rect x="99.7052%" y="581" width="0.2948%" height="15" fill="rgb(229,198,43)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="591.50"></text></g><g><title>do_syscall_64 (5 samples, 0.29%)</title><rect x="99.7052%" y="565" width="0.2948%" height="15" fill="rgb(206,209,35)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="575.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.29%)</title><rect x="99.7052%" y="549" width="0.2948%" height="15" fill="rgb(245,195,53)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="559.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.29%)</title><rect x="99.7052%" y="533" width="0.2948%" height="15" fill="rgb(240,92,26)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="543.50"></text></g><g><title>bprm_execve (5 samples, 0.29%)</title><rect x="99.7052%" y="517" width="0.2948%" height="15" fill="rgb(207,40,23)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="527.50"></text></g><g><title>load_elf_binary (5 samples, 0.29%)</title><rect x="99.7052%" y="501" width="0.2948%" height="15" fill="rgb(223,111,35)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="511.50"></text></g><g><title>begin_new_exec (5 samples, 0.29%)</title><rect x="99.7052%" y="485" width="0.2948%" height="15" fill="rgb(229,147,28)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="495.50"></text></g><g><title>perf_event_exec (5 samples, 0.29%)</title><rect x="99.7052%" y="469" width="0.2948%" height="15" fill="rgb(211,29,28)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="479.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.29%)</title><rect x="99.7052%" y="453" width="0.2948%" height="15" fill="rgb(228,72,33)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="463.50"></text></g><g><title>native_write_msr (5 samples, 0.29%)</title><rect x="99.7052%" y="437" width="0.2948%" height="15" fill="rgb(205,214,31)" fg:x="1691" fg:w="5"/><text x="99.9552%" y="447.50"></text></g></svg></svg>