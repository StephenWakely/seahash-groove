<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="789.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="4364"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.0000%" y="709" width="0.0229%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>[[heap]] (2 samples, 0.05%)</title><rect x="0.0000%" y="725" width="0.0458%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="0.0229%" y="709" width="0.0229%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2729%" y="719.50"></text></g><g><title>[[stack]] (1 samples, 0.02%)</title><rect x="0.0458%" y="725" width="0.0229%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.2958%" y="735.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible::collect_used_deps (1 samples, 0.02%)</title><rect x="0.0458%" y="709" width="0.0229%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.2958%" y="719.50"></text></g><g><title>[cargo] (1 samples, 0.02%)</title><rect x="0.0687%" y="725" width="0.0229%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.3187%" y="735.50"></text></g><g><title>clap::args::arg::Arg::value_name (1 samples, 0.02%)</title><rect x="0.0687%" y="709" width="0.0229%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.3187%" y="719.50"></text></g><g><title>&lt;toml::tokens::CrlfFold as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.0917%" y="709" width="0.0229%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="0.3417%" y="719.50"></text></g><g><title>ASN1_get_object (1 samples, 0.02%)</title><rect x="0.1146%" y="709" width="0.0229%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="1"/><text x="0.3646%" y="719.50"></text></g><g><title>__libc_start_main (1 samples, 0.02%)</title><rect x="0.1375%" y="709" width="0.0229%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="1"/><text x="0.3875%" y="719.50"></text></g><g><title>main (1 samples, 0.02%)</title><rect x="0.1375%" y="693" width="0.0229%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1"/><text x="0.3875%" y="703.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.02%)</title><rect x="0.1375%" y="677" width="0.0229%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="1"/><text x="0.3875%" y="687.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.02%)</title><rect x="0.1375%" y="661" width="0.0229%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="1"/><text x="0.3875%" y="671.50"></text></g><g><title>std::panicking::try (1 samples, 0.02%)</title><rect x="0.1375%" y="645" width="0.0229%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="1"/><text x="0.3875%" y="655.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.02%)</title><rect x="0.1375%" y="629" width="0.0229%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="1"/><text x="0.3875%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.02%)</title><rect x="0.1375%" y="613" width="0.0229%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="0.3875%" y="623.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (1 samples, 0.02%)</title><rect x="0.1375%" y="597" width="0.0229%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="0.3875%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.02%)</title><rect x="0.1375%" y="581" width="0.0229%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.3875%" y="591.50"></text></g><g><title>cargo::main (1 samples, 0.02%)</title><rect x="0.1375%" y="565" width="0.0229%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.3875%" y="575.50"></text></g><g><title>cargo::cli::main (1 samples, 0.02%)</title><rect x="0.1375%" y="549" width="0.0229%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="0.3875%" y="559.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (1 samples, 0.02%)</title><rect x="0.1375%" y="533" width="0.0229%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="0.3875%" y="543.50"></text></g><g><title>cargo::ops::registry::http_proxy (1 samples, 0.02%)</title><rect x="0.1375%" y="517" width="0.0229%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="0.3875%" y="527.50"></text></g><g><title>git2::config::Config::open_default (1 samples, 0.02%)</title><rect x="0.1375%" y="501" width="0.0229%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="0.3875%" y="511.50"></text></g><g><title>libgit2_sys::init (1 samples, 0.02%)</title><rect x="0.1375%" y="485" width="0.0229%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="0.3875%" y="495.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.02%)</title><rect x="0.1375%" y="469" width="0.0229%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.3875%" y="479.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (1 samples, 0.02%)</title><rect x="0.1375%" y="453" width="0.0229%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="0.3875%" y="463.50"></text></g><g><title>git_runtime_init (1 samples, 0.02%)</title><rect x="0.1375%" y="437" width="0.0229%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="0.3875%" y="447.50"></text></g><g><title>git_openssl_stream_global_init (1 samples, 0.02%)</title><rect x="0.1375%" y="421" width="0.0229%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="0.3875%" y="431.50"></text></g><g><title>X509_STORE_set_default_paths (1 samples, 0.02%)</title><rect x="0.1375%" y="405" width="0.0229%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="1"/><text x="0.3875%" y="415.50"></text></g><g><title>by_file_ctrl (1 samples, 0.02%)</title><rect x="0.1375%" y="389" width="0.0229%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="1"/><text x="0.3875%" y="399.50"></text></g><g><title>X509_load_cert_crl_file (1 samples, 0.02%)</title><rect x="0.1375%" y="373" width="0.0229%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="1"/><text x="0.3875%" y="383.50"></text></g><g><title>PEM_X509_INFO_read_bio (1 samples, 0.02%)</title><rect x="0.1375%" y="357" width="0.0229%" height="15" fill="rgb(229,88,8)" fg:x="6" fg:w="1"/><text x="0.3875%" y="367.50"></text></g><g><title>ASN1_item_d2i (1 samples, 0.02%)</title><rect x="0.1375%" y="341" width="0.0229%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="1"/><text x="0.3875%" y="351.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="0.1375%" y="325" width="0.0229%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="1"/><text x="0.3875%" y="335.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.02%)</title><rect x="0.1375%" y="309" width="0.0229%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="1"/><text x="0.3875%" y="319.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.02%)</title><rect x="0.1375%" y="293" width="0.0229%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="1"/><text x="0.3875%" y="303.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="0.1375%" y="277" width="0.0229%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="1"/><text x="0.3875%" y="287.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.02%)</title><rect x="0.1375%" y="261" width="0.0229%" height="15" fill="rgb(245,192,40)" fg:x="6" fg:w="1"/><text x="0.3875%" y="271.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.02%)</title><rect x="0.1375%" y="245" width="0.0229%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="1"/><text x="0.3875%" y="255.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="0.1375%" y="229" width="0.0229%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="1"/><text x="0.3875%" y="239.50"></text></g><g><title>x509_name_ex_d2i (1 samples, 0.02%)</title><rect x="0.1375%" y="213" width="0.0229%" height="15" fill="rgb(231,60,39)" fg:x="6" fg:w="1"/><text x="0.3875%" y="223.50"></text></g><g><title>x509_name_canon (1 samples, 0.02%)</title><rect x="0.1375%" y="197" width="0.0229%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="1"/><text x="0.3875%" y="207.50"></text></g><g><title>ASN1_item_ex_i2d (1 samples, 0.02%)</title><rect x="0.1375%" y="181" width="0.0229%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="1"/><text x="0.3875%" y="191.50"></text></g><g><title>asn1_template_ex_i2d (1 samples, 0.02%)</title><rect x="0.1375%" y="165" width="0.0229%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="1"/><text x="0.3875%" y="175.50"></text></g><g><title>ASN1_item_ex_i2d (1 samples, 0.02%)</title><rect x="0.1375%" y="149" width="0.0229%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="1"/><text x="0.3875%" y="159.50"></text></g><g><title>asn1_template_ex_i2d (1 samples, 0.02%)</title><rect x="0.1375%" y="133" width="0.0229%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="1"/><text x="0.3875%" y="143.50"></text></g><g><title>ASN1_item_ex_i2d (1 samples, 0.02%)</title><rect x="0.1375%" y="117" width="0.0229%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="1"/><text x="0.3875%" y="127.50"></text></g><g><title>asn1_i2d_ex_primitive (1 samples, 0.02%)</title><rect x="0.1375%" y="101" width="0.0229%" height="15" fill="rgb(250,191,14)" fg:x="6" fg:w="1"/><text x="0.3875%" y="111.50"></text></g><g><title>asn1_ex_i2c (1 samples, 0.02%)</title><rect x="0.1375%" y="85" width="0.0229%" height="15" fill="rgb(239,60,40)" fg:x="6" fg:w="1"/><text x="0.3875%" y="95.50"></text></g><g><title>cargo::cli::main (1 samples, 0.02%)</title><rect x="0.1604%" y="709" width="0.0229%" height="15" fill="rgb(206,27,48)" fg:x="7" fg:w="1"/><text x="0.4104%" y="719.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.02%)</title><rect x="0.1604%" y="693" width="0.0229%" height="15" fill="rgb(225,35,8)" fg:x="7" fg:w="1"/><text x="0.4104%" y="703.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (1 samples, 0.02%)</title><rect x="0.1604%" y="677" width="0.0229%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="1"/><text x="0.4104%" y="687.50"></text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 0.02%)</title><rect x="0.1604%" y="661" width="0.0229%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="1"/><text x="0.4104%" y="671.50"></text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 0.02%)</title><rect x="0.1604%" y="645" width="0.0229%" height="15" fill="rgb(231,138,38)" fg:x="7" fg:w="1"/><text x="0.4104%" y="655.50"></text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 0.02%)</title><rect x="0.1604%" y="629" width="0.0229%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="1"/><text x="0.4104%" y="639.50"></text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 0.02%)</title><rect x="0.1604%" y="613" width="0.0229%" height="15" fill="rgb(251,118,11)" fg:x="7" fg:w="1"/><text x="0.4104%" y="623.50"></text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 0.02%)</title><rect x="0.1604%" y="597" width="0.0229%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="1"/><text x="0.4104%" y="607.50"></text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 0.02%)</title><rect x="0.1604%" y="581" width="0.0229%" height="15" fill="rgb(247,81,37)" fg:x="7" fg:w="1"/><text x="0.4104%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.1604%" y="565" width="0.0229%" height="15" fill="rgb(209,12,38)" fg:x="7" fg:w="1"/><text x="0.4104%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.02%)</title><rect x="0.1604%" y="549" width="0.0229%" height="15" fill="rgb(227,1,9)" fg:x="7" fg:w="1"/><text x="0.4104%" y="559.50"></text></g><g><title>semver::impls::&lt;impl core::cmp::Ord for semver::BuildMetadata&gt;::cmp (1 samples, 0.02%)</title><rect x="0.1604%" y="533" width="0.0229%" height="15" fill="rgb(248,47,43)" fg:x="7" fg:w="1"/><text x="0.4104%" y="543.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.1604%" y="517" width="0.0229%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="1"/><text x="0.4104%" y="527.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.02%)</title><rect x="0.1833%" y="437" width="0.0229%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="1"/><text x="0.4333%" y="447.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (2 samples, 0.05%)</title><rect x="0.1833%" y="709" width="0.0458%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="2"/><text x="0.4333%" y="719.50"></text></g><g><title>cargo::core::resolver::activate (2 samples, 0.05%)</title><rect x="0.1833%" y="693" width="0.0458%" height="15" fill="rgb(234,67,33)" fg:x="8" fg:w="2"/><text x="0.4333%" y="703.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (2 samples, 0.05%)</title><rect x="0.1833%" y="677" width="0.0458%" height="15" fill="rgb(247,98,35)" fg:x="8" fg:w="2"/><text x="0.4333%" y="687.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.05%)</title><rect x="0.1833%" y="661" width="0.0458%" height="15" fill="rgb(247,138,52)" fg:x="8" fg:w="2"/><text x="0.4333%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.05%)</title><rect x="0.1833%" y="645" width="0.0458%" height="15" fill="rgb(213,79,30)" fg:x="8" fg:w="2"/><text x="0.4333%" y="655.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps::_{{closure}} (2 samples, 0.05%)</title><rect x="0.1833%" y="629" width="0.0458%" height="15" fill="rgb(246,177,23)" fg:x="8" fg:w="2"/><text x="0.4333%" y="639.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (2 samples, 0.05%)</title><rect x="0.1833%" y="613" width="0.0458%" height="15" fill="rgb(230,62,27)" fg:x="8" fg:w="2"/><text x="0.4333%" y="623.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (2 samples, 0.05%)</title><rect x="0.1833%" y="597" width="0.0458%" height="15" fill="rgb(216,154,8)" fg:x="8" fg:w="2"/><text x="0.4333%" y="607.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (2 samples, 0.05%)</title><rect x="0.1833%" y="581" width="0.0458%" height="15" fill="rgb(244,35,45)" fg:x="8" fg:w="2"/><text x="0.4333%" y="591.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (2 samples, 0.05%)</title><rect x="0.1833%" y="565" width="0.0458%" height="15" fill="rgb(251,115,12)" fg:x="8" fg:w="2"/><text x="0.4333%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.05%)</title><rect x="0.1833%" y="549" width="0.0458%" height="15" fill="rgb(240,54,50)" fg:x="8" fg:w="2"/><text x="0.4333%" y="559.50"></text></g><g><title>cargo::sources::registry::index::MaybeIndexSummary::parse (2 samples, 0.05%)</title><rect x="0.1833%" y="533" width="0.0458%" height="15" fill="rgb(233,84,52)" fg:x="8" fg:w="2"/><text x="0.4333%" y="543.50"></text></g><g><title>cargo::sources::registry::index::IndexSummary::parse (2 samples, 0.05%)</title><rect x="0.1833%" y="517" width="0.0458%" height="15" fill="rgb(207,117,47)" fg:x="8" fg:w="2"/><text x="0.4333%" y="527.50"></text></g><g><title>serde_json::de::from_slice (2 samples, 0.05%)</title><rect x="0.1833%" y="501" width="0.0458%" height="15" fill="rgb(249,43,39)" fg:x="8" fg:w="2"/><text x="0.4333%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.05%)</title><rect x="0.1833%" y="485" width="0.0458%" height="15" fill="rgb(209,38,44)" fg:x="8" fg:w="2"/><text x="0.4333%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (2 samples, 0.05%)</title><rect x="0.1833%" y="469" width="0.0458%" height="15" fill="rgb(236,212,23)" fg:x="8" fg:w="2"/><text x="0.4333%" y="479.50"></text></g><g><title>cargo::util::interning::InternedString::new (2 samples, 0.05%)</title><rect x="0.1833%" y="453" width="0.0458%" height="15" fill="rgb(242,79,21)" fg:x="8" fg:w="2"/><text x="0.4333%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="0.2062%" y="437" width="0.0229%" height="15" fill="rgb(211,96,35)" fg:x="9" fg:w="1"/><text x="0.4562%" y="447.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query::{{closure}} (1 samples, 0.02%)</title><rect x="0.2291%" y="533" width="0.0229%" height="15" fill="rgb(253,215,40)" fg:x="10" fg:w="1"/><text x="0.4791%" y="543.50"></text></g><g><title>cargo::core::registry::lock (1 samples, 0.02%)</title><rect x="0.2291%" y="517" width="0.0229%" height="15" fill="rgb(211,81,21)" fg:x="10" fg:w="1"/><text x="0.4791%" y="527.50"></text></g><g><title>cargo::core::summary::Summary::map_dependencies (1 samples, 0.02%)</title><rect x="0.2291%" y="501" width="0.0229%" height="15" fill="rgb(208,190,38)" fg:x="10" fg:w="1"/><text x="0.4791%" y="511.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.2291%" y="485" width="0.0229%" height="15" fill="rgb(235,213,38)" fg:x="10" fg:w="1"/><text x="0.4791%" y="495.50"></text></g><g><title>cargo::core::registry::lock::_{{closure}} (1 samples, 0.02%)</title><rect x="0.2291%" y="469" width="0.0229%" height="15" fill="rgb(237,122,38)" fg:x="10" fg:w="1"/><text x="0.4791%" y="479.50"></text></g><g><title>cargo::core::dependency::Dependency::lock_to (1 samples, 0.02%)</title><rect x="0.2291%" y="453" width="0.0229%" height="15" fill="rgb(244,218,35)" fg:x="10" fg:w="1"/><text x="0.4791%" y="463.50"></text></g><g><title>cargo::core::source::source_id::SourceId::with_precise (1 samples, 0.02%)</title><rect x="0.2291%" y="437" width="0.0229%" height="15" fill="rgb(240,68,47)" fg:x="10" fg:w="1"/><text x="0.4791%" y="447.50"></text></g><g><title>cargo::core::source::source_id::SourceId::wrap (1 samples, 0.02%)</title><rect x="0.2291%" y="421" width="0.0229%" height="15" fill="rgb(210,16,53)" fg:x="10" fg:w="1"/><text x="0.4791%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::core::source::source_id::SourceIdInner&gt; (1 samples, 0.02%)</title><rect x="0.2291%" y="405" width="0.0229%" height="15" fill="rgb(235,124,12)" fg:x="10" fg:w="1"/><text x="0.4791%" y="415.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="0.2291%" y="389" width="0.0229%" height="15" fill="rgb(224,169,11)" fg:x="10" fg:w="1"/><text x="0.4791%" y="399.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="0.2291%" y="373" width="0.0229%" height="15" fill="rgb(250,166,2)" fg:x="10" fg:w="1"/><text x="0.4791%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="0.2521%" y="533" width="0.0229%" height="15" fill="rgb(242,216,29)" fg:x="11" fg:w="1"/><text x="0.5021%" y="543.50"></text></g><g><title>cargo::sources::registry::index::MaybeIndexSummary::parse (1 samples, 0.02%)</title><rect x="0.2521%" y="517" width="0.0229%" height="15" fill="rgb(230,116,27)" fg:x="11" fg:w="1"/><text x="0.5021%" y="527.50"></text></g><g><title>cargo::sources::registry::index::IndexSummary::parse (1 samples, 0.02%)</title><rect x="0.2521%" y="501" width="0.0229%" height="15" fill="rgb(228,99,48)" fg:x="11" fg:w="1"/><text x="0.5021%" y="511.50"></text></g><g><title>cargo::core::summary::Summary::new (1 samples, 0.02%)</title><rect x="0.2521%" y="485" width="0.0229%" height="15" fill="rgb(253,11,6)" fg:x="11" fg:w="1"/><text x="0.5021%" y="495.50"></text></g><g><title>cargo::core::summary::build_feature_map (1 samples, 0.02%)</title><rect x="0.2521%" y="469" width="0.0229%" height="15" fill="rgb(247,143,39)" fg:x="11" fg:w="1"/><text x="0.5021%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="0.2521%" y="453" width="0.0229%" height="15" fill="rgb(236,97,10)" fg:x="11" fg:w="1"/><text x="0.5021%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.02%)</title><rect x="0.2521%" y="437" width="0.0229%" height="15" fill="rgb(233,208,19)" fg:x="11" fg:w="1"/><text x="0.5021%" y="447.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.02%)</title><rect x="0.2521%" y="421" width="0.0229%" height="15" fill="rgb(216,164,2)" fg:x="11" fg:w="1"/><text x="0.5021%" y="431.50"></text></g><g><title>cargo::core::resolver::resolve (3 samples, 0.07%)</title><rect x="0.2291%" y="709" width="0.0687%" height="15" fill="rgb(220,129,5)" fg:x="10" fg:w="3"/><text x="0.4791%" y="719.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (3 samples, 0.07%)</title><rect x="0.2291%" y="693" width="0.0687%" height="15" fill="rgb(242,17,10)" fg:x="10" fg:w="3"/><text x="0.4791%" y="703.50"></text></g><g><title>cargo::core::resolver::activate (3 samples, 0.07%)</title><rect x="0.2291%" y="677" width="0.0687%" height="15" fill="rgb(242,107,0)" fg:x="10" fg:w="3"/><text x="0.4791%" y="687.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (3 samples, 0.07%)</title><rect x="0.2291%" y="661" width="0.0687%" height="15" fill="rgb(251,28,31)" fg:x="10" fg:w="3"/><text x="0.4791%" y="671.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="0.2291%" y="645" width="0.0687%" height="15" fill="rgb(233,223,10)" fg:x="10" fg:w="3"/><text x="0.4791%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.07%)</title><rect x="0.2291%" y="629" width="0.0687%" height="15" fill="rgb(215,21,27)" fg:x="10" fg:w="3"/><text x="0.4791%" y="639.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps::_{{closure}} (3 samples, 0.07%)</title><rect x="0.2291%" y="613" width="0.0687%" height="15" fill="rgb(232,23,21)" fg:x="10" fg:w="3"/><text x="0.4791%" y="623.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (3 samples, 0.07%)</title><rect x="0.2291%" y="597" width="0.0687%" height="15" fill="rgb(244,5,23)" fg:x="10" fg:w="3"/><text x="0.4791%" y="607.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (3 samples, 0.07%)</title><rect x="0.2291%" y="581" width="0.0687%" height="15" fill="rgb(226,81,46)" fg:x="10" fg:w="3"/><text x="0.4791%" y="591.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (3 samples, 0.07%)</title><rect x="0.2291%" y="565" width="0.0687%" height="15" fill="rgb(247,70,30)" fg:x="10" fg:w="3"/><text x="0.4791%" y="575.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (3 samples, 0.07%)</title><rect x="0.2291%" y="549" width="0.0687%" height="15" fill="rgb(212,68,19)" fg:x="10" fg:w="3"/><text x="0.4791%" y="559.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::summaries (1 samples, 0.02%)</title><rect x="0.2750%" y="533" width="0.0229%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="1"/><text x="0.5250%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="0.2750%" y="517" width="0.0229%" height="15" fill="rgb(223,113,26)" fg:x="12" fg:w="1"/><text x="0.5250%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="0.2750%" y="501" width="0.0229%" height="15" fill="rgb(206,192,2)" fg:x="12" fg:w="1"/><text x="0.5250%" y="511.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="0.2750%" y="485" width="0.0229%" height="15" fill="rgb(241,108,4)" fg:x="12" fg:w="1"/><text x="0.5250%" y="495.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="0.2750%" y="469" width="0.0229%" height="15" fill="rgb(247,173,49)" fg:x="12" fg:w="1"/><text x="0.5250%" y="479.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="0.2750%" y="453" width="0.0229%" height="15" fill="rgb(224,114,35)" fg:x="12" fg:w="1"/><text x="0.5250%" y="463.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.02%)</title><rect x="0.2979%" y="677" width="0.0229%" height="15" fill="rgb(245,159,27)" fg:x="13" fg:w="1"/><text x="0.5479%" y="687.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (1 samples, 0.02%)</title><rect x="0.2979%" y="661" width="0.0229%" height="15" fill="rgb(245,172,44)" fg:x="13" fg:w="1"/><text x="0.5479%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::ops::resolve::WorkspaceResolve&gt; (1 samples, 0.02%)</title><rect x="0.2979%" y="645" width="0.0229%" height="15" fill="rgb(236,23,11)" fg:x="13" fg:w="1"/><text x="0.5479%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.2979%" y="629" width="0.0229%" height="15" fill="rgb(205,117,38)" fg:x="13" fg:w="1"/><text x="0.5479%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::sources::registry::RegistrySource&gt; (1 samples, 0.02%)</title><rect x="0.2979%" y="613" width="0.0229%" height="15" fill="rgb(237,72,25)" fg:x="13" fg:w="1"/><text x="0.5479%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.2979%" y="597" width="0.0229%" height="15" fill="rgb(244,70,9)" fg:x="13" fg:w="1"/><text x="0.5479%" y="607.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="0.2979%" y="581" width="0.0229%" height="15" fill="rgb(217,125,39)" fg:x="13" fg:w="1"/><text x="0.5479%" y="591.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="0.2979%" y="565" width="0.0229%" height="15" fill="rgb(235,36,10)" fg:x="13" fg:w="1"/><text x="0.5479%" y="575.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="0.2979%" y="549" width="0.0229%" height="15" fill="rgb(251,123,47)" fg:x="13" fg:w="1"/><text x="0.5479%" y="559.50"></text></g><g><title>cargo::main (2 samples, 0.05%)</title><rect x="0.2979%" y="709" width="0.0458%" height="15" fill="rgb(221,13,13)" fg:x="13" fg:w="2"/><text x="0.5479%" y="719.50"></text></g><g><title>cargo::cli::main (2 samples, 0.05%)</title><rect x="0.2979%" y="693" width="0.0458%" height="15" fill="rgb(238,131,9)" fg:x="13" fg:w="2"/><text x="0.5479%" y="703.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (1 samples, 0.02%)</title><rect x="0.3208%" y="677" width="0.0229%" height="15" fill="rgb(211,50,8)" fg:x="14" fg:w="1"/><text x="0.5708%" y="687.50"></text></g><g><title>cargo::ops::registry::http_proxy (1 samples, 0.02%)</title><rect x="0.3208%" y="661" width="0.0229%" height="15" fill="rgb(245,182,24)" fg:x="14" fg:w="1"/><text x="0.5708%" y="671.50"></text></g><g><title>git2::config::Config::open_default (1 samples, 0.02%)</title><rect x="0.3208%" y="645" width="0.0229%" height="15" fill="rgb(242,14,37)" fg:x="14" fg:w="1"/><text x="0.5708%" y="655.50"></text></g><g><title>libgit2_sys::init (1 samples, 0.02%)</title><rect x="0.3208%" y="629" width="0.0229%" height="15" fill="rgb(246,228,12)" fg:x="14" fg:w="1"/><text x="0.5708%" y="639.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.02%)</title><rect x="0.3208%" y="613" width="0.0229%" height="15" fill="rgb(213,55,15)" fg:x="14" fg:w="1"/><text x="0.5708%" y="623.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (1 samples, 0.02%)</title><rect x="0.3208%" y="597" width="0.0229%" height="15" fill="rgb(209,9,3)" fg:x="14" fg:w="1"/><text x="0.5708%" y="607.50"></text></g><g><title>git_runtime_init (1 samples, 0.02%)</title><rect x="0.3208%" y="581" width="0.0229%" height="15" fill="rgb(230,59,30)" fg:x="14" fg:w="1"/><text x="0.5708%" y="591.50"></text></g><g><title>git_openssl_stream_global_init (1 samples, 0.02%)</title><rect x="0.3208%" y="565" width="0.0229%" height="15" fill="rgb(209,121,21)" fg:x="14" fg:w="1"/><text x="0.5708%" y="575.50"></text></g><g><title>X509_STORE_set_default_paths (1 samples, 0.02%)</title><rect x="0.3208%" y="549" width="0.0229%" height="15" fill="rgb(220,109,13)" fg:x="14" fg:w="1"/><text x="0.5708%" y="559.50"></text></g><g><title>by_file_ctrl (1 samples, 0.02%)</title><rect x="0.3208%" y="533" width="0.0229%" height="15" fill="rgb(232,18,1)" fg:x="14" fg:w="1"/><text x="0.5708%" y="543.50"></text></g><g><title>X509_load_cert_crl_file (1 samples, 0.02%)</title><rect x="0.3208%" y="517" width="0.0229%" height="15" fill="rgb(215,41,42)" fg:x="14" fg:w="1"/><text x="0.5708%" y="527.50"></text></g><g><title>PEM_X509_INFO_read_bio (1 samples, 0.02%)</title><rect x="0.3208%" y="501" width="0.0229%" height="15" fill="rgb(224,123,36)" fg:x="14" fg:w="1"/><text x="0.5708%" y="511.50"></text></g><g><title>ASN1_item_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="485" width="0.0229%" height="15" fill="rgb(240,125,3)" fg:x="14" fg:w="1"/><text x="0.5708%" y="495.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="469" width="0.0229%" height="15" fill="rgb(205,98,50)" fg:x="14" fg:w="1"/><text x="0.5708%" y="479.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="453" width="0.0229%" height="15" fill="rgb(205,185,37)" fg:x="14" fg:w="1"/><text x="0.5708%" y="463.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="437" width="0.0229%" height="15" fill="rgb(238,207,15)" fg:x="14" fg:w="1"/><text x="0.5708%" y="447.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="421" width="0.0229%" height="15" fill="rgb(213,199,42)" fg:x="14" fg:w="1"/><text x="0.5708%" y="431.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="405" width="0.0229%" height="15" fill="rgb(235,201,11)" fg:x="14" fg:w="1"/><text x="0.5708%" y="415.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="389" width="0.0229%" height="15" fill="rgb(207,46,11)" fg:x="14" fg:w="1"/><text x="0.5708%" y="399.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="373" width="0.0229%" height="15" fill="rgb(241,35,35)" fg:x="14" fg:w="1"/><text x="0.5708%" y="383.50"></text></g><g><title>x509_name_ex_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="357" width="0.0229%" height="15" fill="rgb(243,32,47)" fg:x="14" fg:w="1"/><text x="0.5708%" y="367.50"></text></g><g><title>ASN1_item_ex_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="341" width="0.0229%" height="15" fill="rgb(247,202,23)" fg:x="14" fg:w="1"/><text x="0.5708%" y="351.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="325" width="0.0229%" height="15" fill="rgb(219,102,11)" fg:x="14" fg:w="1"/><text x="0.5708%" y="335.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="309" width="0.0229%" height="15" fill="rgb(243,110,44)" fg:x="14" fg:w="1"/><text x="0.5708%" y="319.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="293" width="0.0229%" height="15" fill="rgb(222,74,54)" fg:x="14" fg:w="1"/><text x="0.5708%" y="303.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="277" width="0.0229%" height="15" fill="rgb(216,99,12)" fg:x="14" fg:w="1"/><text x="0.5708%" y="287.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="261" width="0.0229%" height="15" fill="rgb(226,22,26)" fg:x="14" fg:w="1"/><text x="0.5708%" y="271.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="245" width="0.0229%" height="15" fill="rgb(217,163,10)" fg:x="14" fg:w="1"/><text x="0.5708%" y="255.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="229" width="0.0229%" height="15" fill="rgb(213,25,53)" fg:x="14" fg:w="1"/><text x="0.5708%" y="239.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="213" width="0.0229%" height="15" fill="rgb(252,105,26)" fg:x="14" fg:w="1"/><text x="0.5708%" y="223.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="197" width="0.0229%" height="15" fill="rgb(220,39,43)" fg:x="14" fg:w="1"/><text x="0.5708%" y="207.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="0.3208%" y="181" width="0.0229%" height="15" fill="rgb(229,68,48)" fg:x="14" fg:w="1"/><text x="0.5708%" y="191.50"></text></g><g><title>asn1_d2i_ex_primitive (1 samples, 0.02%)</title><rect x="0.3208%" y="165" width="0.0229%" height="15" fill="rgb(252,8,32)" fg:x="14" fg:w="1"/><text x="0.5708%" y="175.50"></text></g><g><title>cargo::ops::lockfile::load_pkg_lockfile (1 samples, 0.02%)</title><rect x="0.3437%" y="661" width="0.0229%" height="15" fill="rgb(223,20,43)" fg:x="15" fg:w="1"/><text x="0.5937%" y="671.50"></text></g><g><title>cargo::util::toml::parse (1 samples, 0.02%)</title><rect x="0.3437%" y="645" width="0.0229%" height="15" fill="rgb(229,81,49)" fg:x="15" fg:w="1"/><text x="0.5937%" y="655.50"></text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (1 samples, 0.02%)</title><rect x="0.3437%" y="629" width="0.0229%" height="15" fill="rgb(236,28,36)" fg:x="15" fg:w="1"/><text x="0.5937%" y="639.50"></text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.3437%" y="613" width="0.0229%" height="15" fill="rgb(249,185,26)" fg:x="15" fg:w="1"/><text x="0.5937%" y="623.50"></text></g><g><title>toml::de::Deserializer::tables (1 samples, 0.02%)</title><rect x="0.3437%" y="597" width="0.0229%" height="15" fill="rgb(249,174,33)" fg:x="15" fg:w="1"/><text x="0.5937%" y="607.50"></text></g><g><title>toml::tokens::Tokenizer::eat_spanned (1 samples, 0.02%)</title><rect x="0.3437%" y="581" width="0.0229%" height="15" fill="rgb(233,201,37)" fg:x="15" fg:w="1"/><text x="0.5937%" y="591.50"></text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 0.02%)</title><rect x="0.3437%" y="565" width="0.0229%" height="15" fill="rgb(221,78,26)" fg:x="15" fg:w="1"/><text x="0.5937%" y="575.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (2 samples, 0.05%)</title><rect x="0.3437%" y="709" width="0.0458%" height="15" fill="rgb(250,127,30)" fg:x="15" fg:w="2"/><text x="0.5937%" y="719.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (2 samples, 0.05%)</title><rect x="0.3437%" y="693" width="0.0458%" height="15" fill="rgb(230,49,44)" fg:x="15" fg:w="2"/><text x="0.5937%" y="703.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (2 samples, 0.05%)</title><rect x="0.3437%" y="677" width="0.0458%" height="15" fill="rgb(229,67,23)" fg:x="15" fg:w="2"/><text x="0.5937%" y="687.50"></text></g><g><title>cargo::ops::lockfile::write_pkg_lockfile (1 samples, 0.02%)</title><rect x="0.3666%" y="661" width="0.0229%" height="15" fill="rgb(249,83,47)" fg:x="16" fg:w="1"/><text x="0.6166%" y="671.50"></text></g><g><title>cargo::ops::lockfile::resolve_to_string_orig (1 samples, 0.02%)</title><rect x="0.3666%" y="645" width="0.0229%" height="15" fill="rgb(215,43,3)" fg:x="16" fg:w="1"/><text x="0.6166%" y="655.50"></text></g><g><title>cargo::ops::lockfile::serialize_resolve (1 samples, 0.02%)</title><rect x="0.3666%" y="629" width="0.0229%" height="15" fill="rgb(238,154,13)" fg:x="16" fg:w="1"/><text x="0.6166%" y="639.50"></text></g><g><title>cargo::core::resolver::encode::&lt;impl serde::ser::Serialize for cargo::core::resolver::resolve::Resolve&gt;::serialize (1 samples, 0.02%)</title><rect x="0.3666%" y="613" width="0.0229%" height="15" fill="rgb(219,56,2)" fg:x="16" fg:w="1"/><text x="0.6166%" y="623.50"></text></g><g><title>cargo::core::resolver::encode::EncodeState::new (1 samples, 0.02%)</title><rect x="0.3666%" y="597" width="0.0229%" height="15" fill="rgb(233,0,4)" fg:x="16" fg:w="1"/><text x="0.6166%" y="607.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.02%)</title><rect x="0.3666%" y="581" width="0.0229%" height="15" fill="rgb(235,30,7)" fg:x="16" fg:w="1"/><text x="0.6166%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="0.3666%" y="565" width="0.0229%" height="15" fill="rgb(250,79,13)" fg:x="16" fg:w="1"/><text x="0.6166%" y="575.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect x="0.3896%" y="581" width="0.0229%" height="15" fill="rgb(211,146,34)" fg:x="17" fg:w="1"/><text x="0.6396%" y="591.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.02%)</title><rect x="0.3896%" y="565" width="0.0229%" height="15" fill="rgb(228,22,38)" fg:x="17" fg:w="1"/><text x="0.6396%" y="575.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect x="0.4125%" y="581" width="0.0229%" height="15" fill="rgb(235,168,5)" fg:x="18" fg:w="1"/><text x="0.6625%" y="591.50"></text></g><g><title>&lt;toml::de::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.4125%" y="565" width="0.0229%" height="15" fill="rgb(221,155,16)" fg:x="18" fg:w="1"/><text x="0.6625%" y="575.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="0.4125%" y="549" width="0.0229%" height="15" fill="rgb(215,215,53)" fg:x="18" fg:w="1"/><text x="0.6625%" y="559.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.07%)</title><rect x="0.3896%" y="629" width="0.0687%" height="15" fill="rgb(223,4,10)" fg:x="17" fg:w="3"/><text x="0.6396%" y="639.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.07%)</title><rect x="0.3896%" y="613" width="0.0687%" height="15" fill="rgb(234,103,6)" fg:x="17" fg:w="3"/><text x="0.6396%" y="623.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.07%)</title><rect x="0.3896%" y="597" width="0.0687%" height="15" fill="rgb(227,97,0)" fg:x="17" fg:w="3"/><text x="0.6396%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.02%)</title><rect x="0.4354%" y="581" width="0.0229%" height="15" fill="rgb(234,150,53)" fg:x="19" fg:w="1"/><text x="0.6854%" y="591.50"></text></g><g><title>&lt;toml::tokens::CrlfFold as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.4583%" y="613" width="0.0229%" height="15" fill="rgb(228,201,54)" fg:x="20" fg:w="1"/><text x="0.7083%" y="623.50"></text></g><g><title>toml::de::Deserializer::dotted_key (1 samples, 0.02%)</title><rect x="0.4812%" y="613" width="0.0229%" height="15" fill="rgb(222,22,37)" fg:x="21" fg:w="1"/><text x="0.7312%" y="623.50"></text></g><g><title>toml::tokens::Tokenizer::table_key (1 samples, 0.02%)</title><rect x="0.4812%" y="597" width="0.0229%" height="15" fill="rgb(237,53,32)" fg:x="21" fg:w="1"/><text x="0.7312%" y="607.50"></text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 0.02%)</title><rect x="0.4812%" y="581" width="0.0229%" height="15" fill="rgb(233,25,53)" fg:x="21" fg:w="1"/><text x="0.7312%" y="591.50"></text></g><g><title>toml::de::Deserializer::value (2 samples, 0.05%)</title><rect x="0.5041%" y="613" width="0.0458%" height="15" fill="rgb(210,40,34)" fg:x="22" fg:w="2"/><text x="0.7541%" y="623.50"></text></g><g><title>toml::de::Deserializer::array::{{closure}} (2 samples, 0.05%)</title><rect x="0.5041%" y="597" width="0.0458%" height="15" fill="rgb(241,220,44)" fg:x="22" fg:w="2"/><text x="0.7541%" y="607.50"></text></g><g><title>toml::tokens::Tokenizer::eat_spanned (2 samples, 0.05%)</title><rect x="0.5041%" y="581" width="0.0458%" height="15" fill="rgb(235,28,35)" fg:x="22" fg:w="2"/><text x="0.7541%" y="591.50"></text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 0.02%)</title><rect x="0.5270%" y="565" width="0.0229%" height="15" fill="rgb(210,56,17)" fg:x="23" fg:w="1"/><text x="0.7770%" y="575.50"></text></g><g><title>toml::tokens::Tokenizer::read_string (1 samples, 0.02%)</title><rect x="0.5270%" y="549" width="0.0229%" height="15" fill="rgb(224,130,29)" fg:x="23" fg:w="1"/><text x="0.7770%" y="559.50"></text></g><g><title>toml::de::Deserializer::tables (5 samples, 0.11%)</title><rect x="0.4583%" y="629" width="0.1146%" height="15" fill="rgb(235,212,8)" fg:x="20" fg:w="5"/><text x="0.7083%" y="639.50"></text></g><g><title>toml::tokens::Tokenizer::eat_spanned (1 samples, 0.02%)</title><rect x="0.5500%" y="613" width="0.0229%" height="15" fill="rgb(223,33,50)" fg:x="24" fg:w="1"/><text x="0.8000%" y="623.50"></text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 0.02%)</title><rect x="0.5500%" y="597" width="0.0229%" height="15" fill="rgb(219,149,13)" fg:x="24" fg:w="1"/><text x="0.8000%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.02%)</title><rect x="0.5729%" y="613" width="0.0229%" height="15" fill="rgb(250,156,29)" fg:x="25" fg:w="1"/><text x="0.8229%" y="623.50"></text></g><g><title>cargo::ops::cargo_read_manifest::read_package (10 samples, 0.23%)</title><rect x="0.3896%" y="709" width="0.2291%" height="15" fill="rgb(216,193,19)" fg:x="17" fg:w="10"/><text x="0.6396%" y="719.50"></text></g><g><title>cargo::util::toml::read_manifest (10 samples, 0.23%)</title><rect x="0.3896%" y="693" width="0.2291%" height="15" fill="rgb(216,135,14)" fg:x="17" fg:w="10"/><text x="0.6396%" y="703.50"></text></g><g><title>cargo::util::toml::parse (10 samples, 0.23%)</title><rect x="0.3896%" y="677" width="0.2291%" height="15" fill="rgb(241,47,5)" fg:x="17" fg:w="10"/><text x="0.6396%" y="687.50"></text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (10 samples, 0.23%)</title><rect x="0.3896%" y="661" width="0.2291%" height="15" fill="rgb(233,42,35)" fg:x="17" fg:w="10"/><text x="0.6396%" y="671.50"></text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.23%)</title><rect x="0.3896%" y="645" width="0.2291%" height="15" fill="rgb(231,13,6)" fg:x="17" fg:w="10"/><text x="0.6396%" y="655.50"></text></g><g><title>toml::de::build_table_pindices (2 samples, 0.05%)</title><rect x="0.5729%" y="629" width="0.0458%" height="15" fill="rgb(207,181,40)" fg:x="25" fg:w="2"/><text x="0.8229%" y="639.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.02%)</title><rect x="0.5958%" y="613" width="0.0229%" height="15" fill="rgb(254,173,49)" fg:x="26" fg:w="1"/><text x="0.8458%" y="623.50"></text></g><g><title>cargo::ops::lockfile::load_pkg_lockfile (1 samples, 0.02%)</title><rect x="0.6187%" y="709" width="0.0229%" height="15" fill="rgb(221,1,38)" fg:x="27" fg:w="1"/><text x="0.8687%" y="719.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.6187%" y="693" width="0.0229%" height="15" fill="rgb(206,124,46)" fg:x="27" fg:w="1"/><text x="0.8687%" y="703.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.6187%" y="677" width="0.0229%" height="15" fill="rgb(249,21,11)" fg:x="27" fg:w="1"/><text x="0.8687%" y="687.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect x="0.6187%" y="661" width="0.0229%" height="15" fill="rgb(222,201,40)" fg:x="27" fg:w="1"/><text x="0.8687%" y="671.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.6187%" y="645" width="0.0229%" height="15" fill="rgb(235,61,29)" fg:x="27" fg:w="1"/><text x="0.8687%" y="655.50"></text></g><g><title>&lt;cargo::core::source::source_id::SourceId as serde::de::Deserialize&gt;::deserialize (1 samples, 0.02%)</title><rect x="0.6187%" y="629" width="0.0229%" height="15" fill="rgb(219,207,3)" fg:x="27" fg:w="1"/><text x="0.8687%" y="639.50"></text></g><g><title>cargo::core::source::source_id::SourceId::from_url (1 samples, 0.02%)</title><rect x="0.6187%" y="613" width="0.0229%" height="15" fill="rgb(222,56,46)" fg:x="27" fg:w="1"/><text x="0.8687%" y="623.50"></text></g><g><title>cargo::core::source::source_id::SourceId::new (1 samples, 0.02%)</title><rect x="0.6187%" y="597" width="0.0229%" height="15" fill="rgb(239,76,54)" fg:x="27" fg:w="1"/><text x="0.8687%" y="607.50"></text></g><g><title>cargo::util::canonical_url::CanonicalUrl::new (1 samples, 0.02%)</title><rect x="0.6187%" y="581" width="0.0229%" height="15" fill="rgb(231,124,27)" fg:x="27" fg:w="1"/><text x="0.8687%" y="591.50"></text></g><g><title>url::ParseOptions::parse (1 samples, 0.02%)</title><rect x="0.6187%" y="565" width="0.0229%" height="15" fill="rgb(249,195,6)" fg:x="27" fg:w="1"/><text x="0.8687%" y="575.50"></text></g><g><title>url::parser::Parser::parse_url (1 samples, 0.02%)</title><rect x="0.6187%" y="549" width="0.0229%" height="15" fill="rgb(237,174,47)" fg:x="27" fg:w="1"/><text x="0.8687%" y="559.50"></text></g><g><title>url::parser::Parser::after_double_slash (1 samples, 0.02%)</title><rect x="0.6187%" y="533" width="0.0229%" height="15" fill="rgb(206,201,31)" fg:x="27" fg:w="1"/><text x="0.8687%" y="543.50"></text></g><g><title>url::parser::Parser::parse_host (1 samples, 0.02%)</title><rect x="0.6187%" y="517" width="0.0229%" height="15" fill="rgb(231,57,52)" fg:x="27" fg:w="1"/><text x="0.8687%" y="527.50"></text></g><g><title>url::host::Host::parse (1 samples, 0.02%)</title><rect x="0.6187%" y="501" width="0.0229%" height="15" fill="rgb(248,177,22)" fg:x="27" fg:w="1"/><text x="0.8687%" y="511.50"></text></g><g><title>idna::domain_to_ascii (1 samples, 0.02%)</title><rect x="0.6187%" y="485" width="0.0229%" height="15" fill="rgb(215,211,37)" fg:x="27" fg:w="1"/><text x="0.8687%" y="495.50"></text></g><g><title>idna::uts46::Config::to_ascii (1 samples, 0.02%)</title><rect x="0.6187%" y="469" width="0.0229%" height="15" fill="rgb(241,128,51)" fg:x="27" fg:w="1"/><text x="0.8687%" y="479.50"></text></g><g><title>idna::uts46::processing (1 samples, 0.02%)</title><rect x="0.6187%" y="453" width="0.0229%" height="15" fill="rgb(227,165,31)" fg:x="27" fg:w="1"/><text x="0.8687%" y="463.50"></text></g><g><title>unicode_bidi::char_data::bidi_class (1 samples, 0.02%)</title><rect x="0.6187%" y="437" width="0.0229%" height="15" fill="rgb(228,167,24)" fg:x="27" fg:w="1"/><text x="0.8687%" y="447.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.02%)</title><rect x="0.6416%" y="709" width="0.0229%" height="15" fill="rgb(228,143,12)" fg:x="28" fg:w="1"/><text x="0.8916%" y="719.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.02%)</title><rect x="0.6416%" y="693" width="0.0229%" height="15" fill="rgb(249,149,8)" fg:x="28" fg:w="1"/><text x="0.8916%" y="703.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (1 samples, 0.02%)</title><rect x="0.6416%" y="677" width="0.0229%" height="15" fill="rgb(243,35,44)" fg:x="28" fg:w="1"/><text x="0.8916%" y="687.50"></text></g><g><title>cargo::core::resolver::activate (1 samples, 0.02%)</title><rect x="0.6416%" y="661" width="0.0229%" height="15" fill="rgb(246,89,9)" fg:x="28" fg:w="1"/><text x="0.8916%" y="671.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 0.02%)</title><rect x="0.6416%" y="645" width="0.0229%" height="15" fill="rgb(233,213,13)" fg:x="28" fg:w="1"/><text x="0.8916%" y="655.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="0.6416%" y="629" width="0.0229%" height="15" fill="rgb(233,141,41)" fg:x="28" fg:w="1"/><text x="0.8916%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="0.6416%" y="613" width="0.0229%" height="15" fill="rgb(239,167,4)" fg:x="28" fg:w="1"/><text x="0.8916%" y="623.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps::_{{closure}} (1 samples, 0.02%)</title><rect x="0.6416%" y="597" width="0.0229%" height="15" fill="rgb(209,217,16)" fg:x="28" fg:w="1"/><text x="0.8916%" y="607.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (1 samples, 0.02%)</title><rect x="0.6416%" y="581" width="0.0229%" height="15" fill="rgb(219,88,35)" fg:x="28" fg:w="1"/><text x="0.8916%" y="591.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 0.02%)</title><rect x="0.6416%" y="565" width="0.0229%" height="15" fill="rgb(220,193,23)" fg:x="28" fg:w="1"/><text x="0.8916%" y="575.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 0.02%)</title><rect x="0.6416%" y="549" width="0.0229%" height="15" fill="rgb(230,90,52)" fg:x="28" fg:w="1"/><text x="0.8916%" y="559.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (1 samples, 0.02%)</title><rect x="0.6416%" y="533" width="0.0229%" height="15" fill="rgb(252,106,19)" fg:x="28" fg:w="1"/><text x="0.8916%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.02%)</title><rect x="0.6416%" y="517" width="0.0229%" height="15" fill="rgb(206,74,20)" fg:x="28" fg:w="1"/><text x="0.8916%" y="527.50"></text></g><g><title>semver::VersionReq::matches (1 samples, 0.02%)</title><rect x="0.6416%" y="501" width="0.0229%" height="15" fill="rgb(230,138,44)" fg:x="28" fg:w="1"/><text x="0.8916%" y="511.50"></text></g><g><title>semver::eval::matches_impl (1 samples, 0.02%)</title><rect x="0.6416%" y="485" width="0.0229%" height="15" fill="rgb(235,182,43)" fg:x="28" fg:w="1"/><text x="0.8916%" y="495.50"></text></g><g><title>cargo::core::resolver::RemainingCandidates::next (1 samples, 0.02%)</title><rect x="0.6645%" y="629" width="0.0229%" height="15" fill="rgb(242,16,51)" fg:x="29" fg:w="1"/><text x="0.9145%" y="639.50"></text></g><g><title>im_rc::nodes::hamt::hash_key (1 samples, 0.02%)</title><rect x="0.6645%" y="613" width="0.0229%" height="15" fill="rgb(248,9,4)" fg:x="29" fg:w="1"/><text x="0.9145%" y="623.50"></text></g><g><title>&lt;cargo::core::resolver::context::SemverCompatibility as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="0.6645%" y="597" width="0.0229%" height="15" fill="rgb(210,31,22)" fg:x="29" fg:w="1"/><text x="0.9145%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="0.6645%" y="581" width="0.0229%" height="15" fill="rgb(239,54,39)" fg:x="29" fg:w="1"/><text x="0.9145%" y="591.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (2 samples, 0.05%)</title><rect x="0.6645%" y="709" width="0.0458%" height="15" fill="rgb(230,99,41)" fg:x="29" fg:w="2"/><text x="0.9145%" y="719.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (2 samples, 0.05%)</title><rect x="0.6645%" y="693" width="0.0458%" height="15" fill="rgb(253,106,12)" fg:x="29" fg:w="2"/><text x="0.9145%" y="703.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (2 samples, 0.05%)</title><rect x="0.6645%" y="677" width="0.0458%" height="15" fill="rgb(213,46,41)" fg:x="29" fg:w="2"/><text x="0.9145%" y="687.50"></text></g><g><title>cargo::core::resolver::resolve (2 samples, 0.05%)</title><rect x="0.6645%" y="661" width="0.0458%" height="15" fill="rgb(215,133,35)" fg:x="29" fg:w="2"/><text x="0.9145%" y="671.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (2 samples, 0.05%)</title><rect x="0.6645%" y="645" width="0.0458%" height="15" fill="rgb(213,28,5)" fg:x="29" fg:w="2"/><text x="0.9145%" y="655.50"></text></g><g><title>cargo::core::resolver::activate (1 samples, 0.02%)</title><rect x="0.6874%" y="629" width="0.0229%" height="15" fill="rgb(215,77,49)" fg:x="30" fg:w="1"/><text x="0.9374%" y="639.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 0.02%)</title><rect x="0.6874%" y="613" width="0.0229%" height="15" fill="rgb(248,100,22)" fg:x="30" fg:w="1"/><text x="0.9374%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.02%)</title><rect x="0.6874%" y="597" width="0.0229%" height="15" fill="rgb(208,67,9)" fg:x="30" fg:w="1"/><text x="0.9374%" y="607.50"></text></g><g><title>cargo::sources::registry::RegistryDependency::into_dep (1 samples, 0.02%)</title><rect x="0.7104%" y="709" width="0.0229%" height="15" fill="rgb(219,133,21)" fg:x="31" fg:w="1"/><text x="0.9604%" y="719.50"></text></g><g><title>cargo::util::toml::parse (1 samples, 0.02%)</title><rect x="0.7333%" y="709" width="0.0229%" height="15" fill="rgb(246,46,29)" fg:x="32" fg:w="1"/><text x="0.9833%" y="719.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.7562%" y="693" width="0.0229%" height="15" fill="rgb(246,185,52)" fg:x="33" fg:w="1"/><text x="1.0062%" y="703.50"></text></g><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::TomlManifest&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect x="0.7562%" y="677" width="0.0229%" height="15" fill="rgb(252,136,11)" fg:x="33" fg:w="1"/><text x="1.0062%" y="687.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect x="0.7562%" y="661" width="0.0229%" height="15" fill="rgb(219,138,53)" fg:x="33" fg:w="1"/><text x="1.0062%" y="671.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 0.02%)</title><rect x="0.7562%" y="645" width="0.0229%" height="15" fill="rgb(211,51,23)" fg:x="33" fg:w="1"/><text x="1.0062%" y="655.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.7562%" y="629" width="0.0229%" height="15" fill="rgb(247,221,28)" fg:x="33" fg:w="1"/><text x="1.0062%" y="639.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect x="0.7562%" y="613" width="0.0229%" height="15" fill="rgb(251,222,45)" fg:x="33" fg:w="1"/><text x="1.0062%" y="623.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.02%)</title><rect x="0.7562%" y="597" width="0.0229%" height="15" fill="rgb(217,162,53)" fg:x="33" fg:w="1"/><text x="1.0062%" y="607.50"></text></g><g><title>cargo::core::summary::Summary::new (1 samples, 0.02%)</title><rect x="0.7791%" y="677" width="0.0229%" height="15" fill="rgb(229,93,14)" fg:x="34" fg:w="1"/><text x="1.0291%" y="687.50"></text></g><g><title>cargo::core::summary::build_feature_map (1 samples, 0.02%)</title><rect x="0.7791%" y="661" width="0.0229%" height="15" fill="rgb(209,67,49)" fg:x="34" fg:w="1"/><text x="1.0291%" y="671.50"></text></g><g><title>unicode_xid::tables::derived_property::XID_Continue (1 samples, 0.02%)</title><rect x="0.7791%" y="645" width="0.0229%" height="15" fill="rgb(213,87,29)" fg:x="34" fg:w="1"/><text x="1.0291%" y="655.50"></text></g><g><title>cargo::util::toml::TomlManifest::to_real_manifest (3 samples, 0.07%)</title><rect x="0.7791%" y="693" width="0.0687%" height="15" fill="rgb(205,151,52)" fg:x="34" fg:w="3"/><text x="1.0291%" y="703.50"></text></g><g><title>cargo::util::toml::targets::targets (2 samples, 0.05%)</title><rect x="0.8020%" y="677" width="0.0458%" height="15" fill="rgb(253,215,39)" fg:x="35" fg:w="2"/><text x="1.0520%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="0.8249%" y="661" width="0.0229%" height="15" fill="rgb(221,220,41)" fg:x="36" fg:w="1"/><text x="1.0749%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="0.8249%" y="645" width="0.0229%" height="15" fill="rgb(218,133,21)" fg:x="36" fg:w="1"/><text x="1.0749%" y="655.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="0.8249%" y="629" width="0.0229%" height="15" fill="rgb(221,193,43)" fg:x="36" fg:w="1"/><text x="1.0749%" y="639.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="0.8249%" y="613" width="0.0229%" height="15" fill="rgb(240,128,52)" fg:x="36" fg:w="1"/><text x="1.0749%" y="623.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="0.8249%" y="597" width="0.0229%" height="15" fill="rgb(253,114,12)" fg:x="36" fg:w="1"/><text x="1.0749%" y="607.50"></text></g><g><title>[unknown] (34 samples, 0.78%)</title><rect x="0.0917%" y="725" width="0.7791%" height="15" fill="rgb(215,223,47)" fg:x="4" fg:w="34"/><text x="0.3417%" y="735.50"></text></g><g><title>cargo::util::toml::read_manifest (5 samples, 0.11%)</title><rect x="0.7562%" y="709" width="0.1146%" height="15" fill="rgb(248,225,23)" fg:x="33" fg:w="5"/><text x="1.0062%" y="719.50"></text></g><g><title>cargo::util::toml::parse (1 samples, 0.02%)</title><rect x="0.8478%" y="693" width="0.0229%" height="15" fill="rgb(250,108,0)" fg:x="37" fg:w="1"/><text x="1.0978%" y="703.50"></text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (1 samples, 0.02%)</title><rect x="0.8478%" y="677" width="0.0229%" height="15" fill="rgb(228,208,7)" fg:x="37" fg:w="1"/><text x="1.0978%" y="687.50"></text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.8478%" y="661" width="0.0229%" height="15" fill="rgb(244,45,10)" fg:x="37" fg:w="1"/><text x="1.0978%" y="671.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect x="0.8478%" y="645" width="0.0229%" height="15" fill="rgb(207,125,25)" fg:x="37" fg:w="1"/><text x="1.0978%" y="655.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect x="0.8478%" y="629" width="0.0229%" height="15" fill="rgb(210,195,18)" fg:x="37" fg:w="1"/><text x="1.0978%" y="639.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.02%)</title><rect x="0.8478%" y="613" width="0.0229%" height="15" fill="rgb(249,80,12)" fg:x="37" fg:w="1"/><text x="1.0978%" y="623.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.02%)</title><rect x="0.8478%" y="597" width="0.0229%" height="15" fill="rgb(221,65,9)" fg:x="37" fg:w="1"/><text x="1.0978%" y="607.50"></text></g><g><title>&lt;toml::de::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.8478%" y="581" width="0.0229%" height="15" fill="rgb(235,49,36)" fg:x="37" fg:w="1"/><text x="1.0978%" y="591.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.02%)</title><rect x="0.8478%" y="565" width="0.0229%" height="15" fill="rgb(225,32,20)" fg:x="37" fg:w="1"/><text x="1.0978%" y="575.50"></text></g><g><title>&lt;toml::de::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.02%)</title><rect x="0.8478%" y="549" width="0.0229%" height="15" fill="rgb(215,141,46)" fg:x="37" fg:w="1"/><text x="1.0978%" y="559.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="0.8478%" y="533" width="0.0229%" height="15" fill="rgb(250,160,47)" fg:x="37" fg:w="1"/><text x="1.0978%" y="543.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="0.8478%" y="517" width="0.0229%" height="15" fill="rgb(216,222,40)" fg:x="37" fg:w="1"/><text x="1.0978%" y="527.50"></text></g><g><title>CONF_module_add (1 samples, 0.02%)</title><rect x="0.8708%" y="501" width="0.0229%" height="15" fill="rgb(234,217,39)" fg:x="38" fg:w="1"/><text x="1.1208%" y="511.50"></text></g><g><title>module_add (1 samples, 0.02%)</title><rect x="0.8708%" y="485" width="0.0229%" height="15" fill="rgb(207,178,40)" fg:x="38" fg:w="1"/><text x="1.1208%" y="495.50"></text></g><g><title>OPENSSL_sk_push (1 samples, 0.02%)</title><rect x="0.8708%" y="469" width="0.0229%" height="15" fill="rgb(221,136,13)" fg:x="38" fg:w="1"/><text x="1.1208%" y="479.50"></text></g><g><title>sk_reserve (1 samples, 0.02%)</title><rect x="0.8708%" y="453" width="0.0229%" height="15" fill="rgb(249,199,10)" fg:x="38" fg:w="1"/><text x="1.1208%" y="463.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="0.8708%" y="437" width="0.0229%" height="15" fill="rgb(249,222,13)" fg:x="38" fg:w="1"/><text x="1.1208%" y="447.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="0.8708%" y="421" width="0.0229%" height="15" fill="rgb(244,185,38)" fg:x="38" fg:w="1"/><text x="1.1208%" y="431.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="0.8708%" y="405" width="0.0229%" height="15" fill="rgb(236,202,9)" fg:x="38" fg:w="1"/><text x="1.1208%" y="415.50"></text></g><g><title>__libc_csu_init (2 samples, 0.05%)</title><rect x="0.8708%" y="693" width="0.0458%" height="15" fill="rgb(250,229,37)" fg:x="38" fg:w="2"/><text x="1.1208%" y="703.50"></text></g><g><title>curl::init::init_inner (2 samples, 0.05%)</title><rect x="0.8708%" y="677" width="0.0458%" height="15" fill="rgb(206,174,23)" fg:x="38" fg:w="2"/><text x="1.1208%" y="687.50"></text></g><g><title>std::sync::once::Once::call_inner (2 samples, 0.05%)</title><rect x="0.8708%" y="661" width="0.0458%" height="15" fill="rgb(211,33,43)" fg:x="38" fg:w="2"/><text x="1.1208%" y="671.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (2 samples, 0.05%)</title><rect x="0.8708%" y="645" width="0.0458%" height="15" fill="rgb(245,58,50)" fg:x="38" fg:w="2"/><text x="1.1208%" y="655.50"></text></g><g><title>curl_global_init (2 samples, 0.05%)</title><rect x="0.8708%" y="629" width="0.0458%" height="15" fill="rgb(244,68,36)" fg:x="38" fg:w="2"/><text x="1.1208%" y="639.50"></text></g><g><title>ossl_init (2 samples, 0.05%)</title><rect x="0.8708%" y="613" width="0.0458%" height="15" fill="rgb(232,229,15)" fg:x="38" fg:w="2"/><text x="1.1208%" y="623.50"></text></g><g><title>OPENSSL_init_ssl (2 samples, 0.05%)</title><rect x="0.8708%" y="597" width="0.0458%" height="15" fill="rgb(254,30,23)" fg:x="38" fg:w="2"/><text x="1.1208%" y="607.50"></text></g><g><title>OPENSSL_init_crypto (2 samples, 0.05%)</title><rect x="0.8708%" y="581" width="0.0458%" height="15" fill="rgb(235,160,14)" fg:x="38" fg:w="2"/><text x="1.1208%" y="591.50"></text></g><g><title>CRYPTO_THREAD_run_once (2 samples, 0.05%)</title><rect x="0.8708%" y="565" width="0.0458%" height="15" fill="rgb(212,155,44)" fg:x="38" fg:w="2"/><text x="1.1208%" y="575.50"></text></g><g><title>__pthread_once_slow (2 samples, 0.05%)</title><rect x="0.8708%" y="549" width="0.0458%" height="15" fill="rgb(226,2,50)" fg:x="38" fg:w="2"/><text x="1.1208%" y="559.50"></text></g><g><title>ossl_init_config_ossl_ (2 samples, 0.05%)</title><rect x="0.8708%" y="533" width="0.0458%" height="15" fill="rgb(234,177,6)" fg:x="38" fg:w="2"/><text x="1.1208%" y="543.50"></text></g><g><title>openssl_config_int (2 samples, 0.05%)</title><rect x="0.8708%" y="517" width="0.0458%" height="15" fill="rgb(217,24,9)" fg:x="38" fg:w="2"/><text x="1.1208%" y="527.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.02%)</title><rect x="0.8937%" y="501" width="0.0229%" height="15" fill="rgb(220,13,46)" fg:x="39" fg:w="1"/><text x="1.1437%" y="511.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.02%)</title><rect x="0.8937%" y="485" width="0.0229%" height="15" fill="rgb(239,221,27)" fg:x="39" fg:w="1"/><text x="1.1437%" y="495.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.02%)</title><rect x="0.8937%" y="469" width="0.0229%" height="15" fill="rgb(222,198,25)" fg:x="39" fg:w="1"/><text x="1.1437%" y="479.50"></text></g><g><title>ossl_init_engine_rdrand_ossl_ (1 samples, 0.02%)</title><rect x="0.8937%" y="453" width="0.0229%" height="15" fill="rgb(211,99,13)" fg:x="39" fg:w="1"/><text x="1.1437%" y="463.50"></text></g><g><title>ERR_clear_error (1 samples, 0.02%)</title><rect x="0.8937%" y="437" width="0.0229%" height="15" fill="rgb(232,111,31)" fg:x="39" fg:w="1"/><text x="1.1437%" y="447.50"></text></g><g><title>ERR_get_state (1 samples, 0.02%)</title><rect x="0.8937%" y="421" width="0.0229%" height="15" fill="rgb(245,82,37)" fg:x="39" fg:w="1"/><text x="1.1437%" y="431.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.02%)</title><rect x="0.8937%" y="405" width="0.0229%" height="15" fill="rgb(227,149,46)" fg:x="39" fg:w="1"/><text x="1.1437%" y="415.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.02%)</title><rect x="0.8937%" y="389" width="0.0229%" height="15" fill="rgb(218,36,50)" fg:x="39" fg:w="1"/><text x="1.1437%" y="399.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.02%)</title><rect x="0.8937%" y="373" width="0.0229%" height="15" fill="rgb(226,80,48)" fg:x="39" fg:w="1"/><text x="1.1437%" y="383.50"></text></g><g><title>ossl_init_load_crypto_strings_ossl_ (1 samples, 0.02%)</title><rect x="0.8937%" y="357" width="0.0229%" height="15" fill="rgb(238,224,15)" fg:x="39" fg:w="1"/><text x="1.1437%" y="367.50"></text></g><g><title>err_load_crypto_strings_int (1 samples, 0.02%)</title><rect x="0.8937%" y="341" width="0.0229%" height="15" fill="rgb(241,136,10)" fg:x="39" fg:w="1"/><text x="1.1437%" y="351.50"></text></g><g><title>ERR_load_TS_strings (1 samples, 0.02%)</title><rect x="0.8937%" y="325" width="0.0229%" height="15" fill="rgb(208,32,45)" fg:x="39" fg:w="1"/><text x="1.1437%" y="335.50"></text></g><g><title>ERR_load_strings_const (1 samples, 0.02%)</title><rect x="0.8937%" y="309" width="0.0229%" height="15" fill="rgb(207,135,9)" fg:x="39" fg:w="1"/><text x="1.1437%" y="319.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 0.02%)</title><rect x="0.8937%" y="293" width="0.0229%" height="15" fill="rgb(206,86,44)" fg:x="39" fg:w="1"/><text x="1.1437%" y="303.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.02%)</title><rect x="0.9166%" y="533" width="0.0229%" height="15" fill="rgb(245,177,15)" fg:x="40" fg:w="1"/><text x="1.1666%" y="543.50"></text></g><g><title>cargo::core::shell::Shell::print_json (1 samples, 0.02%)</title><rect x="0.9166%" y="517" width="0.0229%" height="15" fill="rgb(206,64,50)" fg:x="40" fg:w="1"/><text x="1.1666%" y="527.50"></text></g><g><title>cargo::ops::cargo_output_metadata::_::&lt;impl serde::ser::Serialize for cargo::ops::cargo_output_metadata::ExportInfo&gt;::serialize (1 samples, 0.02%)</title><rect x="0.9166%" y="501" width="0.0229%" height="15" fill="rgb(234,36,40)" fg:x="40" fg:w="1"/><text x="1.1666%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.02%)</title><rect x="0.9166%" y="485" width="0.0229%" height="15" fill="rgb(213,64,8)" fg:x="40" fg:w="1"/><text x="1.1666%" y="495.50"></text></g><g><title>cargo::core::package::_::&lt;impl serde::ser::Serialize for cargo::core::package::SerializedPackage&gt;::serialize (1 samples, 0.02%)</title><rect x="0.9166%" y="469" width="0.0229%" height="15" fill="rgb(210,75,36)" fg:x="40" fg:w="1"/><text x="1.1666%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.02%)</title><rect x="0.9166%" y="453" width="0.0229%" height="15" fill="rgb(229,88,21)" fg:x="40" fg:w="1"/><text x="1.1666%" y="463.50"></text></g><g><title>&lt;cargo::core::dependency::Dependency as serde::ser::Serialize&gt;::serialize (1 samples, 0.02%)</title><rect x="0.9166%" y="437" width="0.0229%" height="15" fill="rgb(252,204,47)" fg:x="40" fg:w="1"/><text x="1.1666%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.02%)</title><rect x="0.9166%" y="421" width="0.0229%" height="15" fill="rgb(208,77,27)" fg:x="40" fg:w="1"/><text x="1.1666%" y="431.50"></text></g><g><title>asn1_item_embed_new (1 samples, 0.02%)</title><rect x="0.9395%" y="309" width="0.0229%" height="15" fill="rgb(221,76,26)" fg:x="41" fg:w="1"/><text x="1.1895%" y="319.50"></text></g><g><title>x509_cb (1 samples, 0.02%)</title><rect x="0.9395%" y="293" width="0.0229%" height="15" fill="rgb(225,139,18)" fg:x="41" fg:w="1"/><text x="1.1895%" y="303.50"></text></g><g><title>CRYPTO_new_ex_data (1 samples, 0.02%)</title><rect x="0.9395%" y="277" width="0.0229%" height="15" fill="rgb(230,137,11)" fg:x="41" fg:w="1"/><text x="1.1895%" y="287.50"></text></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.02%)</title><rect x="0.9395%" y="261" width="0.0229%" height="15" fill="rgb(212,28,1)" fg:x="41" fg:w="1"/><text x="1.1895%" y="271.50"></text></g><g><title>__GI___pthread_rwlock_unlock (1 samples, 0.02%)</title><rect x="0.9395%" y="245" width="0.0229%" height="15" fill="rgb(248,164,17)" fg:x="41" fg:w="1"/><text x="1.1895%" y="255.50"></text></g><g><title>ERR_set_mark (1 samples, 0.02%)</title><rect x="0.9624%" y="197" width="0.0229%" height="15" fill="rgb(222,171,42)" fg:x="42" fg:w="1"/><text x="1.2124%" y="207.50"></text></g><g><title>ERR_get_state (1 samples, 0.02%)</title><rect x="0.9624%" y="181" width="0.0229%" height="15" fill="rgb(243,84,45)" fg:x="42" fg:w="1"/><text x="1.2124%" y="191.50"></text></g><g><title>__GI___pthread_getspecific (1 samples, 0.02%)</title><rect x="0.9624%" y="165" width="0.0229%" height="15" fill="rgb(252,49,23)" fg:x="42" fg:w="1"/><text x="1.2124%" y="175.50"></text></g><g><title>pubkey_cb (2 samples, 0.05%)</title><rect x="0.9624%" y="213" width="0.0458%" height="15" fill="rgb(215,19,7)" fg:x="42" fg:w="2"/><text x="1.2124%" y="223.50"></text></g><g><title>x509_pubkey_decode (1 samples, 0.02%)</title><rect x="0.9853%" y="197" width="0.0229%" height="15" fill="rgb(238,81,41)" fg:x="43" fg:w="1"/><text x="1.2353%" y="207.50"></text></g><g><title>eckey_pub_decode (1 samples, 0.02%)</title><rect x="0.9853%" y="181" width="0.0229%" height="15" fill="rgb(210,199,37)" fg:x="43" fg:w="1"/><text x="1.2353%" y="191.50"></text></g><g><title>eckey_type2param (1 samples, 0.02%)</title><rect x="0.9853%" y="165" width="0.0229%" height="15" fill="rgb(244,192,49)" fg:x="43" fg:w="1"/><text x="1.2353%" y="175.50"></text></g><g><title>EC_GROUP_new_by_curve_name (1 samples, 0.02%)</title><rect x="0.9853%" y="149" width="0.0229%" height="15" fill="rgb(226,211,11)" fg:x="43" fg:w="1"/><text x="1.2353%" y="159.50"></text></g><g><title>EC_GROUP_new_curve_GFp (1 samples, 0.02%)</title><rect x="0.9853%" y="133" width="0.0229%" height="15" fill="rgb(236,162,54)" fg:x="43" fg:w="1"/><text x="1.2353%" y="143.50"></text></g><g><title>ec_GFp_mont_group_set_curve (1 samples, 0.02%)</title><rect x="0.9853%" y="117" width="0.0229%" height="15" fill="rgb(220,229,9)" fg:x="43" fg:w="1"/><text x="1.2353%" y="127.50"></text></g><g><title>BN_MONT_CTX_set (1 samples, 0.02%)</title><rect x="0.9853%" y="101" width="0.0229%" height="15" fill="rgb(250,87,22)" fg:x="43" fg:w="1"/><text x="1.2353%" y="111.50"></text></g><g><title>BN_mod_inverse (1 samples, 0.02%)</title><rect x="0.9853%" y="85" width="0.0229%" height="15" fill="rgb(239,43,17)" fg:x="43" fg:w="1"/><text x="1.2353%" y="95.50"></text></g><g><title>int_bn_mod_inverse (1 samples, 0.02%)</title><rect x="0.9853%" y="69" width="0.0229%" height="15" fill="rgb(231,177,25)" fg:x="43" fg:w="1"/><text x="1.2353%" y="79.50"></text></g><g><title>BN_rshift (1 samples, 0.02%)</title><rect x="0.9853%" y="53" width="0.0229%" height="15" fill="rgb(219,179,1)" fg:x="43" fg:w="1"/><text x="1.2353%" y="63.50"></text></g><g><title>bn_rshift_fixed_top (1 samples, 0.02%)</title><rect x="0.9853%" y="37" width="0.0229%" height="15" fill="rgb(238,219,53)" fg:x="43" fg:w="1"/><text x="1.2353%" y="47.50"></text></g><g><title>ASN1_item_d2i (4 samples, 0.09%)</title><rect x="0.9395%" y="341" width="0.0917%" height="15" fill="rgb(232,167,36)" fg:x="41" fg:w="4"/><text x="1.1895%" y="351.50"></text></g><g><title>asn1_item_embed_d2i (4 samples, 0.09%)</title><rect x="0.9395%" y="325" width="0.0917%" height="15" fill="rgb(244,19,51)" fg:x="41" fg:w="4"/><text x="1.1895%" y="335.50"></text></g><g><title>asn1_template_ex_d2i (3 samples, 0.07%)</title><rect x="0.9624%" y="309" width="0.0687%" height="15" fill="rgb(224,6,22)" fg:x="42" fg:w="3"/><text x="1.2124%" y="319.50"></text></g><g><title>asn1_template_noexp_d2i (3 samples, 0.07%)</title><rect x="0.9624%" y="293" width="0.0687%" height="15" fill="rgb(224,145,5)" fg:x="42" fg:w="3"/><text x="1.2124%" y="303.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.07%)</title><rect x="0.9624%" y="277" width="0.0687%" height="15" fill="rgb(234,130,49)" fg:x="42" fg:w="3"/><text x="1.2124%" y="287.50"></text></g><g><title>asn1_template_ex_d2i (3 samples, 0.07%)</title><rect x="0.9624%" y="261" width="0.0687%" height="15" fill="rgb(254,6,2)" fg:x="42" fg:w="3"/><text x="1.2124%" y="271.50"></text></g><g><title>asn1_template_noexp_d2i (3 samples, 0.07%)</title><rect x="0.9624%" y="245" width="0.0687%" height="15" fill="rgb(208,96,46)" fg:x="42" fg:w="3"/><text x="1.2124%" y="255.50"></text></g><g><title>asn1_item_embed_d2i (3 samples, 0.07%)</title><rect x="0.9624%" y="229" width="0.0687%" height="15" fill="rgb(239,3,39)" fg:x="42" fg:w="3"/><text x="1.2124%" y="239.50"></text></g><g><title>x509_name_ex_d2i (1 samples, 0.02%)</title><rect x="1.0082%" y="213" width="0.0229%" height="15" fill="rgb(233,210,1)" fg:x="44" fg:w="1"/><text x="1.2582%" y="223.50"></text></g><g><title>ASN1_item_ex_d2i (1 samples, 0.02%)</title><rect x="1.0082%" y="197" width="0.0229%" height="15" fill="rgb(244,137,37)" fg:x="44" fg:w="1"/><text x="1.2582%" y="207.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="1.0082%" y="181" width="0.0229%" height="15" fill="rgb(240,136,2)" fg:x="44" fg:w="1"/><text x="1.2582%" y="191.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.02%)</title><rect x="1.0082%" y="165" width="0.0229%" height="15" fill="rgb(239,18,37)" fg:x="44" fg:w="1"/><text x="1.2582%" y="175.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.02%)</title><rect x="1.0082%" y="149" width="0.0229%" height="15" fill="rgb(218,185,22)" fg:x="44" fg:w="1"/><text x="1.2582%" y="159.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.02%)</title><rect x="1.0082%" y="133" width="0.0229%" height="15" fill="rgb(225,218,4)" fg:x="44" fg:w="1"/><text x="1.2582%" y="143.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.02%)</title><rect x="1.0082%" y="117" width="0.0229%" height="15" fill="rgb(230,182,32)" fg:x="44" fg:w="1"/><text x="1.2582%" y="127.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.02%)</title><rect x="1.0082%" y="101" width="0.0229%" height="15" fill="rgb(242,56,43)" fg:x="44" fg:w="1"/><text x="1.2582%" y="111.50"></text></g><g><title>OPENSSL_sk_new_null (1 samples, 0.02%)</title><rect x="1.0082%" y="85" width="0.0229%" height="15" fill="rgb(233,99,24)" fg:x="44" fg:w="1"/><text x="1.2582%" y="95.50"></text></g><g><title>CRYPTO_zalloc (1 samples, 0.02%)</title><rect x="1.0082%" y="69" width="0.0229%" height="15" fill="rgb(234,209,42)" fg:x="44" fg:w="1"/><text x="1.2582%" y="79.50"></text></g><g><title>malloc@plt (1 samples, 0.02%)</title><rect x="1.0082%" y="53" width="0.0229%" height="15" fill="rgb(227,7,12)" fg:x="44" fg:w="1"/><text x="1.2582%" y="63.50"></text></g><g><title>BIO_free (1 samples, 0.02%)</title><rect x="1.0312%" y="325" width="0.0229%" height="15" fill="rgb(245,203,43)" fg:x="45" fg:w="1"/><text x="1.2812%" y="335.50"></text></g><g><title>mem_free (1 samples, 0.02%)</title><rect x="1.0312%" y="309" width="0.0229%" height="15" fill="rgb(238,205,33)" fg:x="45" fg:w="1"/><text x="1.2812%" y="319.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="1.0312%" y="293" width="0.0229%" height="15" fill="rgb(231,56,7)" fg:x="45" fg:w="1"/><text x="1.2812%" y="303.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="1.0312%" y="277" width="0.0229%" height="15" fill="rgb(244,186,29)" fg:x="45" fg:w="1"/><text x="1.2812%" y="287.50"></text></g><g><title>__libc_start_main (9 samples, 0.21%)</title><rect x="0.8708%" y="709" width="0.2062%" height="15" fill="rgb(234,111,31)" fg:x="38" fg:w="9"/><text x="1.1208%" y="719.50"></text></g><g><title>main (7 samples, 0.16%)</title><rect x="0.9166%" y="693" width="0.1604%" height="15" fill="rgb(241,149,10)" fg:x="40" fg:w="7"/><text x="1.1666%" y="703.50"></text></g><g><title>std::rt::lang_start_internal (7 samples, 0.16%)</title><rect x="0.9166%" y="677" width="0.1604%" height="15" fill="rgb(249,206,44)" fg:x="40" fg:w="7"/><text x="1.1666%" y="687.50"></text></g><g><title>std::panic::catch_unwind (7 samples, 0.16%)</title><rect x="0.9166%" y="661" width="0.1604%" height="15" fill="rgb(251,153,30)" fg:x="40" fg:w="7"/><text x="1.1666%" y="671.50"></text></g><g><title>std::panicking::try (7 samples, 0.16%)</title><rect x="0.9166%" y="645" width="0.1604%" height="15" fill="rgb(239,152,38)" fg:x="40" fg:w="7"/><text x="1.1666%" y="655.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.16%)</title><rect x="0.9166%" y="629" width="0.1604%" height="15" fill="rgb(249,139,47)" fg:x="40" fg:w="7"/><text x="1.1666%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (7 samples, 0.16%)</title><rect x="0.9166%" y="613" width="0.1604%" height="15" fill="rgb(244,64,35)" fg:x="40" fg:w="7"/><text x="1.1666%" y="623.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (7 samples, 0.16%)</title><rect x="0.9166%" y="597" width="0.1604%" height="15" fill="rgb(216,46,15)" fg:x="40" fg:w="7"/><text x="1.1666%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.16%)</title><rect x="0.9166%" y="581" width="0.1604%" height="15" fill="rgb(250,74,19)" fg:x="40" fg:w="7"/><text x="1.1666%" y="591.50"></text></g><g><title>cargo::main (7 samples, 0.16%)</title><rect x="0.9166%" y="565" width="0.1604%" height="15" fill="rgb(249,42,33)" fg:x="40" fg:w="7"/><text x="1.1666%" y="575.50"></text></g><g><title>cargo::cli::main (7 samples, 0.16%)</title><rect x="0.9166%" y="549" width="0.1604%" height="15" fill="rgb(242,149,17)" fg:x="40" fg:w="7"/><text x="1.1666%" y="559.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (6 samples, 0.14%)</title><rect x="0.9395%" y="533" width="0.1375%" height="15" fill="rgb(244,29,21)" fg:x="41" fg:w="6"/><text x="1.1895%" y="543.50"></text></g><g><title>cargo::ops::registry::http_proxy (6 samples, 0.14%)</title><rect x="0.9395%" y="517" width="0.1375%" height="15" fill="rgb(220,130,37)" fg:x="41" fg:w="6"/><text x="1.1895%" y="527.50"></text></g><g><title>git2::config::Config::open_default (6 samples, 0.14%)</title><rect x="0.9395%" y="501" width="0.1375%" height="15" fill="rgb(211,67,2)" fg:x="41" fg:w="6"/><text x="1.1895%" y="511.50"></text></g><g><title>libgit2_sys::init (6 samples, 0.14%)</title><rect x="0.9395%" y="485" width="0.1375%" height="15" fill="rgb(235,68,52)" fg:x="41" fg:w="6"/><text x="1.1895%" y="495.50"></text></g><g><title>std::sync::once::Once::call_inner (6 samples, 0.14%)</title><rect x="0.9395%" y="469" width="0.1375%" height="15" fill="rgb(246,142,3)" fg:x="41" fg:w="6"/><text x="1.1895%" y="479.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (6 samples, 0.14%)</title><rect x="0.9395%" y="453" width="0.1375%" height="15" fill="rgb(241,25,7)" fg:x="41" fg:w="6"/><text x="1.1895%" y="463.50"></text></g><g><title>git_runtime_init (6 samples, 0.14%)</title><rect x="0.9395%" y="437" width="0.1375%" height="15" fill="rgb(242,119,39)" fg:x="41" fg:w="6"/><text x="1.1895%" y="447.50"></text></g><g><title>git_openssl_stream_global_init (6 samples, 0.14%)</title><rect x="0.9395%" y="421" width="0.1375%" height="15" fill="rgb(241,98,45)" fg:x="41" fg:w="6"/><text x="1.1895%" y="431.50"></text></g><g><title>X509_STORE_set_default_paths (6 samples, 0.14%)</title><rect x="0.9395%" y="405" width="0.1375%" height="15" fill="rgb(254,28,30)" fg:x="41" fg:w="6"/><text x="1.1895%" y="415.50"></text></g><g><title>by_file_ctrl (6 samples, 0.14%)</title><rect x="0.9395%" y="389" width="0.1375%" height="15" fill="rgb(241,142,54)" fg:x="41" fg:w="6"/><text x="1.1895%" y="399.50"></text></g><g><title>X509_load_cert_crl_file (6 samples, 0.14%)</title><rect x="0.9395%" y="373" width="0.1375%" height="15" fill="rgb(222,85,15)" fg:x="41" fg:w="6"/><text x="1.1895%" y="383.50"></text></g><g><title>PEM_X509_INFO_read_bio (6 samples, 0.14%)</title><rect x="0.9395%" y="357" width="0.1375%" height="15" fill="rgb(210,85,47)" fg:x="41" fg:w="6"/><text x="1.1895%" y="367.50"></text></g><g><title>PEM_read_bio_ex (2 samples, 0.05%)</title><rect x="1.0312%" y="341" width="0.0458%" height="15" fill="rgb(224,206,25)" fg:x="45" fg:w="2"/><text x="1.2812%" y="351.50"></text></g><g><title>EVP_DecodeUpdate (1 samples, 0.02%)</title><rect x="1.0541%" y="325" width="0.0229%" height="15" fill="rgb(243,201,19)" fg:x="46" fg:w="1"/><text x="1.3041%" y="335.50"></text></g><g><title>cargo (48 samples, 1.10%)</title><rect x="0.0000%" y="741" width="1.0999%" height="15" fill="rgb(236,59,4)" fg:x="0" fg:w="48"/><text x="0.2500%" y="751.50"></text></g><g><title>_start (10 samples, 0.23%)</title><rect x="0.8708%" y="725" width="0.2291%" height="15" fill="rgb(254,179,45)" fg:x="38" fg:w="10"/><text x="1.1208%" y="735.50"></text></g><g><title>_dl_start (1 samples, 0.02%)</title><rect x="1.0770%" y="709" width="0.0229%" height="15" fill="rgb(226,14,10)" fg:x="47" fg:w="1"/><text x="1.3270%" y="719.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.02%)</title><rect x="1.0770%" y="693" width="0.0229%" height="15" fill="rgb(244,27,41)" fg:x="47" fg:w="1"/><text x="1.3270%" y="703.50"></text></g><g><title>dl_main (1 samples, 0.02%)</title><rect x="1.0770%" y="677" width="0.0229%" height="15" fill="rgb(235,35,32)" fg:x="47" fg:w="1"/><text x="1.3270%" y="687.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.02%)</title><rect x="1.0770%" y="661" width="0.0229%" height="15" fill="rgb(218,68,31)" fg:x="47" fg:w="1"/><text x="1.3270%" y="671.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.02%)</title><rect x="1.0770%" y="645" width="0.0229%" height="15" fill="rgb(207,120,37)" fg:x="47" fg:w="1"/><text x="1.3270%" y="655.50"></text></g><g><title>do_lookup_x (1 samples, 0.02%)</title><rect x="1.0770%" y="629" width="0.0229%" height="15" fill="rgb(227,98,0)" fg:x="47" fg:w="1"/><text x="1.3270%" y="639.50"></text></g><g><title>check_match (1 samples, 0.02%)</title><rect x="1.0770%" y="613" width="0.0229%" height="15" fill="rgb(207,7,3)" fg:x="47" fg:w="1"/><text x="1.3270%" y="623.50"></text></g><g><title>strcmp (1 samples, 0.02%)</title><rect x="1.0770%" y="597" width="0.0229%" height="15" fill="rgb(206,98,19)" fg:x="47" fg:w="1"/><text x="1.3270%" y="607.50"></text></g><g><title>[[stack]] (1 samples, 0.02%)</title><rect x="1.0999%" y="725" width="0.0229%" height="15" fill="rgb(217,5,26)" fg:x="48" fg:w="1"/><text x="1.3499%" y="735.50"></text></g><g><title>do_lookup_x (1 samples, 0.02%)</title><rect x="1.0999%" y="709" width="0.0229%" height="15" fill="rgb(235,190,38)" fg:x="48" fg:w="1"/><text x="1.3499%" y="719.50"></text></g><g><title>[gnuplot] (1 samples, 0.02%)</title><rect x="1.1228%" y="725" width="0.0229%" height="15" fill="rgb(247,86,24)" fg:x="49" fg:w="1"/><text x="1.3728%" y="735.50"></text></g><g><title>__libc_start_main (1 samples, 0.02%)</title><rect x="1.1228%" y="709" width="0.0229%" height="15" fill="rgb(205,101,16)" fg:x="49" fg:w="1"/><text x="1.3728%" y="719.50"></text></g><g><title>__GI_exit (1 samples, 0.02%)</title><rect x="1.1228%" y="693" width="0.0229%" height="15" fill="rgb(246,168,33)" fg:x="49" fg:w="1"/><text x="1.3728%" y="703.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.02%)</title><rect x="1.1228%" y="677" width="0.0229%" height="15" fill="rgb(231,114,1)" fg:x="49" fg:w="1"/><text x="1.3728%" y="687.50"></text></g><g><title>_dl_fini (1 samples, 0.02%)</title><rect x="1.1228%" y="661" width="0.0229%" height="15" fill="rgb(207,184,53)" fg:x="49" fg:w="1"/><text x="1.3728%" y="671.50"></text></g><g><title>_dl_sort_maps (1 samples, 0.02%)</title><rect x="1.1228%" y="645" width="0.0229%" height="15" fill="rgb(224,95,51)" fg:x="49" fg:w="1"/><text x="1.3728%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="1.1457%" y="725" width="0.0229%" height="15" fill="rgb(212,188,45)" fg:x="50" fg:w="1"/><text x="1.3957%" y="735.50"></text></g><g><title>find_derivation (1 samples, 0.02%)</title><rect x="1.1457%" y="709" width="0.0229%" height="15" fill="rgb(223,154,38)" fg:x="50" fg:w="1"/><text x="1.3957%" y="719.50"></text></g><g><title>__strcmp_avx2 (1 samples, 0.02%)</title><rect x="1.1457%" y="693" width="0.0229%" height="15" fill="rgb(251,22,52)" fg:x="50" fg:w="1"/><text x="1.3957%" y="703.50"></text></g><g><title>[libheif.so.1.12.0] (2 samples, 0.05%)</title><rect x="1.1687%" y="677" width="0.0458%" height="15" fill="rgb(229,209,22)" fg:x="51" fg:w="2"/><text x="1.4187%" y="687.50"></text></g><g><title>[libheif.so.1.12.0] (2 samples, 0.05%)</title><rect x="1.1687%" y="661" width="0.0458%" height="15" fill="rgb(234,138,34)" fg:x="51" fg:w="2"/><text x="1.4187%" y="671.50"></text></g><g><title>de265_init (2 samples, 0.05%)</title><rect x="1.1687%" y="645" width="0.0458%" height="15" fill="rgb(212,95,11)" fg:x="51" fg:w="2"/><text x="1.4187%" y="655.50"></text></g><g><title>init_scan_orders (2 samples, 0.05%)</title><rect x="1.1687%" y="629" width="0.0458%" height="15" fill="rgb(240,179,47)" fg:x="51" fg:w="2"/><text x="1.4187%" y="639.50"></text></g><g><title>_dl_start_user (3 samples, 0.07%)</title><rect x="1.1687%" y="725" width="0.0687%" height="15" fill="rgb(240,163,11)" fg:x="51" fg:w="3"/><text x="1.4187%" y="735.50"></text></g><g><title>_dl_init (3 samples, 0.07%)</title><rect x="1.1687%" y="709" width="0.0687%" height="15" fill="rgb(236,37,12)" fg:x="51" fg:w="3"/><text x="1.4187%" y="719.50"></text></g><g><title>call_init (3 samples, 0.07%)</title><rect x="1.1687%" y="693" width="0.0687%" height="15" fill="rgb(232,164,16)" fg:x="51" fg:w="3"/><text x="1.4187%" y="703.50"></text></g><g><title>[libwx_baseu-3.0.so.0.5.0] (1 samples, 0.02%)</title><rect x="1.2145%" y="677" width="0.0229%" height="15" fill="rgb(244,205,15)" fg:x="53" fg:w="1"/><text x="1.4645%" y="687.50"></text></g><g><title>wxGet_wxConvLocalPtr (1 samples, 0.02%)</title><rect x="1.2145%" y="661" width="0.0229%" height="15" fill="rgb(223,117,47)" fg:x="53" fg:w="1"/><text x="1.4645%" y="671.50"></text></g><g><title>wxCSConv::wxCSConv (1 samples, 0.02%)</title><rect x="1.2145%" y="645" width="0.0229%" height="15" fill="rgb(244,107,35)" fg:x="53" fg:w="1"/><text x="1.4645%" y="655.50"></text></g><g><title>wxCSConv::DoCreate (1 samples, 0.02%)</title><rect x="1.2145%" y="629" width="0.0229%" height="15" fill="rgb(205,140,8)" fg:x="53" fg:w="1"/><text x="1.4645%" y="639.50"></text></g><g><title>[libwx_baseu-3.0.so.0.5.0] (1 samples, 0.02%)</title><rect x="1.2145%" y="613" width="0.0229%" height="15" fill="rgb(228,84,46)" fg:x="53" fg:w="1"/><text x="1.4645%" y="623.50"></text></g><g><title>iconv_open (1 samples, 0.02%)</title><rect x="1.2145%" y="597" width="0.0229%" height="15" fill="rgb(254,188,9)" fg:x="53" fg:w="1"/><text x="1.4645%" y="607.50"></text></g><g><title>__GI___gconv_open (1 samples, 0.02%)</title><rect x="1.2145%" y="581" width="0.0229%" height="15" fill="rgb(206,112,54)" fg:x="53" fg:w="1"/><text x="1.4645%" y="591.50"></text></g><g><title>__gconv_find_transform (1 samples, 0.02%)</title><rect x="1.2145%" y="565" width="0.0229%" height="15" fill="rgb(216,84,49)" fg:x="53" fg:w="1"/><text x="1.4645%" y="575.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.02%)</title><rect x="1.2145%" y="549" width="0.0229%" height="15" fill="rgb(214,194,35)" fg:x="53" fg:w="1"/><text x="1.4645%" y="559.50"></text></g><g><title>__gconv_read_conf (1 samples, 0.02%)</title><rect x="1.2145%" y="533" width="0.0229%" height="15" fill="rgb(249,28,3)" fg:x="53" fg:w="1"/><text x="1.4645%" y="543.50"></text></g><g><title>add_module.constprop.0 (1 samples, 0.02%)</title><rect x="1.2145%" y="517" width="0.0229%" height="15" fill="rgb(222,56,52)" fg:x="53" fg:w="1"/><text x="1.4645%" y="527.50"></text></g><g><title>insert_module (1 samples, 0.02%)</title><rect x="1.2145%" y="501" width="0.0229%" height="15" fill="rgb(245,217,50)" fg:x="53" fg:w="1"/><text x="1.4645%" y="511.50"></text></g><g><title>__strcmp_avx2 (1 samples, 0.02%)</title><rect x="1.2145%" y="485" width="0.0229%" height="15" fill="rgb(213,201,24)" fg:x="53" fg:w="1"/><text x="1.4645%" y="495.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.02%)</title><rect x="1.2374%" y="597" width="0.0229%" height="15" fill="rgb(248,116,28)" fg:x="54" fg:w="1"/><text x="1.4874%" y="607.50"></text></g><g><title>_dl_new_object (1 samples, 0.02%)</title><rect x="1.2374%" y="581" width="0.0229%" height="15" fill="rgb(219,72,43)" fg:x="54" fg:w="1"/><text x="1.4874%" y="591.50"></text></g><g><title>memmove (1 samples, 0.02%)</title><rect x="1.2374%" y="565" width="0.0229%" height="15" fill="rgb(209,138,14)" fg:x="54" fg:w="1"/><text x="1.4874%" y="575.50"></text></g><g><title>_dl_name_match_p (1 samples, 0.02%)</title><rect x="1.2603%" y="597" width="0.0229%" height="15" fill="rgb(222,18,33)" fg:x="55" fg:w="1"/><text x="1.5103%" y="607.50"></text></g><g><title>_dl_map_object_deps (3 samples, 0.07%)</title><rect x="1.2374%" y="661" width="0.0687%" height="15" fill="rgb(213,199,7)" fg:x="54" fg:w="3"/><text x="1.4874%" y="671.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.07%)</title><rect x="1.2374%" y="645" width="0.0687%" height="15" fill="rgb(250,110,10)" fg:x="54" fg:w="3"/><text x="1.4874%" y="655.50"></text></g><g><title>openaux (3 samples, 0.07%)</title><rect x="1.2374%" y="629" width="0.0687%" height="15" fill="rgb(248,123,6)" fg:x="54" fg:w="3"/><text x="1.4874%" y="639.50"></text></g><g><title>_dl_map_object (3 samples, 0.07%)</title><rect x="1.2374%" y="613" width="0.0687%" height="15" fill="rgb(206,91,31)" fg:x="54" fg:w="3"/><text x="1.4874%" y="623.50"></text></g><g><title>strcmp (1 samples, 0.02%)</title><rect x="1.2832%" y="597" width="0.0229%" height="15" fill="rgb(211,154,13)" fg:x="56" fg:w="1"/><text x="1.5332%" y="607.50"></text></g><g><title>_dl_receive_error (1 samples, 0.02%)</title><rect x="1.3061%" y="661" width="0.0229%" height="15" fill="rgb(225,148,7)" fg:x="57" fg:w="1"/><text x="1.5561%" y="671.50"></text></g><g><title>version_check_doit (1 samples, 0.02%)</title><rect x="1.3061%" y="645" width="0.0229%" height="15" fill="rgb(220,160,43)" fg:x="57" fg:w="1"/><text x="1.5561%" y="655.50"></text></g><g><title>_dl_check_all_versions (1 samples, 0.02%)</title><rect x="1.3061%" y="629" width="0.0229%" height="15" fill="rgb(213,52,39)" fg:x="57" fg:w="1"/><text x="1.5561%" y="639.50"></text></g><g><title>_dl_check_map_versions (1 samples, 0.02%)</title><rect x="1.3061%" y="613" width="0.0229%" height="15" fill="rgb(243,137,7)" fg:x="57" fg:w="1"/><text x="1.5561%" y="623.50"></text></g><g><title>gnuplot (38 samples, 0.87%)</title><rect x="1.0999%" y="741" width="0.8708%" height="15" fill="rgb(230,79,13)" fg:x="48" fg:w="38"/><text x="1.3499%" y="751.50"></text></g><g><title>_start (32 samples, 0.73%)</title><rect x="1.2374%" y="725" width="0.7333%" height="15" fill="rgb(247,105,23)" fg:x="54" fg:w="32"/><text x="1.4874%" y="735.50"></text></g><g><title>_dl_start (32 samples, 0.73%)</title><rect x="1.2374%" y="709" width="0.7333%" height="15" fill="rgb(223,179,41)" fg:x="54" fg:w="32"/><text x="1.4874%" y="719.50"></text></g><g><title>_dl_sysdep_start (32 samples, 0.73%)</title><rect x="1.2374%" y="693" width="0.7333%" height="15" fill="rgb(218,9,34)" fg:x="54" fg:w="32"/><text x="1.4874%" y="703.50"></text></g><g><title>dl_main (32 samples, 0.73%)</title><rect x="1.2374%" y="677" width="0.7333%" height="15" fill="rgb(222,106,8)" fg:x="54" fg:w="32"/><text x="1.4874%" y="687.50"></text></g><g><title>_dl_relocate_object (28 samples, 0.64%)</title><rect x="1.3291%" y="661" width="0.6416%" height="15" fill="rgb(211,220,0)" fg:x="58" fg:w="28"/><text x="1.5791%" y="671.50"></text></g><g><title>_dl_lookup_symbol_x (26 samples, 0.60%)</title><rect x="1.3749%" y="645" width="0.5958%" height="15" fill="rgb(229,52,16)" fg:x="60" fg:w="26"/><text x="1.6249%" y="655.50"></text></g><g><title>do_lookup_x (23 samples, 0.53%)</title><rect x="1.4436%" y="629" width="0.5270%" height="15" fill="rgb(212,155,18)" fg:x="63" fg:w="23"/><text x="1.6936%" y="639.50"></text></g><g><title>check_match (2 samples, 0.05%)</title><rect x="1.9248%" y="613" width="0.0458%" height="15" fill="rgb(242,21,14)" fg:x="84" fg:w="2"/><text x="2.1748%" y="623.50"></text></g><g><title>strcmp (1 samples, 0.02%)</title><rect x="1.9478%" y="597" width="0.0229%" height="15" fill="rgb(222,19,48)" fg:x="85" fg:w="1"/><text x="2.1978%" y="607.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (7 samples, 0.16%)</title><rect x="2.0165%" y="709" width="0.1604%" height="15" fill="rgb(232,45,27)" fg:x="88" fg:w="7"/><text x="2.2665%" y="719.50"></text></g><g><title>[time-6dd2e4e788d06c76] (1 samples, 0.02%)</title><rect x="2.1769%" y="709" width="0.0229%" height="15" fill="rgb(249,103,42)" fg:x="95" fg:w="1"/><text x="2.4269%" y="719.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="2.1769%" y="693" width="0.0229%" height="15" fill="rgb(246,81,33)" fg:x="95" fg:w="1"/><text x="2.4269%" y="703.50"></text></g><g><title>__GI___libc_free (10 samples, 0.23%)</title><rect x="2.1998%" y="709" width="0.2291%" height="15" fill="rgb(252,33,42)" fg:x="96" fg:w="10"/><text x="2.4498%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="2.4290%" y="709" width="0.0229%" height="15" fill="rgb(209,212,41)" fg:x="106" fg:w="1"/><text x="2.6790%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="2.4519%" y="709" width="0.0229%" height="15" fill="rgb(207,154,6)" fg:x="107" fg:w="1"/><text x="2.7019%" y="719.50"></text></g><g><title>alloc::string::String::with_capacity (7 samples, 0.16%)</title><rect x="2.6352%" y="693" width="0.1604%" height="15" fill="rgb(223,64,47)" fg:x="115" fg:w="7"/><text x="2.8852%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.16%)</title><rect x="2.6352%" y="677" width="0.1604%" height="15" fill="rgb(211,161,38)" fg:x="115" fg:w="7"/><text x="2.8852%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.16%)</title><rect x="2.6352%" y="661" width="0.1604%" height="15" fill="rgb(219,138,40)" fg:x="115" fg:w="7"/><text x="2.8852%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.16%)</title><rect x="2.6352%" y="645" width="0.1604%" height="15" fill="rgb(241,228,46)" fg:x="115" fg:w="7"/><text x="2.8852%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.16%)</title><rect x="2.6352%" y="629" width="0.1604%" height="15" fill="rgb(223,209,38)" fg:x="115" fg:w="7"/><text x="2.8852%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.16%)</title><rect x="2.6352%" y="613" width="0.1604%" height="15" fill="rgb(236,164,45)" fg:x="115" fg:w="7"/><text x="2.8852%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.16%)</title><rect x="2.6352%" y="597" width="0.1604%" height="15" fill="rgb(231,15,5)" fg:x="115" fg:w="7"/><text x="2.8852%" y="607.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.16%)</title><rect x="2.6352%" y="581" width="0.1604%" height="15" fill="rgb(252,35,15)" fg:x="115" fg:w="7"/><text x="2.8852%" y="591.50"></text></g><g><title>alloc::fmt::format (21 samples, 0.48%)</title><rect x="2.4748%" y="709" width="0.4812%" height="15" fill="rgb(248,181,18)" fg:x="108" fg:w="21"/><text x="2.7248%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.16%)</title><rect x="2.7956%" y="693" width="0.1604%" height="15" fill="rgb(233,39,42)" fg:x="122" fg:w="7"/><text x="3.0456%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="2.9560%" y="709" width="0.0229%" height="15" fill="rgb(238,110,33)" fg:x="129" fg:w="1"/><text x="3.2060%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="2.9560%" y="693" width="0.0229%" height="15" fill="rgb(233,195,10)" fg:x="129" fg:w="1"/><text x="3.2060%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="2.9560%" y="677" width="0.0229%" height="15" fill="rgb(254,105,3)" fg:x="129" fg:w="1"/><text x="3.2060%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="2.9560%" y="661" width="0.0229%" height="15" fill="rgb(221,225,9)" fg:x="129" fg:w="1"/><text x="3.2060%" y="671.50"></text></g><g><title>[[heap]] (45 samples, 1.03%)</title><rect x="2.0165%" y="725" width="1.0312%" height="15" fill="rgb(224,227,45)" fg:x="88" fg:w="45"/><text x="2.2665%" y="735.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.07%)</title><rect x="2.9789%" y="709" width="0.0687%" height="15" fill="rgb(229,198,43)" fg:x="130" fg:w="3"/><text x="3.2289%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.11%)</title><rect x="3.0477%" y="709" width="0.1146%" height="15" fill="rgb(206,209,35)" fg:x="133" fg:w="5"/><text x="3.2977%" y="719.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="3.1622%" y="709" width="0.0458%" height="15" fill="rgb(245,195,53)" fg:x="138" fg:w="2"/><text x="3.4122%" y="719.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_u8 (2 samples, 0.05%)</title><rect x="3.2081%" y="709" width="0.0458%" height="15" fill="rgb(240,92,26)" fg:x="140" fg:w="2"/><text x="3.4581%" y="719.50"></text></g><g><title>__GI___libc_free (7 samples, 0.16%)</title><rect x="3.2539%" y="709" width="0.1604%" height="15" fill="rgb(207,40,23)" fg:x="142" fg:w="7"/><text x="3.5039%" y="719.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="3.4143%" y="709" width="0.0229%" height="15" fill="rgb(223,111,35)" fg:x="149" fg:w="1"/><text x="3.6643%" y="719.50"></text></g><g><title>__GI___libc_realloc (20 samples, 0.46%)</title><rect x="3.4372%" y="709" width="0.4583%" height="15" fill="rgb(229,147,28)" fg:x="150" fg:w="20"/><text x="3.6872%" y="719.50"></text></g><g><title>__rdl_realloc (10 samples, 0.23%)</title><rect x="3.8955%" y="709" width="0.2291%" height="15" fill="rgb(211,29,28)" fg:x="170" fg:w="10"/><text x="4.1455%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (10 samples, 0.23%)</title><rect x="3.8955%" y="693" width="0.2291%" height="15" fill="rgb(228,72,33)" fg:x="170" fg:w="10"/><text x="4.1455%" y="703.50"></text></g><g><title>_int_malloc (30 samples, 0.69%)</title><rect x="4.1247%" y="709" width="0.6874%" height="15" fill="rgb(205,214,31)" fg:x="180" fg:w="30"/><text x="4.3747%" y="719.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.05%)</title><rect x="4.8121%" y="709" width="0.0458%" height="15" fill="rgb(224,111,15)" fg:x="210" fg:w="2"/><text x="5.0621%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.16%)</title><rect x="4.8579%" y="709" width="0.1604%" height="15" fill="rgb(253,21,26)" fg:x="212" fg:w="7"/><text x="5.1079%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.14%)</title><rect x="4.8808%" y="693" width="0.1375%" height="15" fill="rgb(245,139,43)" fg:x="213" fg:w="6"/><text x="5.1308%" y="703.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.14%)</title><rect x="4.8808%" y="677" width="0.1375%" height="15" fill="rgb(252,170,7)" fg:x="213" fg:w="6"/><text x="5.1308%" y="687.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.14%)</title><rect x="4.8808%" y="661" width="0.1375%" height="15" fill="rgb(231,118,14)" fg:x="213" fg:w="6"/><text x="5.1308%" y="671.50"></text></g><g><title>core::fmt::Formatter::pad_integral (4 samples, 0.09%)</title><rect x="5.0183%" y="709" width="0.0917%" height="15" fill="rgb(238,83,0)" fg:x="219" fg:w="4"/><text x="5.2683%" y="719.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (6 samples, 0.14%)</title><rect x="5.1100%" y="709" width="0.1375%" height="15" fill="rgb(221,39,39)" fg:x="223" fg:w="6"/><text x="5.3600%" y="719.50"></text></g><g><title>groove::file::File::add_index (35 samples, 0.80%)</title><rect x="5.2475%" y="709" width="0.8020%" height="15" fill="rgb(222,119,46)" fg:x="229" fg:w="35"/><text x="5.4975%" y="719.50"></text></g><g><title>[[stack]] (132 samples, 3.02%)</title><rect x="3.0477%" y="725" width="3.0247%" height="15" fill="rgb(222,165,49)" fg:x="133" fg:w="132"/><text x="3.2977%" y="735.50">[[s..</text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="6.0495%" y="709" width="0.0229%" height="15" fill="rgb(219,113,52)" fg:x="264" fg:w="1"/><text x="6.2995%" y="719.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (6 samples, 0.14%)</title><rect x="6.0724%" y="709" width="0.1375%" height="15" fill="rgb(214,7,15)" fg:x="265" fg:w="6"/><text x="6.3224%" y="719.50"></text></g><g><title>[anon] (7 samples, 0.16%)</title><rect x="6.0724%" y="725" width="0.1604%" height="15" fill="rgb(235,32,4)" fg:x="265" fg:w="7"/><text x="6.3224%" y="735.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="6.2099%" y="709" width="0.0229%" height="15" fill="rgb(238,90,54)" fg:x="271" fg:w="1"/><text x="6.4599%" y="719.50"></text></g><g><title>_int_realloc (4 samples, 0.09%)</title><rect x="6.2328%" y="709" width="0.0917%" height="15" fill="rgb(213,208,19)" fg:x="272" fg:w="4"/><text x="6.4828%" y="719.50"></text></g><g><title>[libc-2.33.so] (5 samples, 0.11%)</title><rect x="6.2328%" y="725" width="0.1146%" height="15" fill="rgb(233,156,4)" fg:x="272" fg:w="5"/><text x="6.4828%" y="735.50"></text></g><g><title>alloc_perturb (1 samples, 0.02%)</title><rect x="6.3245%" y="709" width="0.0229%" height="15" fill="rgb(207,194,5)" fg:x="276" fg:w="1"/><text x="6.5745%" y="719.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (86 samples, 1.97%)</title><rect x="6.3474%" y="709" width="1.9707%" height="15" fill="rgb(206,111,30)" fg:x="277" fg:w="86"/><text x="6.5974%" y="719.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (34 samples, 0.78%)</title><rect x="7.5390%" y="693" width="0.7791%" height="15" fill="rgb(243,70,54)" fg:x="329" fg:w="34"/><text x="7.7890%" y="703.50"></text></g><g><title>alloc::string::String::push_str (34 samples, 0.78%)</title><rect x="7.5390%" y="677" width="0.7791%" height="15" fill="rgb(242,28,8)" fg:x="329" fg:w="34"/><text x="7.7890%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (34 samples, 0.78%)</title><rect x="7.5390%" y="661" width="0.7791%" height="15" fill="rgb(219,106,18)" fg:x="329" fg:w="34"/><text x="7.7890%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (34 samples, 0.78%)</title><rect x="7.5390%" y="645" width="0.7791%" height="15" fill="rgb(244,222,10)" fg:x="329" fg:w="34"/><text x="7.7890%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (34 samples, 0.78%)</title><rect x="7.5390%" y="629" width="0.7791%" height="15" fill="rgb(236,179,52)" fg:x="329" fg:w="34"/><text x="7.7890%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.78%)</title><rect x="7.5390%" y="613" width="0.7791%" height="15" fill="rgb(213,23,39)" fg:x="329" fg:w="34"/><text x="7.7890%" y="623.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (2 samples, 0.05%)</title><rect x="8.3181%" y="709" width="0.0458%" height="15" fill="rgb(238,48,10)" fg:x="363" fg:w="2"/><text x="8.5681%" y="719.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.14%)</title><rect x="8.3639%" y="709" width="0.1375%" height="15" fill="rgb(251,196,23)" fg:x="365" fg:w="6"/><text x="8.6139%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.23%)</title><rect x="8.5014%" y="709" width="0.2291%" height="15" fill="rgb(250,152,24)" fg:x="371" fg:w="10"/><text x="8.7514%" y="719.50"></text></g><g><title>_int_free (3 samples, 0.07%)</title><rect x="8.7305%" y="709" width="0.0687%" height="15" fill="rgb(209,150,17)" fg:x="381" fg:w="3"/><text x="8.9805%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="8.7993%" y="709" width="0.0229%" height="15" fill="rgb(234,202,34)" fg:x="384" fg:w="1"/><text x="9.0493%" y="719.50"></text></g><g><title>alloc_perturb (3 samples, 0.07%)</title><rect x="8.8222%" y="709" width="0.0687%" height="15" fill="rgb(253,148,53)" fg:x="385" fg:w="3"/><text x="9.0722%" y="719.50"></text></g><g><title>core::fmt::Formatter::pad_integral (21 samples, 0.48%)</title><rect x="8.8909%" y="709" width="0.4812%" height="15" fill="rgb(218,129,16)" fg:x="388" fg:w="21"/><text x="9.1409%" y="719.50"></text></g><g><title>[time-6dd2e4e788d06c76] (137 samples, 3.14%)</title><rect x="6.3474%" y="725" width="3.1393%" height="15" fill="rgb(216,85,19)" fg:x="277" fg:w="137"/><text x="6.5974%" y="735.50">[ti..</text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (5 samples, 0.11%)</title><rect x="9.3721%" y="709" width="0.1146%" height="15" fill="rgb(235,228,7)" fg:x="409" fg:w="5"/><text x="9.6221%" y="719.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (40 samples, 0.92%)</title><rect x="9.4867%" y="709" width="0.9166%" height="15" fill="rgb(245,175,0)" fg:x="414" fg:w="40"/><text x="9.7367%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="10.4033%" y="709" width="0.0229%" height="15" fill="rgb(208,168,36)" fg:x="454" fg:w="1"/><text x="10.6533%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="10.4262%" y="709" width="0.0229%" height="15" fill="rgb(246,171,24)" fg:x="455" fg:w="1"/><text x="10.6762%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="10.4491%" y="709" width="0.0229%" height="15" fill="rgb(215,142,24)" fg:x="456" fg:w="1"/><text x="10.6991%" y="719.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (4 samples, 0.09%)</title><rect x="10.4720%" y="709" width="0.0917%" height="15" fill="rgb(250,187,7)" fg:x="457" fg:w="4"/><text x="10.7220%" y="719.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_u8 (3 samples, 0.07%)</title><rect x="10.5637%" y="709" width="0.0687%" height="15" fill="rgb(228,66,33)" fg:x="461" fg:w="3"/><text x="10.8137%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.07%)</title><rect x="10.6324%" y="693" width="0.0687%" height="15" fill="rgb(234,215,21)" fg:x="464" fg:w="3"/><text x="10.8824%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="10.7012%" y="693" width="0.0229%" height="15" fill="rgb(222,191,20)" fg:x="467" fg:w="1"/><text x="10.9512%" y="703.50"></text></g><g><title>[time-6dd2e4e788d06c76] (6 samples, 0.14%)</title><rect x="10.6324%" y="709" width="0.1375%" height="15" fill="rgb(245,79,54)" fg:x="464" fg:w="6"/><text x="10.8824%" y="719.50"></text></g><g><title>alloc_perturb (2 samples, 0.05%)</title><rect x="10.7241%" y="693" width="0.0458%" height="15" fill="rgb(240,10,37)" fg:x="468" fg:w="2"/><text x="10.9741%" y="703.50"></text></g><g><title>__GI___libc_free (5 samples, 0.11%)</title><rect x="10.7699%" y="709" width="0.1146%" height="15" fill="rgb(214,192,32)" fg:x="470" fg:w="5"/><text x="11.0199%" y="719.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="10.8845%" y="709" width="0.0229%" height="15" fill="rgb(209,36,54)" fg:x="475" fg:w="1"/><text x="11.1345%" y="719.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.05%)</title><rect x="10.9074%" y="709" width="0.0458%" height="15" fill="rgb(220,10,11)" fg:x="476" fg:w="2"/><text x="11.1574%" y="719.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="10.9533%" y="709" width="0.0229%" height="15" fill="rgb(221,106,17)" fg:x="478" fg:w="1"/><text x="11.2033%" y="719.50"></text></g><g><title>__rdl_realloc (6 samples, 0.14%)</title><rect x="10.9762%" y="709" width="0.1375%" height="15" fill="rgb(251,142,44)" fg:x="479" fg:w="6"/><text x="11.2262%" y="719.50"></text></g><g><title>__GI___dup2 (1 samples, 0.02%)</title><rect x="11.1137%" y="693" width="0.0229%" height="15" fill="rgb(238,13,15)" fg:x="485" fg:w="1"/><text x="11.3637%" y="703.50"></text></g><g><title>__spawni_child (2 samples, 0.05%)</title><rect x="11.1137%" y="709" width="0.0458%" height="15" fill="rgb(208,107,27)" fg:x="485" fg:w="2"/><text x="11.3637%" y="719.50"></text></g><g><title>__execvpe_common (1 samples, 0.02%)</title><rect x="11.1366%" y="693" width="0.0229%" height="15" fill="rgb(205,136,37)" fg:x="486" fg:w="1"/><text x="11.3866%" y="703.50"></text></g><g><title>__strchrnul_avx2 (1 samples, 0.02%)</title><rect x="11.1366%" y="677" width="0.0229%" height="15" fill="rgb(250,205,27)" fg:x="486" fg:w="1"/><text x="11.3866%" y="687.50"></text></g><g><title>_int_free (9 samples, 0.21%)</title><rect x="11.1595%" y="709" width="0.2062%" height="15" fill="rgb(210,80,43)" fg:x="487" fg:w="9"/><text x="11.4095%" y="719.50"></text></g><g><title>_int_malloc (24 samples, 0.55%)</title><rect x="11.3657%" y="709" width="0.5500%" height="15" fill="rgb(247,160,36)" fg:x="496" fg:w="24"/><text x="11.6157%" y="719.50"></text></g><g><title>_int_realloc (16 samples, 0.37%)</title><rect x="11.9157%" y="709" width="0.3666%" height="15" fill="rgb(234,13,49)" fg:x="520" fg:w="16"/><text x="12.1657%" y="719.50"></text></g><g><title>alloc::fmt::format (13 samples, 0.30%)</title><rect x="12.2823%" y="709" width="0.2979%" height="15" fill="rgb(234,122,0)" fg:x="536" fg:w="13"/><text x="12.5323%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.23%)</title><rect x="12.5802%" y="709" width="0.2291%" height="15" fill="rgb(207,146,38)" fg:x="549" fg:w="10"/><text x="12.8302%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.23%)</title><rect x="12.5802%" y="693" width="0.2291%" height="15" fill="rgb(207,177,25)" fg:x="549" fg:w="10"/><text x="12.8302%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.21%)</title><rect x="12.8093%" y="709" width="0.2062%" height="15" fill="rgb(211,178,42)" fg:x="559" fg:w="9"/><text x="13.0593%" y="719.50"></text></g><g><title>alloc_perturb (1 samples, 0.02%)</title><rect x="13.0156%" y="709" width="0.0229%" height="15" fill="rgb(230,69,54)" fg:x="568" fg:w="1"/><text x="13.2656%" y="719.50"></text></g><g><title>core::fmt::Formatter::pad_integral (31 samples, 0.71%)</title><rect x="13.0385%" y="709" width="0.7104%" height="15" fill="rgb(214,135,41)" fg:x="569" fg:w="31"/><text x="13.2885%" y="719.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (11 samples, 0.25%)</title><rect x="13.7489%" y="709" width="0.2521%" height="15" fill="rgb(237,67,25)" fg:x="600" fg:w="11"/><text x="13.9989%" y="719.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (5 samples, 0.11%)</title><rect x="14.0009%" y="709" width="0.1146%" height="15" fill="rgb(222,189,50)" fg:x="611" fg:w="5"/><text x="14.2509%" y="719.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (4 samples, 0.09%)</title><rect x="14.0238%" y="693" width="0.0917%" height="15" fill="rgb(245,148,34)" fg:x="612" fg:w="4"/><text x="14.2738%" y="703.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (12 samples, 0.27%)</title><rect x="14.1155%" y="709" width="0.2750%" height="15" fill="rgb(222,29,6)" fg:x="616" fg:w="12"/><text x="14.3655%" y="719.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.05%)</title><rect x="14.3446%" y="693" width="0.0458%" height="15" fill="rgb(221,189,43)" fg:x="626" fg:w="2"/><text x="14.5946%" y="703.50"></text></g><g><title>core::fmt::write (72 samples, 1.65%)</title><rect x="14.3905%" y="709" width="1.6499%" height="15" fill="rgb(207,36,27)" fg:x="628" fg:w="72"/><text x="14.6405%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;groove::file::File&gt; (4 samples, 0.09%)</title><rect x="16.0403%" y="709" width="0.0917%" height="15" fill="rgb(217,90,24)" fg:x="700" fg:w="4"/><text x="16.2903%" y="719.50"></text></g><g><title>groove::file::File::add_index (19 samples, 0.44%)</title><rect x="16.1320%" y="709" width="0.4354%" height="15" fill="rgb(224,66,35)" fg:x="704" fg:w="19"/><text x="16.3820%" y="719.50"></text></g><g><title>malloc_consolidate (4 samples, 0.09%)</title><rect x="16.5674%" y="709" width="0.0917%" height="15" fill="rgb(221,13,50)" fg:x="723" fg:w="4"/><text x="16.8174%" y="719.50"></text></g><g><title>[unknown] (316 samples, 7.24%)</title><rect x="9.4867%" y="725" width="7.2411%" height="15" fill="rgb(236,68,49)" fg:x="414" fg:w="316"/><text x="9.7367%" y="735.50">[unknown]</text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.07%)</title><rect x="16.6590%" y="709" width="0.0687%" height="15" fill="rgb(229,146,28)" fg:x="727" fg:w="3"/><text x="16.9090%" y="719.50"></text></g><g><title>__GI___clone (9 samples, 0.21%)</title><rect x="16.7278%" y="725" width="0.2062%" height="15" fill="rgb(225,31,38)" fg:x="730" fg:w="9"/><text x="16.9778%" y="735.50"></text></g><g><title>__GI___libc_free (194 samples, 4.45%)</title><rect x="17.0486%" y="549" width="4.4455%" height="15" fill="rgb(250,208,3)" fg:x="744" fg:w="194"/><text x="17.2986%" y="559.50">__GI_..</text></g><g><title>_int_free (194 samples, 4.45%)</title><rect x="17.0486%" y="533" width="4.4455%" height="15" fill="rgb(246,54,23)" fg:x="744" fg:w="194"/><text x="17.2986%" y="543.50">_int_..</text></g><g><title>malloc_consolidate (194 samples, 4.45%)</title><rect x="17.0486%" y="517" width="4.4455%" height="15" fill="rgb(243,76,11)" fg:x="744" fg:w="194"/><text x="17.2986%" y="527.50">mallo..</text></g><g><title>unlink_chunk.constprop.0 (87 samples, 1.99%)</title><rect x="19.5005%" y="501" width="1.9936%" height="15" fill="rgb(245,21,50)" fg:x="851" fg:w="87"/><text x="19.7505%" y="511.50">u..</text></g><g><title>alloc::fmt::format (2 samples, 0.05%)</title><rect x="21.4940%" y="517" width="0.0458%" height="15" fill="rgb(228,9,43)" fg:x="938" fg:w="2"/><text x="21.7440%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.05%)</title><rect x="21.4940%" y="501" width="0.0458%" height="15" fill="rgb(208,100,47)" fg:x="938" fg:w="2"/><text x="21.7440%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.05%)</title><rect x="21.4940%" y="485" width="0.0458%" height="15" fill="rgb(232,26,8)" fg:x="938" fg:w="2"/><text x="21.7440%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.05%)</title><rect x="21.4940%" y="469" width="0.0458%" height="15" fill="rgb(216,166,38)" fg:x="938" fg:w="2"/><text x="21.7440%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.05%)</title><rect x="21.4940%" y="453" width="0.0458%" height="15" fill="rgb(251,202,51)" fg:x="938" fg:w="2"/><text x="21.7440%" y="463.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.05%)</title><rect x="21.4940%" y="437" width="0.0458%" height="15" fill="rgb(254,216,34)" fg:x="938" fg:w="2"/><text x="21.7440%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.05%)</title><rect x="21.4940%" y="421" width="0.0458%" height="15" fill="rgb(251,32,27)" fg:x="938" fg:w="2"/><text x="21.7440%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.05%)</title><rect x="21.4940%" y="405" width="0.0458%" height="15" fill="rgb(208,127,28)" fg:x="938" fg:w="2"/><text x="21.7440%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.05%)</title><rect x="21.4940%" y="389" width="0.0458%" height="15" fill="rgb(224,137,22)" fg:x="938" fg:w="2"/><text x="21.7440%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="21.4940%" y="373" width="0.0458%" height="15" fill="rgb(254,70,32)" fg:x="938" fg:w="2"/><text x="21.7440%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="21.4940%" y="357" width="0.0458%" height="15" fill="rgb(229,75,37)" fg:x="938" fg:w="2"/><text x="21.7440%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect x="21.4940%" y="341" width="0.0458%" height="15" fill="rgb(252,64,23)" fg:x="938" fg:w="2"/><text x="21.7440%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.05%)</title><rect x="21.4940%" y="325" width="0.0458%" height="15" fill="rgb(232,162,48)" fg:x="938" fg:w="2"/><text x="21.7440%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.05%)</title><rect x="21.4940%" y="309" width="0.0458%" height="15" fill="rgb(246,160,12)" fg:x="938" fg:w="2"/><text x="21.7440%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.05%)</title><rect x="21.4940%" y="293" width="0.0458%" height="15" fill="rgb(247,166,0)" fg:x="938" fg:w="2"/><text x="21.7440%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.05%)</title><rect x="21.4940%" y="277" width="0.0458%" height="15" fill="rgb(249,219,21)" fg:x="938" fg:w="2"/><text x="21.7440%" y="287.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.05%)</title><rect x="21.4940%" y="261" width="0.0458%" height="15" fill="rgb(205,209,3)" fg:x="938" fg:w="2"/><text x="21.7440%" y="271.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.05%)</title><rect x="21.4940%" y="245" width="0.0458%" height="15" fill="rgb(243,44,1)" fg:x="938" fg:w="2"/><text x="21.7440%" y="255.50"></text></g><g><title>_int_realloc (2 samples, 0.05%)</title><rect x="21.4940%" y="229" width="0.0458%" height="15" fill="rgb(206,159,16)" fg:x="938" fg:w="2"/><text x="21.7440%" y="239.50"></text></g><g><title>_int_malloc (2 samples, 0.05%)</title><rect x="21.4940%" y="213" width="0.0458%" height="15" fill="rgb(244,77,30)" fg:x="938" fg:w="2"/><text x="21.7440%" y="223.50"></text></g><g><title>criterion::report::BenchmarkId::new (3 samples, 0.07%)</title><rect x="21.4940%" y="533" width="0.0687%" height="15" fill="rgb(218,69,12)" fg:x="938" fg:w="3"/><text x="21.7440%" y="543.50"></text></g><g><title>criterion::report::make_filename_safe (1 samples, 0.02%)</title><rect x="21.5399%" y="517" width="0.0229%" height="15" fill="rgb(212,87,7)" fg:x="940" fg:w="1"/><text x="21.7899%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="21.5399%" y="501" width="0.0229%" height="15" fill="rgb(245,114,25)" fg:x="940" fg:w="1"/><text x="21.7899%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="21.5399%" y="485" width="0.0229%" height="15" fill="rgb(210,61,42)" fg:x="940" fg:w="1"/><text x="21.7899%" y="495.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.02%)</title><rect x="21.5399%" y="469" width="0.0229%" height="15" fill="rgb(211,52,33)" fg:x="940" fg:w="1"/><text x="21.7899%" y="479.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="21.5399%" y="453" width="0.0229%" height="15" fill="rgb(234,58,33)" fg:x="940" fg:w="1"/><text x="21.7899%" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="21.5399%" y="437" width="0.0229%" height="15" fill="rgb(220,115,36)" fg:x="940" fg:w="1"/><text x="21.7899%" y="447.50"></text></g><g><title>__GI___libc_free (239 samples, 5.48%)</title><rect x="23.1668%" y="453" width="5.4766%" height="15" fill="rgb(243,153,54)" fg:x="1011" fg:w="239"/><text x="23.4168%" y="463.50">__GI___..</text></g><g><title>_int_free (71 samples, 1.63%)</title><rect x="27.0165%" y="437" width="1.6269%" height="15" fill="rgb(251,47,18)" fg:x="1179" fg:w="71"/><text x="27.2665%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (254 samples, 5.82%)</title><rect x="22.8460%" y="469" width="5.8203%" height="15" fill="rgb(242,102,42)" fg:x="997" fg:w="254"/><text x="23.0960%" y="479.50">&lt;hashbr..</text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="28.6434%" y="453" width="0.0229%" height="15" fill="rgb(234,31,38)" fg:x="1250" fg:w="1"/><text x="28.8934%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="28.6434%" y="437" width="0.0229%" height="15" fill="rgb(221,117,51)" fg:x="1250" fg:w="1"/><text x="28.8934%" y="447.50"></text></g><g><title>[time-6dd2e4e788d06c76] (14 samples, 0.32%)</title><rect x="30.6370%" y="453" width="0.3208%" height="15" fill="rgb(212,20,18)" fg:x="1337" fg:w="14"/><text x="30.8870%" y="463.50"></text></g><g><title>_int_free (14 samples, 0.32%)</title><rect x="30.6370%" y="437" width="0.3208%" height="15" fill="rgb(245,133,36)" fg:x="1337" fg:w="14"/><text x="30.8870%" y="447.50"></text></g><g><title>[time-6dd2e4e788d06c76] (1 samples, 0.02%)</title><rect x="34.2117%" y="437" width="0.0229%" height="15" fill="rgb(212,6,19)" fg:x="1493" fg:w="1"/><text x="34.4617%" y="447.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="34.2117%" y="421" width="0.0229%" height="15" fill="rgb(218,1,36)" fg:x="1493" fg:w="1"/><text x="34.4617%" y="431.50"></text></g><g><title>__GI___libc_free (368 samples, 8.43%)</title><rect x="28.6664%" y="469" width="8.4326%" height="15" fill="rgb(246,84,54)" fg:x="1251" fg:w="368"/><text x="28.9164%" y="479.50">__GI___libc_..</text></g><g><title>_int_free (268 samples, 6.14%)</title><rect x="30.9578%" y="453" width="6.1412%" height="15" fill="rgb(242,110,6)" fg:x="1351" fg:w="268"/><text x="31.2078%" y="463.50">_int_free</text></g><g><title>malloc_consolidate (125 samples, 2.86%)</title><rect x="34.2346%" y="437" width="2.8643%" height="15" fill="rgb(214,47,5)" fg:x="1494" fg:w="125"/><text x="34.4846%" y="447.50">ma..</text></g><g><title>unlink_chunk.constprop.0 (58 samples, 1.33%)</title><rect x="35.7699%" y="421" width="1.3291%" height="15" fill="rgb(218,159,25)" fg:x="1561" fg:w="58"/><text x="36.0199%" y="431.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.21%)</title><rect x="37.0990%" y="469" width="0.2062%" height="15" fill="rgb(215,211,28)" fg:x="1619" fg:w="9"/><text x="37.3490%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.21%)</title><rect x="37.0990%" y="453" width="0.2062%" height="15" fill="rgb(238,59,32)" fg:x="1619" fg:w="9"/><text x="37.3490%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;groove::file::File&gt; (696 samples, 15.95%)</title><rect x="21.5628%" y="485" width="15.9487%" height="15" fill="rgb(226,82,3)" fg:x="941" fg:w="696"/><text x="21.8128%" y="495.50">core::ptr::drop_in_place&lt;..</text></g><g><title>__rust_dealloc (9 samples, 0.21%)</title><rect x="37.3052%" y="469" width="0.2062%" height="15" fill="rgb(240,164,32)" fg:x="1628" fg:w="9"/><text x="37.5552%" y="479.50"></text></g><g><title>__memcmp_avx2_movbe (20 samples, 0.46%)</title><rect x="38.2218%" y="453" width="0.4583%" height="15" fill="rgb(232,46,7)" fg:x="1668" fg:w="20"/><text x="38.4718%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (4 samples, 0.09%)</title><rect x="38.6801%" y="453" width="0.0917%" height="15" fill="rgb(229,129,53)" fg:x="1688" fg:w="4"/><text x="38.9301%" y="463.50"></text></g><g><title>groove::file::File::find_table_row (57 samples, 1.31%)</title><rect x="37.5115%" y="485" width="1.3061%" height="15" fill="rgb(234,188,29)" fg:x="1637" fg:w="57"/><text x="37.7615%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 1.31%)</title><rect x="37.5115%" y="469" width="1.3061%" height="15" fill="rgb(246,141,4)" fg:x="1637" fg:w="57"/><text x="37.7615%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (2 samples, 0.05%)</title><rect x="38.7718%" y="453" width="0.0458%" height="15" fill="rgb(229,23,39)" fg:x="1692" fg:w="2"/><text x="39.0218%" y="463.50"></text></g><g><title>__GI___libc_malloc (45 samples, 1.03%)</title><rect x="40.2154%" y="437" width="1.0312%" height="15" fill="rgb(206,12,3)" fg:x="1755" fg:w="45"/><text x="40.4654%" y="447.50"></text></g><g><title>_int_malloc (36 samples, 0.82%)</title><rect x="40.4216%" y="421" width="0.8249%" height="15" fill="rgb(252,226,20)" fg:x="1764" fg:w="36"/><text x="40.6716%" y="431.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="41.2236%" y="405" width="0.0229%" height="15" fill="rgb(216,123,35)" fg:x="1799" fg:w="1"/><text x="41.4736%" y="415.50"></text></g><g><title>__GI___default_morecore (1 samples, 0.02%)</title><rect x="41.2236%" y="389" width="0.0229%" height="15" fill="rgb(212,68,40)" fg:x="1799" fg:w="1"/><text x="41.4736%" y="399.50"></text></g><g><title>__GI___sbrk (1 samples, 0.02%)</title><rect x="41.2236%" y="373" width="0.0229%" height="15" fill="rgb(254,125,32)" fg:x="1799" fg:w="1"/><text x="41.4736%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="41.2466%" y="437" width="0.0229%" height="15" fill="rgb(253,97,22)" fg:x="1800" fg:w="1"/><text x="41.4966%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="41.2466%" y="421" width="0.0229%" height="15" fill="rgb(241,101,14)" fg:x="1800" fg:w="1"/><text x="41.4966%" y="431.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="41.2695%" y="437" width="0.0229%" height="15" fill="rgb(238,103,29)" fg:x="1801" fg:w="1"/><text x="41.5195%" y="447.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.07%)</title><rect x="41.6361%" y="421" width="0.0687%" height="15" fill="rgb(233,195,47)" fg:x="1817" fg:w="3"/><text x="41.8861%" y="431.50"></text></g><g><title>[time-6dd2e4e788d06c76] (1 samples, 0.02%)</title><rect x="42.3465%" y="293" width="0.0229%" height="15" fill="rgb(246,218,30)" fg:x="1848" fg:w="1"/><text x="42.5965%" y="303.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="42.3465%" y="277" width="0.0229%" height="15" fill="rgb(219,145,47)" fg:x="1848" fg:w="1"/><text x="42.5965%" y="287.50"></text></g><g><title>alloc_perturb (3 samples, 0.07%)</title><rect x="49.4730%" y="261" width="0.0687%" height="15" fill="rgb(243,12,26)" fg:x="2159" fg:w="3"/><text x="49.7230%" y="271.50"></text></g><g><title>__GI___libc_malloc (314 samples, 7.20%)</title><rect x="42.3694%" y="293" width="7.1952%" height="15" fill="rgb(214,87,16)" fg:x="1849" fg:w="314"/><text x="42.6194%" y="303.50">__GI___lib..</text></g><g><title>_int_malloc (256 samples, 5.87%)</title><rect x="43.6984%" y="277" width="5.8662%" height="15" fill="rgb(208,99,42)" fg:x="1907" fg:w="256"/><text x="43.9484%" y="287.50">_int_ma..</text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="49.5417%" y="261" width="0.0229%" height="15" fill="rgb(253,99,2)" fg:x="2162" fg:w="1"/><text x="49.7917%" y="271.50"></text></g><g><title>__rdl_alloc (13 samples, 0.30%)</title><rect x="49.5646%" y="293" width="0.2979%" height="15" fill="rgb(220,168,23)" fg:x="2163" fg:w="13"/><text x="49.8146%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.30%)</title><rect x="49.5646%" y="277" width="0.2979%" height="15" fill="rgb(242,38,24)" fg:x="2163" fg:w="13"/><text x="49.8146%" y="287.50"></text></g><g><title>alloc::string::String::with_capacity (363 samples, 8.32%)</title><rect x="41.7049%" y="421" width="8.3181%" height="15" fill="rgb(225,182,9)" fg:x="1820" fg:w="363"/><text x="41.9549%" y="431.50">alloc::strin..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (346 samples, 7.93%)</title><rect x="42.0944%" y="405" width="7.9285%" height="15" fill="rgb(243,178,37)" fg:x="1837" fg:w="346"/><text x="42.3444%" y="415.50">alloc::vec:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (346 samples, 7.93%)</title><rect x="42.0944%" y="389" width="7.9285%" height="15" fill="rgb(232,139,19)" fg:x="1837" fg:w="346"/><text x="42.3444%" y="399.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (346 samples, 7.93%)</title><rect x="42.0944%" y="373" width="7.9285%" height="15" fill="rgb(225,201,24)" fg:x="1837" fg:w="346"/><text x="42.3444%" y="383.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (346 samples, 7.93%)</title><rect x="42.0944%" y="357" width="7.9285%" height="15" fill="rgb(221,47,46)" fg:x="1837" fg:w="346"/><text x="42.3444%" y="367.50">alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (337 samples, 7.72%)</title><rect x="42.3006%" y="341" width="7.7223%" height="15" fill="rgb(249,23,13)" fg:x="1846" fg:w="337"/><text x="42.5506%" y="351.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (337 samples, 7.72%)</title><rect x="42.3006%" y="325" width="7.7223%" height="15" fill="rgb(219,9,5)" fg:x="1846" fg:w="337"/><text x="42.5506%" y="335.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (337 samples, 7.72%)</title><rect x="42.3006%" y="309" width="7.7223%" height="15" fill="rgb(254,171,16)" fg:x="1846" fg:w="337"/><text x="42.5506%" y="319.50">alloc::allo..</text></g><g><title>__rust_alloc (7 samples, 0.16%)</title><rect x="49.8625%" y="293" width="0.1604%" height="15" fill="rgb(230,171,20)" fg:x="2176" fg:w="7"/><text x="50.1125%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.78%)</title><rect x="50.3208%" y="341" width="0.7791%" height="15" fill="rgb(210,71,41)" fg:x="2196" fg:w="34"/><text x="50.5708%" y="351.50"></text></g><g><title>alloc::fmt::format (4 samples, 0.09%)</title><rect x="51.0999%" y="341" width="0.0917%" height="15" fill="rgb(206,173,20)" fg:x="2230" fg:w="4"/><text x="51.3499%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (41 samples, 0.94%)</title><rect x="50.3208%" y="405" width="0.9395%" height="15" fill="rgb(233,88,34)" fg:x="2196" fg:w="41"/><text x="50.5708%" y="415.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (41 samples, 0.94%)</title><rect x="50.3208%" y="389" width="0.9395%" height="15" fill="rgb(223,209,46)" fg:x="2196" fg:w="41"/><text x="50.5708%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (41 samples, 0.94%)</title><rect x="50.3208%" y="373" width="0.9395%" height="15" fill="rgb(250,43,18)" fg:x="2196" fg:w="41"/><text x="50.5708%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (41 samples, 0.94%)</title><rect x="50.3208%" y="357" width="0.9395%" height="15" fill="rgb(208,13,10)" fg:x="2196" fg:w="41"/><text x="50.5708%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3 samples, 0.07%)</title><rect x="51.1916%" y="341" width="0.0687%" height="15" fill="rgb(212,200,36)" fg:x="2234" fg:w="3"/><text x="51.4416%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (3 samples, 0.07%)</title><rect x="51.1916%" y="325" width="0.0687%" height="15" fill="rgb(225,90,30)" fg:x="2234" fg:w="3"/><text x="51.4416%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (4 samples, 0.09%)</title><rect x="51.2603%" y="405" width="0.0917%" height="15" fill="rgb(236,182,39)" fg:x="2237" fg:w="4"/><text x="51.5103%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (4 samples, 0.09%)</title><rect x="51.2603%" y="389" width="0.0917%" height="15" fill="rgb(212,144,35)" fg:x="2237" fg:w="4"/><text x="51.5103%" y="399.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (60 samples, 1.37%)</title><rect x="50.0229%" y="421" width="1.3749%" height="15" fill="rgb(228,63,44)" fg:x="2183" fg:w="60"/><text x="50.2729%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.05%)</title><rect x="51.3520%" y="405" width="0.0458%" height="15" fill="rgb(228,109,6)" fg:x="2241" fg:w="2"/><text x="51.6020%" y="415.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.05%)</title><rect x="51.3520%" y="389" width="0.0458%" height="15" fill="rgb(238,117,24)" fg:x="2241" fg:w="2"/><text x="51.6020%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.05%)</title><rect x="51.3520%" y="373" width="0.0458%" height="15" fill="rgb(242,26,26)" fg:x="2241" fg:w="2"/><text x="51.6020%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.05%)</title><rect x="51.3520%" y="357" width="0.0458%" height="15" fill="rgb(221,92,48)" fg:x="2241" fg:w="2"/><text x="51.6020%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.05%)</title><rect x="53.3456%" y="309" width="0.0458%" height="15" fill="rgb(209,209,32)" fg:x="2328" fg:w="2"/><text x="53.5956%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (30 samples, 0.69%)</title><rect x="53.4601%" y="293" width="0.6874%" height="15" fill="rgb(221,70,22)" fg:x="2333" fg:w="30"/><text x="53.7101%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.50%)</title><rect x="53.6434%" y="277" width="0.5041%" height="15" fill="rgb(248,145,5)" fg:x="2341" fg:w="22"/><text x="53.8934%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (12 samples, 0.27%)</title><rect x="53.8726%" y="261" width="0.2750%" height="15" fill="rgb(226,116,26)" fg:x="2351" fg:w="12"/><text x="54.1226%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (5 samples, 0.11%)</title><rect x="54.0330%" y="245" width="0.1146%" height="15" fill="rgb(244,5,17)" fg:x="2358" fg:w="5"/><text x="54.2830%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (79 samples, 1.81%)</title><rect x="54.3538%" y="277" width="1.8103%" height="15" fill="rgb(252,159,33)" fg:x="2372" fg:w="79"/><text x="54.6038%" y="287.50">_..</text></g><g><title>core::intrinsics::copy_nonoverlapping (95 samples, 2.18%)</title><rect x="54.1476%" y="293" width="2.1769%" height="15" fill="rgb(206,71,0)" fg:x="2363" fg:w="95"/><text x="54.3976%" y="303.50">c..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (7 samples, 0.16%)</title><rect x="56.1641%" y="277" width="0.1604%" height="15" fill="rgb(233,118,54)" fg:x="2451" fg:w="7"/><text x="56.4141%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (159 samples, 3.64%)</title><rect x="52.9331%" y="389" width="3.6434%" height="15" fill="rgb(234,83,48)" fg:x="2310" fg:w="159"/><text x="53.1831%" y="399.50">&lt;&amp;mu..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (141 samples, 3.23%)</title><rect x="53.3456%" y="373" width="3.2310%" height="15" fill="rgb(228,3,54)" fg:x="2328" fg:w="141"/><text x="53.5956%" y="383.50">&lt;al..</text></g><g><title>alloc::string::String::push_str (141 samples, 3.23%)</title><rect x="53.3456%" y="357" width="3.2310%" height="15" fill="rgb(226,155,13)" fg:x="2328" fg:w="141"/><text x="53.5956%" y="367.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (141 samples, 3.23%)</title><rect x="53.3456%" y="341" width="3.2310%" height="15" fill="rgb(241,28,37)" fg:x="2328" fg:w="141"/><text x="53.5956%" y="351.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (141 samples, 3.23%)</title><rect x="53.3456%" y="325" width="3.2310%" height="15" fill="rgb(233,93,10)" fg:x="2328" fg:w="141"/><text x="53.5956%" y="335.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (139 samples, 3.19%)</title><rect x="53.3914%" y="309" width="3.1852%" height="15" fill="rgb(225,113,19)" fg:x="2330" fg:w="139"/><text x="53.6414%" y="319.50">all..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11 samples, 0.25%)</title><rect x="56.3245%" y="293" width="0.2521%" height="15" fill="rgb(241,2,18)" fg:x="2458" fg:w="11"/><text x="56.5745%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.25%)</title><rect x="56.3245%" y="277" width="0.2521%" height="15" fill="rgb(228,207,21)" fg:x="2458" fg:w="11"/><text x="56.5745%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.37%)</title><rect x="56.5765%" y="389" width="0.3666%" height="15" fill="rgb(213,211,35)" fg:x="2469" fg:w="16"/><text x="56.8265%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (16 samples, 0.37%)</title><rect x="56.5765%" y="373" width="0.3666%" height="15" fill="rgb(209,83,10)" fg:x="2469" fg:w="16"/><text x="56.8265%" y="383.50"></text></g><g><title>core::fmt::Formatter::new (38 samples, 0.87%)</title><rect x="56.9432%" y="389" width="0.8708%" height="15" fill="rgb(209,164,1)" fg:x="2485" fg:w="38"/><text x="57.1932%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 0.18%)</title><rect x="58.8451%" y="261" width="0.1833%" height="15" fill="rgb(213,184,43)" fg:x="2568" fg:w="8"/><text x="59.0951%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.18%)</title><rect x="58.8451%" y="245" width="0.1833%" height="15" fill="rgb(231,61,34)" fg:x="2568" fg:w="8"/><text x="59.0951%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (8 samples, 0.18%)</title><rect x="58.8451%" y="229" width="0.1833%" height="15" fill="rgb(235,75,3)" fg:x="2568" fg:w="8"/><text x="59.0951%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (8 samples, 0.18%)</title><rect x="58.8451%" y="213" width="0.1833%" height="15" fill="rgb(220,106,47)" fg:x="2568" fg:w="8"/><text x="59.0951%" y="223.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (40 samples, 0.92%)</title><rect x="58.6618%" y="357" width="0.9166%" height="15" fill="rgb(210,196,33)" fg:x="2560" fg:w="40"/><text x="58.9118%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (35 samples, 0.80%)</title><rect x="58.7764%" y="341" width="0.8020%" height="15" fill="rgb(229,154,42)" fg:x="2565" fg:w="35"/><text x="59.0264%" y="351.50"></text></g><g><title>alloc::string::String::push_str (35 samples, 0.80%)</title><rect x="58.7764%" y="325" width="0.8020%" height="15" fill="rgb(228,114,26)" fg:x="2565" fg:w="35"/><text x="59.0264%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (35 samples, 0.80%)</title><rect x="58.7764%" y="309" width="0.8020%" height="15" fill="rgb(208,144,1)" fg:x="2565" fg:w="35"/><text x="59.0264%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (35 samples, 0.80%)</title><rect x="58.7764%" y="293" width="0.8020%" height="15" fill="rgb(239,112,37)" fg:x="2565" fg:w="35"/><text x="59.0264%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (35 samples, 0.80%)</title><rect x="58.7764%" y="277" width="0.8020%" height="15" fill="rgb(210,96,50)" fg:x="2565" fg:w="35"/><text x="59.0264%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.55%)</title><rect x="59.0284%" y="261" width="0.5500%" height="15" fill="rgb(222,178,2)" fg:x="2576" fg:w="24"/><text x="59.2784%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.30%)</title><rect x="59.2805%" y="245" width="0.2979%" height="15" fill="rgb(226,74,18)" fg:x="2587" fg:w="13"/><text x="59.5305%" y="255.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (13 samples, 0.30%)</title><rect x="60.4720%" y="341" width="0.2979%" height="15" fill="rgb(225,67,54)" fg:x="2639" fg:w="13"/><text x="60.7220%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad_integral (58 samples, 1.33%)</title><rect x="59.5784%" y="357" width="1.3291%" height="15" fill="rgb(251,92,32)" fg:x="2600" fg:w="58"/><text x="59.8284%" y="367.50"></text></g><g><title>core::fmt::Formatter::sign_plus (6 samples, 0.14%)</title><rect x="60.7699%" y="341" width="0.1375%" height="15" fill="rgb(228,149,22)" fg:x="2652" fg:w="6"/><text x="61.0199%" y="351.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (146 samples, 3.35%)</title><rect x="57.8139%" y="389" width="3.3456%" height="15" fill="rgb(243,54,13)" fg:x="2523" fg:w="146"/><text x="58.0639%" y="399.50">cor..</text></g><g><title>core::fmt::num::imp::fmt_u64 (130 samples, 2.98%)</title><rect x="58.1806%" y="373" width="2.9789%" height="15" fill="rgb(243,180,28)" fg:x="2539" fg:w="130"/><text x="58.4306%" y="383.50">cor..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.25%)</title><rect x="60.9074%" y="357" width="0.2521%" height="15" fill="rgb(208,167,24)" fg:x="2658" fg:w="11"/><text x="61.1574%" y="367.50"></text></g><g><title>&lt;u64 as core::fmt::num::DisplayInt&gt;::to_u64 (3 samples, 0.07%)</title><rect x="61.1595%" y="373" width="0.0687%" height="15" fill="rgb(245,73,45)" fg:x="2669" fg:w="3"/><text x="61.4095%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (9 samples, 0.21%)</title><rect x="61.2282%" y="373" width="0.2062%" height="15" fill="rgb(237,203,48)" fg:x="2672" fg:w="9"/><text x="61.4782%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (12 samples, 0.27%)</title><rect x="64.6196%" y="277" width="0.2750%" height="15" fill="rgb(211,197,16)" fg:x="2820" fg:w="12"/><text x="64.8696%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (8 samples, 0.18%)</title><rect x="65.1696%" y="229" width="0.1833%" height="15" fill="rgb(243,99,51)" fg:x="2844" fg:w="8"/><text x="65.4196%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (8 samples, 0.18%)</title><rect x="65.1696%" y="213" width="0.1833%" height="15" fill="rgb(215,123,29)" fg:x="2844" fg:w="8"/><text x="65.4196%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (71 samples, 1.63%)</title><rect x="65.3529%" y="197" width="1.6269%" height="15" fill="rgb(239,186,37)" fg:x="2852" fg:w="71"/><text x="65.6029%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.14%)</title><rect x="66.9798%" y="197" width="0.1375%" height="15" fill="rgb(252,136,39)" fg:x="2923" fg:w="6"/><text x="67.2298%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (17 samples, 0.39%)</title><rect x="67.1173%" y="197" width="0.3896%" height="15" fill="rgb(223,213,32)" fg:x="2929" fg:w="17"/><text x="67.3673%" y="207.50"></text></g><g><title>__GI___libc_realloc (153 samples, 3.51%)</title><rect x="67.8964%" y="133" width="3.5060%" height="15" fill="rgb(233,115,5)" fg:x="2963" fg:w="153"/><text x="68.1464%" y="143.50">__G..</text></g><g><title>_int_realloc (55 samples, 1.26%)</title><rect x="70.1421%" y="117" width="1.2603%" height="15" fill="rgb(207,226,44)" fg:x="3061" fg:w="55"/><text x="70.3921%" y="127.50"></text></g><g><title>__rdl_realloc (23 samples, 0.53%)</title><rect x="71.4024%" y="133" width="0.5270%" height="15" fill="rgb(208,126,0)" fg:x="3116" fg:w="23"/><text x="71.6524%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (16 samples, 0.37%)</title><rect x="71.5628%" y="117" width="0.3666%" height="15" fill="rgb(244,66,21)" fg:x="3123" fg:w="16"/><text x="71.8128%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (181 samples, 4.15%)</title><rect x="67.8506%" y="181" width="4.1476%" height="15" fill="rgb(222,97,12)" fg:x="2961" fg:w="181"/><text x="68.1006%" y="191.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::grow_impl (181 samples, 4.15%)</title><rect x="67.8506%" y="165" width="4.1476%" height="15" fill="rgb(219,213,19)" fg:x="2961" fg:w="181"/><text x="68.1006%" y="175.50">alloc..</text></g><g><title>alloc::alloc::realloc (181 samples, 4.15%)</title><rect x="67.8506%" y="149" width="4.1476%" height="15" fill="rgb(252,169,30)" fg:x="2961" fg:w="181"/><text x="68.1006%" y="159.50">alloc..</text></g><g><title>__rust_realloc (3 samples, 0.07%)</title><rect x="71.9294%" y="133" width="0.0687%" height="15" fill="rgb(206,32,51)" fg:x="3139" fg:w="3"/><text x="72.1794%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (210 samples, 4.81%)</title><rect x="67.5069%" y="197" width="4.8121%" height="15" fill="rgb(250,172,42)" fg:x="2946" fg:w="210"/><text x="67.7569%" y="207.50">alloc:..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (14 samples, 0.32%)</title><rect x="71.9982%" y="181" width="0.3208%" height="15" fill="rgb(209,34,43)" fg:x="3142" fg:w="14"/><text x="72.2482%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (315 samples, 7.22%)</title><rect x="65.3529%" y="213" width="7.2181%" height="15" fill="rgb(223,11,35)" fg:x="2852" fg:w="315"/><text x="65.6029%" y="223.50">alloc::raw..</text></g><g><title>core::cmp::max (11 samples, 0.25%)</title><rect x="72.3190%" y="197" width="0.2521%" height="15" fill="rgb(251,219,26)" fg:x="3156" fg:w="11"/><text x="72.5690%" y="207.50"></text></g><g><title>core::cmp::Ord::max (11 samples, 0.25%)</title><rect x="72.3190%" y="181" width="0.2521%" height="15" fill="rgb(231,119,3)" fg:x="3156" fg:w="11"/><text x="72.5690%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.25%)</title><rect x="72.3190%" y="165" width="0.2521%" height="15" fill="rgb(216,97,11)" fg:x="3156" fg:w="11"/><text x="72.5690%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (342 samples, 7.84%)</title><rect x="65.0092%" y="261" width="7.8368%" height="15" fill="rgb(223,59,9)" fg:x="2837" fg:w="342"/><text x="65.2592%" y="271.50">alloc::vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (342 samples, 7.84%)</title><rect x="65.0092%" y="245" width="7.8368%" height="15" fill="rgb(233,93,31)" fg:x="2837" fg:w="342"/><text x="65.2592%" y="255.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (327 samples, 7.49%)</title><rect x="65.3529%" y="229" width="7.4931%" height="15" fill="rgb(239,81,33)" fg:x="2852" fg:w="327"/><text x="65.6029%" y="239.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.27%)</title><rect x="72.5710%" y="213" width="0.2750%" height="15" fill="rgb(213,120,34)" fg:x="3167" fg:w="12"/><text x="72.8210%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (66 samples, 1.51%)</title><rect x="72.8460%" y="261" width="1.5124%" height="15" fill="rgb(243,49,53)" fg:x="3179" fg:w="66"/><text x="73.0960%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (66 samples, 1.51%)</title><rect x="72.8460%" y="245" width="1.5124%" height="15" fill="rgb(247,216,33)" fg:x="3179" fg:w="66"/><text x="73.0960%" y="255.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (448 samples, 10.27%)</title><rect x="64.2301%" y="357" width="10.2658%" height="15" fill="rgb(226,26,14)" fg:x="2803" fg:w="448"/><text x="64.4801%" y="367.50">&lt;&amp;mut W as core..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (431 samples, 9.88%)</title><rect x="64.6196%" y="341" width="9.8763%" height="15" fill="rgb(215,49,53)" fg:x="2820" fg:w="431"/><text x="64.8696%" y="351.50">&lt;alloc::string..</text></g><g><title>alloc::string::String::push_str (431 samples, 9.88%)</title><rect x="64.6196%" y="325" width="9.8763%" height="15" fill="rgb(245,162,40)" fg:x="2820" fg:w="431"/><text x="64.8696%" y="335.50">alloc::string:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (431 samples, 9.88%)</title><rect x="64.6196%" y="309" width="9.8763%" height="15" fill="rgb(229,68,17)" fg:x="2820" fg:w="431"/><text x="64.8696%" y="319.50">alloc::vec::Ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (431 samples, 9.88%)</title><rect x="64.6196%" y="293" width="9.8763%" height="15" fill="rgb(213,182,10)" fg:x="2820" fg:w="431"/><text x="64.8696%" y="303.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (419 samples, 9.60%)</title><rect x="64.8946%" y="277" width="9.6013%" height="15" fill="rgb(245,125,30)" fg:x="2832" fg:w="419"/><text x="65.1446%" y="287.50">alloc::vec::Ve..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.14%)</title><rect x="74.3584%" y="261" width="0.1375%" height="15" fill="rgb(232,202,2)" fg:x="3245" fg:w="6"/><text x="74.6084%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.14%)</title><rect x="74.3584%" y="245" width="0.1375%" height="15" fill="rgb(237,140,51)" fg:x="3245" fg:w="6"/><text x="74.6084%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.05%)</title><rect x="75.4354%" y="341" width="0.0458%" height="15" fill="rgb(236,157,25)" fg:x="3292" fg:w="2"/><text x="75.6854%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (12 samples, 0.27%)</title><rect x="75.4812%" y="341" width="0.2750%" height="15" fill="rgb(219,209,0)" fg:x="3294" fg:w="12"/><text x="75.7312%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad_integral (63 samples, 1.44%)</title><rect x="74.4959%" y="357" width="1.4436%" height="15" fill="rgb(240,116,54)" fg:x="3251" fg:w="63"/><text x="74.7459%" y="367.50"></text></g><g><title>core::fmt::Formatter::sign_plus (8 samples, 0.18%)</title><rect x="75.7562%" y="341" width="0.1833%" height="15" fill="rgb(216,10,36)" fg:x="3306" fg:w="8"/><text x="76.0062%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (58 samples, 1.33%)</title><rect x="75.9395%" y="357" width="1.3291%" height="15" fill="rgb(222,72,44)" fg:x="3314" fg:w="58"/><text x="76.1895%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (704 samples, 16.13%)</title><rect x="61.1595%" y="389" width="16.1320%" height="15" fill="rgb(232,159,9)" fg:x="2669" fg:w="704"/><text x="61.4095%" y="399.50">core::fmt::num::imp::&lt;imp..</text></g><g><title>core::fmt::num::imp::fmt_u64 (692 samples, 15.86%)</title><rect x="61.4345%" y="373" width="15.8570%" height="15" fill="rgb(210,39,32)" fg:x="2681" fg:w="692"/><text x="61.6845%" y="383.50">core::fmt::num::imp::fmt..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="77.2686%" y="357" width="0.0229%" height="15" fill="rgb(216,194,45)" fg:x="3372" fg:w="1"/><text x="77.5186%" y="367.50"></text></g><g><title>core::iter::adapters::zip::zip (8 samples, 0.18%)</title><rect x="77.2915%" y="389" width="0.1833%" height="15" fill="rgb(218,18,35)" fg:x="3373" fg:w="8"/><text x="77.5415%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (8 samples, 0.18%)</title><rect x="77.2915%" y="373" width="0.1833%" height="15" fill="rgb(207,83,51)" fg:x="3373" fg:w="8"/><text x="77.5415%" y="383.50"></text></g><g><title>core::cmp::min (8 samples, 0.18%)</title><rect x="77.2915%" y="357" width="0.1833%" height="15" fill="rgb(225,63,43)" fg:x="3373" fg:w="8"/><text x="77.5415%" y="367.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.18%)</title><rect x="77.2915%" y="341" width="0.1833%" height="15" fill="rgb(207,57,36)" fg:x="3373" fg:w="8"/><text x="77.5415%" y="351.50"></text></g><g><title>core::fmt::write (8 samples, 0.18%)</title><rect x="77.2915%" y="325" width="0.1833%" height="15" fill="rgb(216,99,33)" fg:x="3373" fg:w="8"/><text x="77.5415%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.07%)</title><rect x="77.4748%" y="389" width="0.0687%" height="15" fill="rgb(225,42,16)" fg:x="3381" fg:w="3"/><text x="77.7248%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.07%)</title><rect x="77.4748%" y="373" width="0.0687%" height="15" fill="rgb(220,201,45)" fg:x="3381" fg:w="3"/><text x="77.7248%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,689 samples, 38.70%)</title><rect x="38.8634%" y="453" width="38.7030%" height="15" fill="rgb(225,33,4)" fg:x="1696" fg:w="1689"/><text x="39.1134%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter..</text></g><g><title>alloc::fmt::format (1,583 samples, 36.27%)</title><rect x="41.2924%" y="437" width="36.2741%" height="15" fill="rgb(224,33,50)" fg:x="1802" fg:w="1583"/><text x="41.5424%" y="447.50">alloc::fmt::format</text></g><g><title>core::fmt::Write::write_fmt (1,142 samples, 26.17%)</title><rect x="51.3978%" y="421" width="26.1687%" height="15" fill="rgb(246,198,51)" fg:x="2243" fg:w="1142"/><text x="51.6478%" y="431.50">core::fmt::Write::write_fmt</text></g><g><title>core::fmt::write (1,124 samples, 25.76%)</title><rect x="51.8103%" y="405" width="25.7562%" height="15" fill="rgb(205,22,4)" fg:x="2261" fg:w="1124"/><text x="52.0603%" y="415.50">core::fmt::write</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.02%)</title><rect x="77.5435%" y="389" width="0.0229%" height="15" fill="rgb(206,3,8)" fg:x="3384" fg:w="1"/><text x="77.7935%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,994 samples, 45.69%)</title><rect x="38.8176%" y="469" width="45.6920%" height="15" fill="rgb(251,23,15)" fg:x="1694" fg:w="1994"/><text x="39.0676%" y="479.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from..</text></g><g><title>__GI___libc_malloc (303 samples, 6.94%)</title><rect x="77.5665%" y="453" width="6.9432%" height="15" fill="rgb(252,88,28)" fg:x="3385" fg:w="303"/><text x="77.8165%" y="463.50">__GI___li..</text></g><g><title>_int_malloc (303 samples, 6.94%)</title><rect x="77.5665%" y="437" width="6.9432%" height="15" fill="rgb(212,127,14)" fg:x="3385" fg:w="303"/><text x="77.8165%" y="447.50">_int_mall..</text></g><g><title>malloc_consolidate (303 samples, 6.94%)</title><rect x="77.5665%" y="421" width="6.9432%" height="15" fill="rgb(247,145,37)" fg:x="3385" fg:w="303"/><text x="77.8165%" y="431.50">malloc_co..</text></g><g><title>unlink_chunk.constprop.0 (144 samples, 3.30%)</title><rect x="81.2099%" y="405" width="3.2997%" height="15" fill="rgb(209,117,53)" fg:x="3544" fg:w="144"/><text x="81.4599%" y="415.50">unl..</text></g><g><title>&lt;seahash::stream::SeaHasher as core::default::Default&gt;::default (4 samples, 0.09%)</title><rect x="86.7324%" y="453" width="0.0917%" height="15" fill="rgb(212,90,42)" fg:x="3785" fg:w="4"/><text x="86.9824%" y="463.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::finish (9 samples, 0.21%)</title><rect x="86.8240%" y="453" width="0.2062%" height="15" fill="rgb(218,164,37)" fg:x="3789" fg:w="9"/><text x="87.0740%" y="463.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (133 samples, 3.05%)</title><rect x="87.0302%" y="453" width="3.0477%" height="15" fill="rgb(246,65,34)" fg:x="3798" fg:w="133"/><text x="87.2802%" y="463.50">&lt;se..</text></g><g><title>__memmove_avx_unaligned_erms (64 samples, 1.47%)</title><rect x="88.6114%" y="437" width="1.4665%" height="15" fill="rgb(231,100,33)" fg:x="3867" fg:w="64"/><text x="88.8614%" y="447.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write_u8 (56 samples, 1.28%)</title><rect x="90.0779%" y="453" width="1.2832%" height="15" fill="rgb(228,126,14)" fg:x="3931" fg:w="56"/><text x="90.3279%" y="463.50"></text></g><g><title>&lt;seahash::stream::SeaHasher as core::hash::Hasher&gt;::write (55 samples, 1.26%)</title><rect x="90.1008%" y="437" width="1.2603%" height="15" fill="rgb(215,173,21)" fg:x="3932" fg:w="55"/><text x="90.3508%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.05%)</title><rect x="91.3153%" y="421" width="0.0458%" height="15" fill="rgb(210,6,40)" fg:x="3985" fg:w="2"/><text x="91.5653%" y="431.50"></text></g><g><title>[time-6dd2e4e788d06c76] (1 samples, 0.02%)</title><rect x="91.3611%" y="453" width="0.0229%" height="15" fill="rgb(212,48,18)" fg:x="3987" fg:w="1"/><text x="91.6111%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="91.3611%" y="437" width="0.0229%" height="15" fill="rgb(230,214,11)" fg:x="3987" fg:w="1"/><text x="91.6111%" y="447.50"></text></g><g><title>__GI___libc_malloc (44 samples, 1.01%)</title><rect x="92.4840%" y="421" width="1.0082%" height="15" fill="rgb(254,105,39)" fg:x="4036" fg:w="44"/><text x="92.7340%" y="431.50"></text></g><g><title>_int_malloc (39 samples, 0.89%)</title><rect x="92.5985%" y="405" width="0.8937%" height="15" fill="rgb(245,158,5)" fg:x="4041" fg:w="39"/><text x="92.8485%" y="415.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="93.4693%" y="389" width="0.0229%" height="15" fill="rgb(249,208,11)" fg:x="4079" fg:w="1"/><text x="93.7193%" y="399.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="93.4922%" y="421" width="0.0458%" height="15" fill="rgb(210,39,28)" fg:x="4080" fg:w="2"/><text x="93.7422%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.05%)</title><rect x="93.4922%" y="405" width="0.0458%" height="15" fill="rgb(211,56,53)" fg:x="4080" fg:w="2"/><text x="93.7422%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (96 samples, 2.20%)</title><rect x="91.3841%" y="453" width="2.1998%" height="15" fill="rgb(226,201,30)" fg:x="3988" fg:w="96"/><text x="91.6341%" y="463.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (52 samples, 1.19%)</title><rect x="92.3923%" y="437" width="1.1916%" height="15" fill="rgb(239,101,34)" fg:x="4032" fg:w="52"/><text x="92.6423%" y="447.50"></text></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect x="93.5380%" y="421" width="0.0458%" height="15" fill="rgb(226,209,5)" fg:x="4082" fg:w="2"/><text x="93.7880%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (60 samples, 1.37%)</title><rect x="93.5839%" y="453" width="1.3749%" height="15" fill="rgb(250,105,47)" fg:x="4084" fg:w="60"/><text x="93.8339%" y="463.50"></text></g><g><title>criterion::routine::Routine::test (3,401 samples, 77.93%)</title><rect x="21.5628%" y="533" width="77.9331%" height="15" fill="rgb(230,72,3)" fg:x="941" fg:w="3401"/><text x="21.8128%" y="543.50">criterion::routine::Routine::test</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,401 samples, 77.93%)</title><rect x="21.5628%" y="517" width="77.9331%" height="15" fill="rgb(232,218,39)" fg:x="941" fg:w="3401"/><text x="21.8128%" y="527.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched (3,401 samples, 77.93%)</title><rect x="21.5628%" y="501" width="77.9331%" height="15" fill="rgb(248,166,6)" fg:x="941" fg:w="3401"/><text x="21.8128%" y="511.50">criterion::bencher::Bencher&lt;M&gt;::iter_batched</text></g><g><title>groove::setup::setup (2,648 samples, 60.68%)</title><rect x="38.8176%" y="485" width="60.6783%" height="15" fill="rgb(247,89,20)" fg:x="1694" fg:w="2648"/><text x="39.0676%" y="495.50">groove::setup::setup</text></g><g><title>groove::file::File::add_index (654 samples, 14.99%)</title><rect x="84.5096%" y="469" width="14.9863%" height="15" fill="rgb(248,130,54)" fg:x="3688" fg:w="654"/><text x="84.7596%" y="479.50">groove::file::File::add..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (198 samples, 4.54%)</title><rect x="94.9588%" y="453" width="4.5371%" height="15" fill="rgb(234,196,4)" fg:x="4144" fg:w="198"/><text x="95.2088%" y="463.50">hashb..</text></g><g><title>__libc_start_main (3,600 samples, 82.49%)</title><rect x="17.0486%" y="709" width="82.4931%" height="15" fill="rgb(250,143,31)" fg:x="744" fg:w="3600"/><text x="17.2986%" y="719.50">__libc_start_main</text></g><g><title>main (3,600 samples, 82.49%)</title><rect x="17.0486%" y="693" width="82.4931%" height="15" fill="rgb(211,110,34)" fg:x="744" fg:w="3600"/><text x="17.2986%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (3,600 samples, 82.49%)</title><rect x="17.0486%" y="677" width="82.4931%" height="15" fill="rgb(215,124,48)" fg:x="744" fg:w="3600"/><text x="17.2986%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,600 samples, 82.49%)</title><rect x="17.0486%" y="661" width="82.4931%" height="15" fill="rgb(216,46,13)" fg:x="744" fg:w="3600"/><text x="17.2986%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,600 samples, 82.49%)</title><rect x="17.0486%" y="645" width="82.4931%" height="15" fill="rgb(205,184,25)" fg:x="744" fg:w="3600"/><text x="17.2986%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,600 samples, 82.49%)</title><rect x="17.0486%" y="629" width="82.4931%" height="15" fill="rgb(228,1,10)" fg:x="744" fg:w="3600"/><text x="17.2986%" y="639.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,600 samples, 82.49%)</title><rect x="17.0486%" y="613" width="82.4931%" height="15" fill="rgb(213,116,27)" fg:x="744" fg:w="3600"/><text x="17.2986%" y="623.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (3,600 samples, 82.49%)</title><rect x="17.0486%" y="597" width="82.4931%" height="15" fill="rgb(241,95,50)" fg:x="744" fg:w="3600"/><text x="17.2986%" y="607.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,600 samples, 82.49%)</title><rect x="17.0486%" y="581" width="82.4931%" height="15" fill="rgb(238,48,32)" fg:x="744" fg:w="3600"/><text x="17.2986%" y="591.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>time::main (3,600 samples, 82.49%)</title><rect x="17.0486%" y="565" width="82.4931%" height="15" fill="rgb(235,113,49)" fg:x="744" fg:w="3600"/><text x="17.2986%" y="575.50">time::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (3,406 samples, 78.05%)</title><rect x="21.4940%" y="549" width="78.0477%" height="15" fill="rgb(205,127,43)" fg:x="938" fg:w="3406"/><text x="21.7440%" y="559.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.05%)</title><rect x="99.4959%" y="533" width="0.0458%" height="15" fill="rgb(250,162,2)" fg:x="4342" fg:w="2"/><text x="99.7459%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.05%)</title><rect x="99.4959%" y="517" width="0.0458%" height="15" fill="rgb(220,13,41)" fg:x="4342" fg:w="2"/><text x="99.7459%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.05%)</title><rect x="99.4959%" y="501" width="0.0458%" height="15" fill="rgb(249,221,25)" fg:x="4342" fg:w="2"/><text x="99.7459%" y="511.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.05%)</title><rect x="99.4959%" y="485" width="0.0458%" height="15" fill="rgb(215,208,19)" fg:x="4342" fg:w="2"/><text x="99.7459%" y="495.50"></text></g><g><title>_int_malloc (2 samples, 0.05%)</title><rect x="99.4959%" y="469" width="0.0458%" height="15" fill="rgb(236,175,2)" fg:x="4342" fg:w="2"/><text x="99.7459%" y="479.50"></text></g><g><title>_start (3,606 samples, 82.63%)</title><rect x="16.9340%" y="725" width="82.6306%" height="15" fill="rgb(241,52,2)" fg:x="739" fg:w="3606"/><text x="17.1840%" y="735.50">_start</text></g><g><title>_dl_start (1 samples, 0.02%)</title><rect x="99.5417%" y="709" width="0.0229%" height="15" fill="rgb(248,140,14)" fg:x="4344" fg:w="1"/><text x="99.7917%" y="719.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.02%)</title><rect x="99.5417%" y="693" width="0.0229%" height="15" fill="rgb(253,22,42)" fg:x="4344" fg:w="1"/><text x="99.7917%" y="703.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.02%)</title><rect x="99.5417%" y="677" width="0.0229%" height="15" fill="rgb(234,61,47)" fg:x="4344" fg:w="1"/><text x="99.7917%" y="687.50"></text></g><g><title>handle_intel.constprop.0 (1 samples, 0.02%)</title><rect x="99.5417%" y="661" width="0.0229%" height="15" fill="rgb(208,226,15)" fg:x="4344" fg:w="1"/><text x="99.7917%" y="671.50"></text></g><g><title>intel_check_word.constprop.0 (1 samples, 0.02%)</title><rect x="99.5417%" y="645" width="0.0229%" height="15" fill="rgb(217,221,4)" fg:x="4344" fg:w="1"/><text x="99.7917%" y="655.50"></text></g><g><title>all (4,364 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(212,174,34)" fg:x="0" fg:w="4364"/><text x="0.2500%" y="767.50"></text></g><g><title>time-6dd2e4e788 (4,278 samples, 98.03%)</title><rect x="1.9707%" y="741" width="98.0293%" height="15" fill="rgb(253,83,4)" fg:x="86" fg:w="4278"/><text x="2.2207%" y="751.50">time-6dd2e4e788</text></g><g><title>core::fmt::Formatter::pad_integral (19 samples, 0.44%)</title><rect x="99.5646%" y="725" width="0.4354%" height="15" fill="rgb(250,195,49)" fg:x="4345" fg:w="19"/><text x="99.8146%" y="735.50"></text></g></svg></svg>